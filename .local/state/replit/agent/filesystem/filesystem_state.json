{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPurpleBeats is a modern mobile-first music streaming application built with a React frontend and Express backend. The app provides a Spotify-like experience with features for browsing artists, albums, songs, creating playlists, and managing a personal music library. The application uses a clean, dark-themed UI with purple accent colors and supports music playback controls.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: React Context for music player state, TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Mobile-First Design**: Responsive layout optimized for mobile devices with bottom navigation\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API endpoints for music data operations\n- **Data Layer**: Abstracted storage interface (IStorage) with in-memory implementation\n- **Development Setup**: Vite integration for hot module replacement during development\n\n## Database Schema\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Core Entities**: Artists, Albums, Songs, Playlists, PlaylistSongs, and LikedSongs\n- **Relationships**: Proper foreign key relationships between music entities\n- **Schema Validation**: Zod integration for type-safe data validation\n\n## Key Features\n- **Music Player**: Context-based music player with play/pause, queue management, and progress tracking\n- **Search**: Real-time search functionality across songs, artists, and albums\n- **Library Management**: Personal playlists and liked songs functionality\n- **Mobile Navigation**: Bottom navigation bar with Home, Search, Library, and Podcasts sections\n\n## Development Tooling\n- **TypeScript**: Full type safety across frontend and backend with shared schema types\n- **Path Aliases**: Configured aliases for clean imports (@/ for client, @shared for shared types)\n- **Code Quality**: ESM modules, strict TypeScript configuration\n- **Build Process**: Separate build processes for client (Vite) and server (esbuild)\n\n# External Dependencies\n\n## Core Technologies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm & drizzle-kit**: Database ORM and migration tools\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React routing\n\n## UI Components\n- **@radix-ui/***: Accessible UI primitives for complex components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n## Development Tools\n- **vite**: Frontend build tool and development server\n- **tsx**: TypeScript execution for Node.js\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n\n## Form Handling\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation integration\n- **zod**: Schema validation library\n\nThe application follows a modern full-stack architecture with clear separation of concerns, type safety throughout, and a mobile-first approach to user experience.","size_bytes":3317},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        equalizer: {\n          \"0%, 100%\": { height: \"8px\" },\n          \"50%\": { height: \"20px\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"spin-slow\": \"spin 8s linear infinite\",\n        \"pulse-slow\": \"pulse 3s infinite\",\n        \"bounce-subtle\": \"bounce 2s infinite\",\n        equalizer: \"equalizer 1.5s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3061},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, type Response, type NextFunction } from \"express\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport fs from \"fs\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// --- ESM ekvivalenti za __filename i __dirname ---\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\n\n// CORS configuration for Pi Network integration\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// --- Logging middleware samo za API rute ---\napp.use((req, res, next) => {\n  const start = Date.now();\n  const pathName = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalResJson = res.json.bind(res);\n  // @ts-ignore\n  res.json = (bodyJson: any, ...args: any[]) => {\n    capturedJsonResponse = bodyJson;\n    return originalResJson(bodyJson, ...args);\n  };\n\n  res.on(\"finish\", () => {\n    if (pathName.startsWith(\"/api\")) {\n      const duration = Date.now() - start;\n      let line = `${req.method} ${pathName} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) line += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      if (line.length > 80) line = line.slice(0, 79) + \"…\";\n      log(line);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // --- Public direktorijum ---\n  const ROOT = path.join(__dirname, \"..\");\n  const PUBLIC_DIR = path.join(ROOT, \"public\");\n  const ASSETS_DIR = path.join(ROOT, \"attached_assets\");\n\n  // Serviraj sve fajlove iz public foldera (npr. validation-key.txt)\n  app.use(express.static(PUBLIC_DIR));\n  \n  // Serviraj slike iz attached_assets direktorijuma\n  app.use(\"/attached_assets\", express.static(ASSETS_DIR));\n\n  // Eksplicitno serviraj privacy i terms\n  app.get(\"/privacy\", (_req, res) => {\n    res.sendFile(path.join(PUBLIC_DIR, \"privacy\", \"index.html\"));\n  });\n\n  app.get(\"/terms\", (_req, res) => {\n    res.sendFile(path.join(PUBLIC_DIR, \"terms\", \"index.html\"));\n  });\n\n  app.get(\"/legal\", (_req, res) => {\n    res.sendFile(path.join(PUBLIC_DIR, \"legal\", \"index.html\"));\n  });\n\n  // Eksplicitno za validation-key.txt (ako Pi zahteva striktno)\n  app.get(\"/validation-key.txt\", (_req, res) => {\n    res.sendFile(path.join(PUBLIC_DIR, \"validation-key.txt\"));\n  });\n\n  // --- Global error handler ---\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err?.status || err?.statusCode || 500;\n    const message = err?.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // --- Development vs Production ---\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    // In production, serve the built client files from the correct location\n    const clientDistPath = path.join(__dirname, \"..\", \"public\");\n    \n    // Check if build directory exists\n    if (!fs.existsSync(clientDistPath)) {\n      throw new Error(\n        `Could not find the build directory: ${clientDistPath}, make sure to build the client first`\n      );\n    }\n    \n    // Serve static files for the React app\n    app.use(express.static(clientDistPath));\n    \n    // SPA fallback - serve index.html for unmatched routes\n    app.use(\"*\", (_req, res) => {\n      res.sendFile(path.join(clientDistPath, \"index.html\"));\n    });\n  }\n\n  // --- Start servera ---\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    { port, host: \"0.0.0.0\" },\n    () => log(`serving on port ${port}`)\n  );\n  \n  // FORCE development environment for Pi authentication\n  process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n  process.env.PI_SKIP_VERIFY = process.env.PI_SKIP_VERIFY || 'true';\n  \n  console.log(\"Server started with Pi API key:\", process.env.PI_API_KEY ? \"CONFIGURED\" : \"MISSING\");\n  console.log(\"NODE_ENV:\", process.env.NODE_ENV);\n  console.log(\"PI_SKIP_VERIFY:\", process.env.PI_SKIP_VERIFY);\n})();\n","size_bytes":4442},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertSongSchema,\n  insertPlaylistSchema,\n  insertPlaylistSongSchema,\n  insertLikedSongSchema,\n  insertArtistSchema,\n  insertAlbumSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ========================================\n  // Pi Network Configuration\n  // ========================================\n  \n  app.get(\"/api/pi-config\", (req, res) => {\n    const appId = process.env.PI_APP_ID || \"purplebeats5173\";\n    const environment = process.env.PI_ENVIRONMENT || (process.env.NODE_ENV === 'production' ? 'production' : 'development');\n    \n    console.log('🔧 Providing PurpleBeats Pi config to frontend');\n    console.log('   APP_ID:', appId);\n    console.log('   ENVIRONMENT:', environment);\n    console.log('   PI_API_KEY:', process.env.PI_API_KEY ? 'CONFIGURED' : 'MISSING');\n    \n    res.json({\n      appId: appId,\n      environment: environment,\n      configured: !!process.env.PI_API_KEY\n    });\n  });\n\n  // ========================================\n  // Artists Routes\n  // ========================================\n  \n  app.get(\"/api/artists\", async (req, res) => {\n    try {\n      const artists = await storage.getArtists();\n      res.json(artists);\n    } catch (error) {\n      console.error(\"Error fetching artists:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/artists/:id\", async (req, res) => {\n    try {\n      const artist = await storage.getArtist(req.params.id);\n      if (!artist) {\n        return res.status(404).json({ error: \"Artist not found\" });\n      }\n      res.json(artist);\n    } catch (error) {\n      console.error(\"Error fetching artist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/artists\", async (req, res) => {\n    try {\n      const result = insertArtistSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid artist data\", details: result.error.errors });\n      }\n      const artist = await storage.createArtist(result.data);\n      res.status(201).json(artist);\n    } catch (error) {\n      console.error(\"Error creating artist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Albums Routes\n  // ========================================\n  \n  app.get(\"/api/albums\", async (req, res) => {\n    try {\n      const albums = await storage.getAlbums();\n      res.json(albums);\n    } catch (error) {\n      console.error(\"Error fetching albums:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/albums/:id\", async (req, res) => {\n    try {\n      const album = await storage.getAlbum(req.params.id);\n      if (!album) {\n        return res.status(404).json({ error: \"Album not found\" });\n      }\n      res.json(album);\n    } catch (error) {\n      console.error(\"Error fetching album:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/albums/artist/:artistId\", async (req, res) => {\n    try {\n      const albums = await storage.getAlbumsByArtist(req.params.artistId);\n      res.json(albums);\n    } catch (error) {\n      console.error(\"Error fetching artist albums:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/albums\", async (req, res) => {\n    try {\n      const result = insertAlbumSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid album data\", details: result.error.errors });\n      }\n      const album = await storage.createAlbum(result.data);\n      res.status(201).json(album);\n    } catch (error) {\n      console.error(\"Error creating album:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Songs Routes\n  // ========================================\n  \n  app.get(\"/api/songs\", async (req, res) => {\n    try {\n      const songs = await storage.getSongs();\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/songs/trending\", async (req, res) => {\n    try {\n      const songs = await storage.getTrendingSongs();\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching trending songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/songs/recently-played\", async (req, res) => {\n    try {\n      const songs = await storage.getRecentlyPlayed();\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching recently played songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const song = await storage.getSong(req.params.id);\n      if (!song) {\n        return res.status(404).json({ error: \"Song not found\" });\n      }\n      res.json(song);\n    } catch (error) {\n      console.error(\"Error fetching song:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/songs/album/:albumId\", async (req, res) => {\n    try {\n      const songs = await storage.getSongsByAlbum(req.params.albumId);\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching album songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/songs/artist/:artistId\", async (req, res) => {\n    try {\n      const songs = await storage.getSongsByArtist(req.params.artistId);\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching artist songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/songs\", async (req, res) => {\n    try {\n      const result = insertSongSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid song data\", details: result.error.errors });\n      }\n      const song = await storage.createSong(result.data);\n      res.status(201).json(song);\n    } catch (error) {\n      console.error(\"Error creating song:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/songs/:id/play\", async (req, res) => {\n    try {\n      await storage.incrementPlayCount(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error incrementing play count:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Search Routes\n  // ========================================\n  \n  app.get(\"/api/search/songs\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const songs = await storage.searchSongs(query);\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error searching songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/search/playlists\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const playlists = await storage.searchPlaylists(query);\n      res.json(playlists);\n    } catch (error) {\n      console.error(\"Error searching playlists:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/search/artists\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const artists = await storage.searchArtists(query);\n      res.json(artists);\n    } catch (error) {\n      console.error(\"Error searching artists:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/search/genres/:genre\", async (req, res) => {\n    try {\n      const songs = await storage.searchSongsByGenre(req.params.genre);\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error searching songs by genre:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/genres\", async (req, res) => {\n    try {\n      const genres = await storage.getAvailableGenres();\n      res.json(genres);\n    } catch (error) {\n      console.error(\"Error fetching genres:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Playlists Routes\n  // ========================================\n  \n  app.get(\"/api/playlists\", async (req, res) => {\n    try {\n      const playlists = await storage.getPlaylists();\n      res.json(playlists);\n    } catch (error) {\n      console.error(\"Error fetching playlists:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/playlists/:id\", async (req, res) => {\n    try {\n      const playlist = await storage.getPlaylistWithSongs(req.params.id);\n      if (!playlist) {\n        return res.status(404).json({ error: \"Playlist not found\" });\n      }\n      res.json(playlist);\n    } catch (error) {\n      console.error(\"Error fetching playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/playlists/user/:userId\", async (req, res) => {\n    try {\n      const playlists = await storage.getUserPlaylists(req.params.userId);\n      res.json(playlists);\n    } catch (error) {\n      console.error(\"Error fetching user playlists:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/playlists\", async (req, res) => {\n    try {\n      const result = insertPlaylistSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid playlist data\", details: result.error.errors });\n      }\n      const playlist = await storage.createPlaylist(result.data);\n      res.status(201).json(playlist);\n    } catch (error) {\n      console.error(\"Error creating playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/playlists/:playlistId/songs\", async (req, res) => {\n    try {\n      const result = insertPlaylistSongSchema.safeParse({\n        ...req.body,\n        playlistId: req.params.playlistId,\n      });\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid playlist song data\", details: result.error.errors });\n      }\n      const playlistSong = await storage.addSongToPlaylist(result.data);\n      res.status(201).json(playlistSong);\n    } catch (error) {\n      console.error(\"Error adding song to playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/playlists/:playlistId/songs/:songId\", async (req, res) => {\n    try {\n      await storage.removeSongFromPlaylist(req.params.playlistId, req.params.songId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing song from playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/playlists/:playlistId\", async (req, res) => {\n    try {\n      await storage.deletePlaylist(req.params.playlistId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/playlists/:playlistId\", async (req, res) => {\n    try {\n      const updates = {\n        name: req.body.name,\n        imageUrl: req.body.imageUrl,\n        description: req.body.description,\n      };\n      const playlist = await storage.updatePlaylist(req.params.playlistId, updates);\n      if (!playlist) {\n        return res.status(404).json({ error: \"Playlist not found\" });\n      }\n      res.json(playlist);\n    } catch (error) {\n      console.error(\"Error updating playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Liked Songs Routes\n  // ========================================\n  \n  app.get(\"/api/liked-songs\", async (req, res) => {\n    try {\n      const songs = await storage.getLikedSongs();\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching liked songs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/liked-songs/:songId/check\", async (req, res) => {\n    try {\n      const isLiked = await storage.isSongLiked(req.params.songId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Error checking if song is liked:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/liked-songs\", async (req, res) => {\n    try {\n      const result = insertLikedSongSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid liked song data\", details: result.error.errors });\n      }\n      const likedSong = await storage.likeSong(result.data);\n      res.status(201).json(likedSong);\n    } catch (error) {\n      console.error(\"Error liking song:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/liked-songs/:songId\", async (req, res) => {\n    try {\n      await storage.unlikeSong(req.params.songId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error unliking song:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Liked Playlists Routes\n  // ========================================\n  \n  app.get(\"/api/liked-playlists/:playlistId/check\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string || \"demo-user-123\";\n      const isLiked = await storage.isPlaylistLiked(req.params.playlistId, userId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Error checking if playlist is liked:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/liked-playlists/:playlistId\", async (req, res) => {\n    try {\n      const userId = req.body.userId || \"demo-user-123\";\n      await storage.likePlaylist(req.params.playlistId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error liking playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/liked-playlists/:playlistId\", async (req, res) => {\n    try {\n      const userId = req.body.userId || \"demo-user-123\";\n      await storage.unlikePlaylist(req.params.playlistId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error unliking playlist:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Library Playlists Routes\n  // ========================================\n  \n  app.get(\"/api/library-playlists/:playlistId/check\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string || \"demo-user-123\";\n      const playlists = await storage.getLibraryPlaylists(userId);\n      const isInLibrary = playlists.some(p => p.id === req.params.playlistId);\n      res.json({ isInLibrary });\n    } catch (error) {\n      console.error(\"Error checking if playlist is in library:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/library-playlists/:playlistId\", async (req, res) => {\n    try {\n      const userId = req.body.userId || \"demo-user-123\";\n      await storage.addPlaylistToLibrary(req.params.playlistId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error adding playlist to library:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/library-playlists/:playlistId\", async (req, res) => {\n    try {\n      const userId = req.body.userId || \"demo-user-123\";\n      await storage.removePlaylistFromLibrary(req.params.playlistId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing playlist from library:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Profile Routes\n  // ========================================\n  \n  app.get(\"/api/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getUserProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.updateUserProfile(req.params.userId, req.body);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Membership Routes\n  // ========================================\n  \n  app.get(\"/api/membership/:userId\", async (req, res) => {\n    try {\n      const membership = await storage.getMembership(req.params.userId);\n      if (!membership) {\n        return res.status(404).json({ error: \"Membership not found\" });\n      }\n      res.json(membership);\n    } catch (error) {\n      console.error(\"Error fetching membership:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/membership/:userId\", async (req, res) => {\n    try {\n      const membership = await storage.updateMembership(req.params.userId, req.body);\n      if (!membership) {\n        return res.status(404).json({ error: \"Membership not found\" });\n      }\n      res.json(membership);\n    } catch (error) {\n      console.error(\"Error updating membership:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Admin Routes\n  // ========================================\n  \n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      // Simple stats implementation using available methods\n      const profiles = await storage.getAllProfiles();\n      const memberships = await storage.getAllMemberships();\n      const premiumCount = memberships.filter(m => m.isPremium).length;\n      \n      const stats = {\n        totalUsers: profiles.length,\n        premiumUsers: premiumCount,\n        freeUsers: profiles.length - premiumCount,\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      // Simple users implementation using available methods\n      const profiles = await storage.getAllProfiles();\n      res.json(profiles);\n    } catch (error) {\n      console.error(\"Error fetching admin users:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/registrations\", async (req, res) => {\n    try {\n      const profiles = await storage.getAllProfiles();\n      \n      // Group by date for chart data\n      const registrationsByDate: Record<string, number> = {};\n      profiles.forEach((profile: any) => {\n        const date = new Date(profile.createdAt).toISOString().split('T')[0];\n        registrationsByDate[date] = (registrationsByDate[date] || 0) + 1;\n      });\n\n      // Convert to array format for charts\n      const chartData = Object.entries(registrationsByDate)\n        .map(([date, count]) => ({ date, count }))\n        .sort((a, b) => a.date.localeCompare(b.date));\n\n      res.json(chartData);\n    } catch (error) {\n      console.error(\"Error fetching registration data:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ========================================\n  // Authentication Routes (Simple demo)\n  // ========================================\n  \n  app.post(\"/api/auth/pi-login\", async (req, res) => {\n    try {\n      const { accessToken, user } = req.body;\n      \n      // Validate the Pi authentication data\n      if (!accessToken || !user || !user.uid || !user.username) {\n        return res.status(400).json({ \n          error: \"Invalid Pi authentication data. Missing access token or user information.\" \n        });\n      }\n      \n      console.log(\"✅ Pi login request received for user:\", user.username, \"UID:\", user.uid);\n      \n      // Verify the user's access token with Pi Platform API\n      try {\n        const environment = process.env.PI_ENVIRONMENT || (process.env.NODE_ENV === 'production' ? 'production' : 'development');\n        const piApiUrl = environment === 'production' \n          ? 'https://api.minepi.com' \n          : 'https://api.minepi.com'; // Pi uses same endpoint for both environments\n          \n        const verifyResponse = await fetch(`${piApiUrl}/v2/me`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (!verifyResponse.ok) {\n          console.error(\"❌ Pi token verification failed:\", verifyResponse.status);\n          return res.status(401).json({ error: \"Invalid access token\" });\n        }\n        \n        const verifiedUser = await verifyResponse.json();\n        console.log(\"✅ Token verified with Pi Platform:\", verifiedUser);\n        \n        // Ensure the user data matches\n        if (verifiedUser.uid !== user.uid) {\n          console.error(\"❌ User UID mismatch between token and provided data\");\n          return res.status(401).json({ error: \"Token and user data mismatch\" });\n        }\n\n      } catch (verifyError) {\n        console.error(\"❌ Pi token verification error:\", verifyError);\n        return res.status(401).json({ error: \"Token verification failed\" });\n      }\n      \n      // Create or update user profile in the system\n      const userProfile = await storage.upsertUser({\n        id: user.uid,\n        username: user.username,\n        isPremium: false\n      });\n      \n      console.log(\"✅ User profile created/updated:\", userProfile);\n      \n      // Return success response with user data\n      res.json({\n        success: true,\n        message: \"Pi authentication successful\",\n        user: {\n          uid: user.uid,\n          username: user.username,\n          profile: userProfile\n        }\n      });\n      \n    } catch (error) {\n      console.error(\"❌ Pi authentication error:\", error);\n      res.status(500).json({ error: \"Pi authentication failed\" });\n    }\n  });\n  \n  app.get(\"/api/me\", async (req, res) => {\n    // For demo purposes, always return not authenticated\n    res.status(401).json({ error: \"Not authenticated\" });\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.json({ success: true, message: \"Successfully logged out\" });\n  });\n\n  // ========================================\n  // Pi Payment Routes\n  // ========================================\n  \n  app.post(\"/api/pi/payment\", async (req, res) => {\n    try {\n      const { paymentId, userId, amount, status, metadata } = req.body;\n      \n      if (!paymentId || !userId || !amount) {\n        return res.status(400).json({ error: \"Missing required payment data\" });\n      }\n      \n      console.log(\"💰 Creating Pi payment record:\", paymentId, \"for user:\", userId);\n      \n      const payment = await storage.createPiPayment({\n        paymentId,\n        userId,\n        amount,\n        status: status || \"created\",\n        metadata: metadata || null,\n      });\n      \n      console.log(\"✅ Pi payment record created:\", payment.id);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error(\"❌ Error creating Pi payment:\", error);\n      res.status(500).json({ error: \"Failed to create payment record\" });\n    }\n  });\n\n  app.post(\"/api/pi/payment/:paymentId/approve\", async (req, res) => {\n    try {\n      const { paymentId } = req.params;\n      \n      console.log(\"🎯 Approving Pi payment:\", paymentId);\n      \n      const payment = await storage.getPiPayment(paymentId);\n      if (!payment) {\n        console.error(\"❌ Payment not found:\", paymentId);\n        return res.status(404).json({ error: \"Payment not found\" });\n      }\n      \n      const updatedPayment = await storage.updatePiPayment(paymentId, {\n        status: \"approved\",\n        updatedAt: new Date(),\n      });\n      \n      console.log(\"✅ Pi payment approved:\", paymentId);\n      res.json(updatedPayment);\n    } catch (error) {\n      console.error(\"❌ Error approving Pi payment:\", error);\n      res.status(500).json({ error: \"Failed to approve payment\" });\n    }\n  });\n\n  app.post(\"/api/pi/payment/:paymentId/complete\", async (req, res) => {\n    try {\n      const { paymentId } = req.params;\n      const { txid } = req.body;\n      \n      if (!txid) {\n        return res.status(400).json({ error: \"Transaction ID required\" });\n      }\n      \n      console.log(\"🏁 Completing Pi payment:\", paymentId, \"txid:\", txid);\n      \n      const payment = await storage.getPiPayment(paymentId);\n      if (!payment) {\n        console.error(\"❌ Payment not found:\", paymentId);\n        return res.status(404).json({ error: \"Payment not found\" });\n      }\n      \n      // Update payment status to completed\n      const updatedPayment = await storage.updatePiPayment(paymentId, {\n        status: \"completed\",\n        txid,\n        updatedAt: new Date(),\n      });\n      \n      // Create or update premium membership\n      try {\n        const expiresAt = new Date();\n        expiresAt.setMonth(expiresAt.getMonth() + 1); // 1 month premium\n        \n        // Check if membership exists\n        let membership = await storage.getMembership(payment.userId);\n        \n        if (membership) {\n          // Update existing membership\n          membership = await storage.updateMembership(payment.userId, {\n            isPremium: true,\n            expiresAt,\n            paymentId,\n            txid,\n            piWalletId: payment.userId, // Placeholder for Pi wallet ID\n            amount: payment.amount,\n          });\n        } else {\n          // Create new membership\n          membership = await storage.createMembership({\n            userId: payment.userId,\n            isPremium: true,\n            expiresAt,\n            paymentId,\n            txid,\n            piWalletId: payment.userId, // Placeholder for Pi wallet ID\n            amount: payment.amount,\n          });\n        }\n        \n        console.log(\"✅ Premium membership activated for user:\", payment.userId);\n        console.log(\"✅ Pi payment completed:\", paymentId);\n        \n        res.json({\n          success: true,\n          payment: updatedPayment,\n          membership,\n        });\n      } catch (membershipError) {\n        console.error(\"❌ Error creating membership:\", membershipError);\n        res.status(500).json({ error: \"Payment completed but failed to activate membership\" });\n      }\n    } catch (error) {\n      console.error(\"❌ Error completing Pi payment:\", error);\n      res.status(500).json({ error: \"Failed to complete payment\" });\n    }\n  });\n\n  // ========================================\n  // Health Check\n  // ========================================\n  \n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: Date.now() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":28480},"server/storage.ts":{"content":"import { \n  type Artist, type Album, type Song, type Playlist, type PlaylistSong, type LikedSong, type LikedPlaylist, type LibraryPlaylist, type Membership, type PiPayment, type Profile,\n  type InsertArtist, type InsertAlbum, type InsertSong, type InsertPlaylist, type InsertPlaylistSong, type InsertLikedSong, type InsertLikedPlaylist, type InsertLibraryPlaylist, type InsertMembership, type InsertPiPayment, type InsertProfile,\n  type SongWithDetails, type AlbumWithDetails, type PlaylistWithDetails, type PlaylistWithAmbient,\n  type AmbientMusicSetting, type InsertAmbientMusicSetting,\n  artists, albums, songs, playlists, playlistSongs, likedSongs, likedPlaylists, libraryPlaylists, memberships, piPayments, ambientMusicSettings, profiles\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, ilike, desc, sql, isNotNull, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Artists\n  getArtists(): Promise<Artist[]>;\n  getArtist(id: string): Promise<Artist | undefined>;\n  createArtist(artist: InsertArtist): Promise<Artist>;\n\n  // Albums\n  getAlbums(): Promise<Album[]>;\n  getAlbum(id: string): Promise<Album | undefined>;\n  getAlbumsByArtist(artistId: string): Promise<Album[]>;\n  createAlbum(album: InsertAlbum): Promise<Album>;\n\n  // Songs\n  getSongs(): Promise<Song[]>;\n  getSong(id: string): Promise<Song | undefined>;\n  getSongsByAlbum(albumId: string): Promise<Song[]>;\n  getSongsByArtist(artistId: string): Promise<Song[]>;\n  searchSongs(query: string): Promise<SongWithDetails[]>;\n  searchSongsByGenre(genre: string): Promise<SongWithDetails[]>;\n  searchPlaylists(query: string): Promise<Playlist[]>;\n  searchArtists(query: string): Promise<Artist[]>;\n  getRecentlyPlayed(): Promise<SongWithDetails[]>;\n  getTrendingSongs(): Promise<SongWithDetails[]>;\n  getAvailableGenres(): Promise<string[]>;\n  createSong(song: InsertSong): Promise<Song>;\n  incrementPlayCount(songId: string): Promise<void>;\n\n  // Playlists\n  getPlaylists(): Promise<Playlist[]>;\n  getPlaylist(id: string): Promise<Playlist | undefined>;\n  getUserPlaylists(userId: string): Promise<Playlist[]>;\n  getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined>;\n  createPlaylist(playlist: InsertPlaylist): Promise<Playlist>;\n  addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong>;\n  removeSongFromPlaylist(playlistId: string, songId: string): Promise<void>;\n  generateDailyMix(forceRefresh?: boolean): Promise<Playlist>;\n  initializeDefaultPlaylists(): Promise<void>;\n  deletePlaylist(playlistId: string): Promise<void>;\n  updatePlaylist(playlistId: string, updates: { name?: string; imageUrl?: string; description?: string }): Promise<Playlist | undefined>;\n\n  // Liked Songs\n  getLikedSongs(): Promise<SongWithDetails[]>;\n  likeSong(data: InsertLikedSong): Promise<LikedSong>;\n  unlikeSong(songId: string): Promise<void>;\n  isSongLiked(songId: string): Promise<boolean>;\n\n  // Liked Playlists\n  getLikedPlaylists(userId: string): Promise<PlaylistWithDetails[]>;\n  likePlaylist(playlistId: string, userId: string): Promise<void>;\n  unlikePlaylist(playlistId: string, userId: string): Promise<void>;\n  isPlaylistLiked(playlistId: string, userId: string): Promise<boolean>;\n\n  // Library Playlists\n  getLibraryPlaylists(userId: string): Promise<PlaylistWithDetails[]>;\n  addPlaylistToLibrary(playlistId: string, userId: string): Promise<void>;\n  removePlaylistFromLibrary(playlistId: string, userId: string): Promise<void>;\n  isPlaylistInLibrary(playlistId: string, userId: string): Promise<boolean>;\n\n  // User Profile\n  getUserProfile(userId: string): Promise<Profile | undefined>;\n  updateUserProfile(userId: string, data: { name?: string; nickname?: string; imageUrl?: string }): Promise<Profile | undefined>;\n  createUserProfile(profile: InsertProfile): Promise<Profile>;\n  getAllProfiles(): Promise<Profile[]>;\n  upsertUser(user: { id: string; username: string; isPremium?: boolean }): Promise<Profile>;\n\n  // Memberships\n  getMembership(userId: string): Promise<Membership | undefined>;\n  createMembership(membership: InsertMembership): Promise<Membership>;\n  updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined>;\n  getAllMemberships(): Promise<Membership[]>;\n  \n  // Pi Payments\n  createPiPayment(payment: InsertPiPayment): Promise<PiPayment>;\n  getPiPayment(paymentId: string): Promise<PiPayment | undefined>;\n  updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined>;\n  getPiPaymentsByUser(userId: string): Promise<PiPayment[]>;\n  \n  // Ambient Music\n  generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting>;\n  getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined>;\n  updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined>;\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  // Artists\n  async getArtists(): Promise<Artist[]> {\n    return await db.select().from(artists);\n  }\n\n  async getArtist(id: string): Promise<Artist | undefined> {\n    const [artist] = await db.select().from(artists).where(eq(artists.id, id));\n    return artist || undefined;\n  }\n\n  async createArtist(artist: InsertArtist): Promise<Artist> {\n    const [newArtist] = await db.insert(artists).values({\n      ...artist,\n      id: artist.id || randomUUID(),\n    }).returning();\n    return newArtist;\n  }\n\n  // Albums\n  async getAlbums(): Promise<Album[]> {\n    return await db.select().from(albums);\n  }\n\n  async getAlbum(id: string): Promise<Album | undefined> {\n    const [album] = await db.select().from(albums).where(eq(albums.id, id));\n    return album || undefined;\n  }\n\n  async getAlbumsByArtist(artistId: string): Promise<Album[]> {\n    return await db.select().from(albums).where(eq(albums.artistId, artistId));\n  }\n\n  async createAlbum(album: InsertAlbum): Promise<Album> {\n    const [newAlbum] = await db.insert(albums).values({\n      ...album,\n      id: album.id || randomUUID(),\n    }).returning();\n    return newAlbum;\n  }\n\n  // Songs\n  async getSongs(): Promise<Song[]> {\n    return await db.select().from(songs);\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    const [song] = await db.select().from(songs).where(eq(songs.id, id));\n    return song || undefined;\n  }\n\n  async getSongsByAlbum(albumId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.albumId, albumId));\n  }\n\n  async getSongsByArtist(artistId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.artistId, artistId));\n  }\n\n  async searchSongs(query: string): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(ilike(songs.title, `%${query}%`));\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async searchPlaylists(query: string): Promise<Playlist[]> {\n    return await db\n      .select()\n      .from(playlists)\n      .where(ilike(playlists.name, `%${query}%`));\n  }\n\n  async searchSongsByGenre(genre: string): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(ilike(songs.genre, `%${genre}%`));\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async searchArtists(query: string): Promise<Artist[]> {\n    return await db\n      .select()\n      .from(artists)\n      .where(ilike(artists.name, `%${query}%`));\n  }\n\n  async getRecentlyPlayed(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(isNotNull(songs.lastPlayed))\n      .orderBy(desc(songs.lastPlayed))\n      .limit(8);\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async getTrendingSongs(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(songs.playCount))\n      .limit(15);\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async getAvailableGenres(): Promise<string[]> {\n    const results = await db\n      .selectDistinct({ genre: songs.genre })\n      .from(songs)\n      .where(isNotNull(songs.genre))\n      .orderBy(asc(songs.genre));\n\n    return results.map(row => row.genre!);\n  }\n\n  async createSong(song: InsertSong): Promise<Song> {\n    const [newSong] = await db.insert(songs).values({\n      ...song,\n      id: song.id || randomUUID(),\n    }).returning();\n    return newSong;\n  }\n\n  async incrementPlayCount(songId: string): Promise<void> {\n    await db\n      .update(songs)\n      .set({ \n        playCount: sql`${songs.playCount} + 1`,\n        lastPlayed: new Date()\n      })\n      .where(eq(songs.id, songId));\n  }\n\n  // Playlists\n  async getPlaylists(): Promise<Playlist[]> {\n    return await db.select().from(playlists);\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    const [playlist] = await db.select().from(playlists).where(eq(playlists.id, id));\n    return playlist || undefined;\n  }\n\n  async getUserPlaylists(userId: string): Promise<Playlist[]> {\n    return await db.select().from(playlists).where(eq(playlists.createdBy, userId));\n  }\n\n  async getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined> {\n    const [playlist] = await db.select().from(playlists).where(eq(playlists.id, id));\n    if (!playlist) return undefined;\n\n    const playlistSongsResult = await db\n      .select({\n        playlistSong: playlistSongs,\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(playlistSongs)\n      .innerJoin(songs, eq(playlistSongs.songId, songs.id))\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(eq(playlistSongs.playlistId, id))\n      .orderBy(playlistSongs.position);\n\n    const songsWithDetails = playlistSongsResult.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n\n    return {\n      ...playlist,\n      songs: songsWithDetails,\n    };\n  }\n\n  async createPlaylist(playlist: InsertPlaylist): Promise<Playlist> {\n    const [newPlaylist] = await db.insert(playlists).values({\n      ...playlist,\n      id: randomUUID(),\n    }).returning();\n    return newPlaylist;\n  }\n\n  async addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong> {\n    const [playlistSong] = await db.insert(playlistSongs).values({\n      ...data,\n      id: randomUUID(),\n    }).returning();\n\n    // Update playlist song count\n    await db\n      .update(playlists)\n      .set({\n        songCount: sql`${playlists.songCount} + 1`,\n      })\n      .where(eq(playlists.id, data.playlistId));\n\n    return playlistSong;\n  }\n\n  async removeSongFromPlaylist(playlistId: string, songId: string): Promise<void> {\n    await db\n      .delete(playlistSongs)\n      .where(\n        sql`${playlistSongs.playlistId} = ${playlistId} AND ${playlistSongs.songId} = ${songId}`\n      );\n\n    // Update playlist song count (ensure it doesn't go below 0)\n    await db\n      .update(playlists)\n      .set({\n        songCount: sql`GREATEST(0, ${playlists.songCount} - 1)`,\n      })\n      .where(eq(playlists.id, playlistId));\n  }\n\n  // Liked Songs\n  async getLikedSongs(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(likedSongs)\n      .innerJoin(songs, eq(likedSongs.songId, songs.id))\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(likedSongs.likedAt));\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async likeSong(data: InsertLikedSong): Promise<LikedSong> {\n    const [likedSong] = await db.insert(likedSongs).values({\n      ...data,\n      id: randomUUID(),\n    }).returning();\n    return likedSong;\n  }\n\n  async unlikeSong(songId: string): Promise<void> {\n    await db.delete(likedSongs).where(eq(likedSongs.songId, songId));\n  }\n\n  async isSongLiked(songId: string): Promise<boolean> {\n    const [liked] = await db.select().from(likedSongs).where(eq(likedSongs.songId, songId));\n    return !!liked;\n  }\n\n  // User Profile\n  async getUserProfile(userId: string): Promise<Profile | undefined> {\n    const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async updateUserProfile(userId: string, data: { name?: string; nickname?: string; imageUrl?: string }): Promise<Profile | undefined> {\n    const existingProfile = await this.getUserProfile(userId);\n    \n    if (!existingProfile) {\n      // Create new profile if doesn't exist\n      const newProfile = await this.createUserProfile({\n        userId,\n        name: data.name || 'PurpleBeats User',\n        nickname: data.nickname,\n        imageUrl: data.imageUrl,\n      });\n      return newProfile;\n    }\n\n    const [updatedProfile] = await db\n      .update(profiles)\n      .set({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .where(eq(profiles.userId, userId))\n      .returning();\n    \n    return updatedProfile || undefined;\n  }\n\n  async createUserProfile(profile: InsertProfile): Promise<Profile> {\n    const [newProfile] = await db.insert(profiles).values({\n      ...profile,\n      id: randomUUID(),\n    }).returning();\n    return newProfile;\n  }\n\n  // Memberships\n  async getMembership(userId: string): Promise<Membership | undefined> {\n    const [membership] = await db.select().from(memberships).where(eq(memberships.userId, userId));\n    return membership || undefined;\n  }\n\n  async createMembership(membership: InsertMembership): Promise<Membership> {\n    const [newMembership] = await db.insert(memberships).values({\n      ...membership,\n      id: randomUUID(),\n    }).returning();\n    return newMembership;\n  }\n\n  async updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined> {\n    const [updatedMembership] = await db\n      .update(memberships)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(memberships.userId, userId))\n      .returning();\n    \n    return updatedMembership || undefined;\n  }\n  \n  // Pi Payments\n  async createPiPayment(payment: InsertPiPayment): Promise<PiPayment> {\n    const [newPayment] = await db.insert(piPayments).values({\n      ...payment,\n      id: randomUUID(),\n    }).returning();\n    return newPayment;\n  }\n\n  async getPiPayment(paymentId: string): Promise<PiPayment | undefined> {\n    const [payment] = await db.select().from(piPayments).where(eq(piPayments.paymentId, paymentId));\n    return payment || undefined;\n  }\n\n  async updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined> {\n    const [updatedPayment] = await db\n      .update(piPayments)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(piPayments.paymentId, paymentId))\n      .returning();\n    \n    return updatedPayment || undefined;\n  }\n\n  async getPiPaymentsByUser(userId: string): Promise<PiPayment[]> {\n    return await db.select().from(piPayments).where(eq(piPayments.userId, userId));\n  }\n  \n  // Ambient Music\n  async generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting> {\n    const [ambientSetting] = await db.insert(ambientMusicSettings).values({\n      id: randomUUID(),\n      playlistId,\n      theme: \"cosmic\",\n      mood: \"peaceful\",\n      tempo: 60,\n      intensity: 5,\n      enabled: true,\n    }).returning();\n    return ambientSetting;\n  }\n\n  async getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined> {\n    const [setting] = await db.select().from(ambientMusicSettings).where(eq(ambientMusicSettings.playlistId, playlistId));\n    return setting || undefined;\n  }\n\n  async updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined> {\n    const [updatedSetting] = await db\n      .update(ambientMusicSettings)\n      .set({\n        ...updates,\n        lastGenerated: new Date(),\n      })\n      .where(eq(ambientMusicSettings.id, settingId))\n      .returning();\n    \n    return updatedSetting || undefined;\n  }\n\n  // Daily Mix Generation\n  async generateDailyMix(forceRefresh: boolean = false): Promise<Playlist> {\n    const DAILY_MIX_ID = \"daily-mix-1\";\n    \n    // Check if Daily Mix already exists and was generated today\n    const existingPlaylist = await this.getPlaylist(DAILY_MIX_ID);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    if (existingPlaylist && !forceRefresh) {\n      const playlistDate = existingPlaylist.createdAt ? new Date(existingPlaylist.createdAt) : new Date();\n      playlistDate.setHours(0, 0, 0, 0);\n      \n      // If playlist was created today, return it\n      if (playlistDate.getTime() === today.getTime()) {\n        return existingPlaylist;\n      }\n    }\n\n    // Get all songs to pick from\n    const allSongs = await this.getSongs();\n    if (allSongs.length === 0) {\n      throw new Error(\"No songs available for Daily Mix\");\n    }\n\n    // Shuffle and pick 10-15 random songs\n    const shuffled = allSongs.sort(() => Math.random() - 0.5);\n    const selectedSongs = shuffled.slice(0, Math.min(15, allSongs.length));\n\n    // Create or update Daily Mix playlist\n    if (existingPlaylist) {\n      // Clear existing songs\n      await db.delete(playlistSongs).where(eq(playlistSongs.playlistId, DAILY_MIX_ID));\n      \n      // Update playlist with new date\n      const [updatedPlaylist] = await db\n        .update(playlists)\n        .set({\n          songCount: selectedSongs.length,\n          createdAt: new Date(),\n        })\n        .where(eq(playlists.id, DAILY_MIX_ID))\n        .returning();\n        \n      // Add new songs\n      for (let i = 0; i < selectedSongs.length; i++) {\n        await db.insert(playlistSongs).values({\n          id: randomUUID(),\n          playlistId: DAILY_MIX_ID,\n          songId: selectedSongs[i].id,\n          position: i + 1,\n        });\n      }\n      \n      return updatedPlaylist;\n    } else {\n      // Create new Daily Mix playlist\n      const [newPlaylist] = await db.insert(playlists).values({\n        id: DAILY_MIX_ID,\n        name: \"Daily Mix 1\",\n        description: \"Electronic and Synthpop favorites\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n        isPublic: true,\n        songCount: selectedSongs.length,\n      }).returning();\n\n      // Add songs to playlist\n      for (let i = 0; i < selectedSongs.length; i++) {\n        await db.insert(playlistSongs).values({\n          id: randomUUID(),\n          playlistId: DAILY_MIX_ID,\n          songId: selectedSongs[i].id,\n          position: i + 1,\n        });\n      }\n\n      return newPlaylist;\n    }\n  }\n\n  // Initialize default playlists if they don't exist\n  async initializeDefaultPlaylists(): Promise<void> {\n    const allSongs = await this.getSongs();\n    if (allSongs.length === 0) return;\n\n    const defaultPlaylists = [\n      {\n        id: \"discover-weekly\",\n        name: \"Discover Weekly\",\n        description: \"Fresh finds for you\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n        songs: allSongs.slice(0, 6)\n      },\n      {\n        id: \"purple-vibes\",\n        name: \"Purple Vibes\",\n        description: \"All things purple and gold\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n        songs: allSongs.slice(6, 16)\n      },\n      {\n        id: \"top-hits\",\n        name: \"Top Hits\",\n        description: \"Most popular songs right now\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n        songs: allSongs.slice(16, 23)\n      }\n    ];\n\n    for (const playlistData of defaultPlaylists) {\n      const existing = await this.getPlaylist(playlistData.id);\n      if (!existing) {\n        // Create playlist\n        await db.insert(playlists).values({\n          id: playlistData.id,\n          name: playlistData.name,\n          description: playlistData.description,\n          imageUrl: playlistData.imageUrl,\n          isPublic: true,\n          songCount: playlistData.songs.length,\n          createdBy: \"demo-user-123\",\n        });\n\n        // Add songs to playlist\n        for (let i = 0; i < playlistData.songs.length; i++) {\n          await db.insert(playlistSongs).values({\n            id: randomUUID(),\n            playlistId: playlistData.id,\n            songId: playlistData.songs[i].id,\n            position: i + 1,\n          });\n        }\n      }\n    }\n  }\n\n  async deletePlaylist(playlistId: string): Promise<void> {\n    // Delete playlist songs first\n    await db.delete(playlistSongs).where(eq(playlistSongs.playlistId, playlistId));\n    \n    // Delete playlist\n    await db.delete(playlists).where(eq(playlists.id, playlistId));\n  }\n\n  async updatePlaylist(playlistId: string, updates: { name?: string; imageUrl?: string; description?: string }): Promise<Playlist | undefined> {\n    const [updatedPlaylist] = await db\n      .update(playlists)\n      .set(updates)\n      .where(eq(playlists.id, playlistId))\n      .returning();\n    return updatedPlaylist || undefined;\n  }\n\n  // Sync playlist song counts with actual song count in database\n  async syncPlaylistSongCounts(): Promise<void> {\n    const allPlaylists = await this.getPlaylists();\n    \n    for (const playlist of allPlaylists) {\n      // Count actual songs in playlist\n      const actualSongCount = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(playlistSongs)\n        .where(eq(playlistSongs.playlistId, playlist.id));\n      \n      const actualCount = actualSongCount[0]?.count || 0;\n      \n      // Update if different\n      if (playlist.songCount !== actualCount) {\n        await db\n          .update(playlists)\n          .set({ songCount: actualCount })\n          .where(eq(playlists.id, playlist.id));\n      }\n    }\n  }\n\n  // Remove empty playlists\n  async removeEmptyPlaylists(): Promise<void> {\n    const allPlaylists = await this.getPlaylists();\n    const defaultPlaylistIds = ['discover-weekly', 'daily-mix-1', 'chill-ambient', 'electronic-energy', 'purple-vibes', 'top-hits'];\n    \n    for (const playlist of allPlaylists) {\n      // Only remove empty playlists that are NOT default playlists, NOT daily-mix playlists,\n      // and NOT user-created playlists (those with UUID format)\n      const isDefaultPlaylist = defaultPlaylistIds.includes(playlist.id);\n      const isDailyMix = playlist.id.startsWith('daily-mix');\n      const isUserCreated = playlist.id.includes('-'); // UUIDs contain dashes\n      \n      if (playlist.songCount === 0 && !isDefaultPlaylist && !isDailyMix && !isUserCreated) {\n        // Check if playlist is referenced in library_playlists before deleting\n        const [libraryRef] = await db\n          .select()\n          .from(libraryPlaylists)\n          .where(eq(libraryPlaylists.playlistId, playlist.id))\n          .limit(1);\n          \n        // Only delete if not referenced in library\n        if (!libraryRef) {\n          await this.deletePlaylist(playlist.id);\n        }\n      }\n    }\n  }\n\n  // Liked Playlists\n  async getLikedPlaylists(userId: string): Promise<PlaylistWithDetails[]> {\n    const likedPlaylistsData = await db\n      .select({\n        playlist: playlists,\n      })\n      .from(likedPlaylists)\n      .innerJoin(playlists, eq(likedPlaylists.playlistId, playlists.id))\n      .where(eq(likedPlaylists.userId, userId));\n\n    const result: PlaylistWithDetails[] = [];\n    for (const item of likedPlaylistsData) {\n      const playlistWithSongs = await this.getPlaylistWithSongs(item.playlist.id);\n      if (playlistWithSongs) {\n        result.push(playlistWithSongs);\n      }\n    }\n    return result;\n  }\n\n  async likePlaylist(playlistId: string, userId: string): Promise<void> {\n    await db.insert(likedPlaylists).values({\n      id: randomUUID(),\n      playlistId,\n      userId,\n    });\n  }\n\n  async unlikePlaylist(playlistId: string, userId: string): Promise<void> {\n    await db.delete(likedPlaylists)\n      .where(sql`${likedPlaylists.playlistId} = ${playlistId} AND ${likedPlaylists.userId} = ${userId}`);\n  }\n\n  async isPlaylistLiked(playlistId: string, userId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(likedPlaylists)\n      .where(sql`${likedPlaylists.playlistId} = ${playlistId} AND ${likedPlaylists.userId} = ${userId}`);\n    return !!result;\n  }\n\n  // Library Playlists\n  async getLibraryPlaylists(userId: string): Promise<PlaylistWithDetails[]> {\n    const libraryPlaylistsData = await db\n      .select({\n        playlist: playlists,\n      })\n      .from(libraryPlaylists)\n      .innerJoin(playlists, eq(libraryPlaylists.playlistId, playlists.id))\n      .where(eq(libraryPlaylists.userId, userId));\n\n    const result: PlaylistWithDetails[] = [];\n    for (const item of libraryPlaylistsData) {\n      const playlistWithSongs = await this.getPlaylistWithSongs(item.playlist.id);\n      if (playlistWithSongs) {\n        result.push(playlistWithSongs);\n      }\n    }\n    return result;\n  }\n\n  async addPlaylistToLibrary(playlistId: string, userId: string): Promise<void> {\n    await db.insert(libraryPlaylists).values({\n      id: randomUUID(),\n      playlistId,\n      userId,\n    });\n  }\n\n  async removePlaylistFromLibrary(playlistId: string, userId: string): Promise<void> {\n    await db.delete(libraryPlaylists)\n      .where(sql`${libraryPlaylists.playlistId} = ${playlistId} AND ${libraryPlaylists.userId} = ${userId}`);\n  }\n\n  async isPlaylistInLibrary(playlistId: string, userId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(libraryPlaylists)\n      .where(sql`${libraryPlaylists.playlistId} = ${playlistId} AND ${libraryPlaylists.userId} = ${userId}`);\n    return !!result;\n  }\n\n  // Admin Functions\n  async getAllProfiles(): Promise<Profile[]> {\n    return await db.select().from(profiles).orderBy(desc(profiles.createdAt));\n  }\n\n  async upsertUser(user: { id: string; username: string; isPremium?: boolean }): Promise<Profile> {\n    const [existingProfile] = await db.select().from(profiles).where(eq(profiles.userId, user.id));\n    \n    if (existingProfile) {\n      // Update existing profile\n      const [updatedProfile] = await db\n        .update(profiles)\n        .set({\n          name: user.username,\n          updatedAt: new Date()\n        })\n        .where(eq(profiles.userId, user.id))\n        .returning();\n      return updatedProfile;\n    } else {\n      // Create new profile\n      const [newProfile] = await db\n        .insert(profiles)\n        .values({\n          userId: user.id,  // Set userId for Pi Network authentication\n          name: user.username,\n          nickname: user.username\n        })\n        .returning();\n      \n      // Also create membership\n      await this.createMembership({\n        id: randomUUID(),\n        userId: user.id,\n        isPremium: user.isPremium || false,\n        subscriptionType: 'free',\n        piPaymentId: null\n      });\n      \n      return newProfile;\n    }\n  }\n\n  async getAllMemberships(): Promise<Membership[]> {\n    return await db.select().from(memberships).orderBy(desc(memberships.updatedAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":28610},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Premium memberships - simplified for Pi Browser auto-profiles\nexport const memberships = pgTable(\"memberships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  isPremium: boolean(\"is_premium\").default(false),\n  expiresAt: timestamp(\"expires_at\"),\n  paymentId: text(\"payment_id\"),\n  txid: text(\"txid\"),\n  piWalletId: text(\"pi_wallet_id\"), // Track which Pi wallet made the payment\n  amount: text(\"amount\").default(\"3.14\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pi Network payments\nexport const piPayments = pgTable(\"pi_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  paymentId: text(\"payment_id\").notNull().unique(),\n  userId: text(\"user_id\").notNull(),\n  amount: text(\"amount\").notNull(),\n  status: text(\"status\").notNull().default(\"created\"), // created, approved, completed, cancelled, failed\n  txid: text(\"txid\"),\n  metadata: text(\"metadata\"), // JSON string\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const artists = pgTable(\"artists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  imageUrl: text(\"image_url\"),\n  bio: text(\"bio\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const albums = pgTable(\"albums\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  artistId: varchar(\"artist_id\").references(() => artists.id).notNull(),\n  imageUrl: text(\"image_url\"),\n  releaseDate: timestamp(\"release_date\"),\n  genre: text(\"genre\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const songs = pgTable(\"songs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  artistId: varchar(\"artist_id\").references(() => artists.id).notNull(),\n  albumId: varchar(\"album_id\").references(() => albums.id),\n  duration: integer(\"duration\").notNull(), // in seconds\n  audioUrl: text(\"audio_url\"),\n  imageUrl: text(\"image_url\"),\n  genre: text(\"genre\"),\n  trackNumber: integer(\"track_number\"),\n  playCount: integer(\"play_count\").default(0),\n  lastPlayed: timestamp(\"last_played\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const playlists = pgTable(\"playlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  isPublic: boolean(\"is_public\").default(true),\n  songCount: integer(\"song_count\").default(0),\n  createdBy: text(\"created_by\").notNull().default(\"demo-user-123\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const playlistSongs = pgTable(\"playlist_songs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playlistId: varchar(\"playlist_id\").references(() => playlists.id).notNull(),\n  songId: varchar(\"song_id\").references(() => songs.id).notNull(),\n  position: integer(\"position\").notNull(),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n});\n\nexport const likedSongs = pgTable(\"liked_songs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  songId: varchar(\"song_id\").references(() => songs.id).notNull(),\n  likedAt: timestamp(\"liked_at\").defaultNow(),\n});\n\nexport const likedPlaylists = pgTable(\"liked_playlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playlistId: varchar(\"playlist_id\").references(() => playlists.id).notNull(),\n  userId: text(\"user_id\").notNull().default(\"demo-user-123\"),\n  likedAt: timestamp(\"liked_at\").defaultNow(),\n});\n\nexport const libraryPlaylists = pgTable(\"library_playlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playlistId: varchar(\"playlist_id\").references(() => playlists.id).notNull(),\n  userId: text(\"user_id\").notNull().default(\"demo-user-123\"),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  nickname: text(\"nickname\"),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n\n// Insert schemas\nexport const insertArtistSchema = createInsertSchema(artists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAlbumSchema = createInsertSchema(albums).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSongSchema = createInsertSchema(songs).omit({\n  id: true,\n  createdAt: true,\n  playCount: true,\n});\n\nexport const insertPlaylistSchema = createInsertSchema(playlists).omit({\n  id: true,\n  createdAt: true,\n  songCount: true,\n});\n\nexport const insertPlaylistSongSchema = createInsertSchema(playlistSongs).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertLikedSongSchema = createInsertSchema(likedSongs).omit({\n  id: true,\n  likedAt: true,\n});\n\nexport const insertLikedPlaylistSchema = createInsertSchema(likedPlaylists).omit({\n  id: true,\n  likedAt: true,\n});\n\nexport const insertLibraryPlaylistSchema = createInsertSchema(libraryPlaylists).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMembershipSchema = createInsertSchema(memberships).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPiPaymentSchema = createInsertSchema(piPayments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n\n// Types\nexport type Artist = typeof artists.$inferSelect;\nexport type Album = typeof albums.$inferSelect;\nexport type Song = typeof songs.$inferSelect;\nexport type Playlist = typeof playlists.$inferSelect;\nexport type PlaylistSong = typeof playlistSongs.$inferSelect;\nexport type LikedSong = typeof likedSongs.$inferSelect;\nexport type LikedPlaylist = typeof likedPlaylists.$inferSelect;\nexport type LibraryPlaylist = typeof libraryPlaylists.$inferSelect;\nexport type Profile = typeof profiles.$inferSelect;\n\nexport type InsertArtist = z.infer<typeof insertArtistSchema>;\nexport type InsertAlbum = z.infer<typeof insertAlbumSchema>;\nexport type InsertSong = z.infer<typeof insertSongSchema>;\nexport type InsertPlaylist = z.infer<typeof insertPlaylistSchema>;\nexport type InsertPlaylistSong = z.infer<typeof insertPlaylistSongSchema>;\nexport type InsertLikedSong = z.infer<typeof insertLikedSongSchema>;\nexport type InsertLikedPlaylist = z.infer<typeof insertLikedPlaylistSchema>;\nexport type InsertLibraryPlaylist = z.infer<typeof insertLibraryPlaylistSchema>;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\n\nexport type Membership = typeof memberships.$inferSelect;\nexport type PiPayment = typeof piPayments.$inferSelect;\nexport type InsertMembership = z.infer<typeof insertMembershipSchema>;\nexport type InsertPiPayment = z.infer<typeof insertPiPaymentSchema>;\n\n// Extended types for API responses\nexport type SongWithDetails = Song & {\n  artist: Artist;\n  album?: Album;\n  isLiked?: boolean;\n};\n\nexport type AlbumWithDetails = Album & {\n  artist: Artist;\n  songs?: Song[];\n};\n\nexport type PlaylistWithDetails = Playlist & {\n  songs?: SongWithDetails[];\n};\n\n// Ambient Music Generation\nexport const ambientMusicSettings = pgTable(\"ambient_music_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playlistId: varchar(\"playlist_id\").notNull().references(() => playlists.id),\n  theme: varchar(\"theme\").notNull(), // cosmic, nature, urban, chill, energy\n  mood: varchar(\"mood\").notNull(), // peaceful, energetic, mysterious, melancholic\n  tempo: integer(\"tempo\").default(60), // BPM for ambient generation\n  intensity: integer(\"intensity\").default(5), // 1-10 scale\n  enabled: boolean(\"enabled\").default(true),\n  lastGenerated: timestamp(\"last_generated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAmbientMusicSettingSchema = createInsertSchema(ambientMusicSettings).omit({\n  id: true,\n  createdAt: true,\n  lastGenerated: true,\n});\n\nexport type AmbientMusicSetting = typeof ambientMusicSettings.$inferSelect;\nexport type InsertAmbientMusicSetting = z.infer<typeof insertAmbientMusicSettingSchema>;\n\nexport type PlaylistWithAmbient = PlaylistWithDetails & {\n  ambientSetting?: AmbientMusicSetting;\n};\n","size_bytes":8718},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport { MusicPlayerProvider } from \"@/contexts/music-player-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Search from \"@/pages/search\";\nimport Library from \"@/pages/library\";\nimport Premium from \"@/pages/premium\";\nimport PlaylistPage from \"@/pages/playlist\";\nimport ProfilePage from \"@/pages/profile\";\nimport EditProfilePage from \"@/pages/edit-profile\";\nimport Landing from \"@/pages/landing\";\nimport LikedSongs from \"@/pages/liked-songs\";\nimport Category from \"@/pages/category\";\nimport AdminPage from \"@/pages/admin\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport NowPlayingBar from \"@/components/music/now-playing-bar\";\n\nfunction Router() {\n  return (\n    <div className=\"max-w-md mx-auto bg-background min-h-screen relative pb-40\">\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/library\" component={Library} />\n        <Route path=\"/liked-songs\" component={LikedSongs} />\n        <Route path=\"/premium\" component={Premium} />\n        <Route path=\"/playlist/:id\" component={PlaylistPage} />\n        <Route path=\"/category/:genre\" component={Category} />\n        <Route path=\"/profile\" component={ProfilePage} />\n        <Route path=\"/edit-profile\" component={EditProfilePage} />\n        <Route path=\"/admin\" component={AdminPage} />\n        <Route path=\"/landing\" component={Landing} />\n        <Route component={NotFound} />\n      </Switch>\n      \n      <NowPlayingBar />\n      <BottomNavigation />\n      \n      {/* Legal Notice - higher up from bottom */}\n      <div className=\"absolute bottom-16 left-0 right-0 px-4 py-2 text-center\">\n        <p className=\"text-xs text-muted-foreground\">\n          <a href=\"/legal\" className=\"text-primary hover:underline\">Legal Notice</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <MusicPlayerProvider>\n            <Toaster />\n            <Router />\n          </MusicPlayerProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2541},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(43, 96%, 56%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(43, 96%, 56%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(43, 96%, 56%);\n  --primary: hsl(261, 83%, 58%);\n  --primary-foreground: hsl(43, 96%, 56%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(43, 96%, 56%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(240, 10%, 4%);\n  --destructive: hsl(356, 90%, 54%);\n  --destructive-foreground: hsl(43, 96%, 56%);\n  --border: hsl(240, 6%, 20%);\n  --input: hsl(240, 6%, 20%);\n  --ring: hsl(261, 83%, 58%);\n  --chart-1: hsl(261, 83%, 58%);\n  --chart-2: hsl(43, 96%, 56%);\n  --chart-3: hsl(159, 100%, 36%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(240, 10%, 8%);\n  --sidebar-foreground: hsl(43, 96%, 56%);\n  --sidebar-primary: hsl(261, 83%, 58%);\n  --sidebar-primary-foreground: hsl(43, 96%, 56%);\n  --sidebar-accent: hsl(240, 4%, 16%);\n  --sidebar-accent-foreground: hsl(261, 83%, 58%);\n  --sidebar-border: hsl(240, 6%, 20%);\n  --sidebar-ring: hsl(261, 83%, 58%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00), 0px 1px 2px -1px hsl(261, 83%, 58%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00), 0px 1px 2px -1px hsl(261, 83%, 58%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00), 0px 2px 4px -1px hsl(261, 83%, 58%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00), 0px 4px 6px -1px hsl(261, 83%, 58%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00), 0px 8px 10px -1px hsl(261, 83%, 58%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(261, 83%, 58%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(43, 96%, 56%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(43, 96%, 56%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(43, 96%, 56%);\n  --primary: hsl(261, 83%, 58%);\n  --primary-foreground: hsl(43, 96%, 56%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(43, 96%, 56%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(240, 10%, 4%);\n  --destructive: hsl(356, 90%, 54%);\n  --destructive-foreground: hsl(43, 96%, 56%);\n  --border: hsl(240, 6%, 20%);\n  --input: hsl(240, 6%, 20%);\n  --ring: hsl(261, 83%, 58%);\n  --sidebar: hsl(240, 10%, 8%);\n  --sidebar-foreground: hsl(43, 96%, 56%);\n  --sidebar-primary: hsl(261, 83%, 58%);\n  --sidebar-primary-foreground: hsl(43, 96%, 56%);\n  --sidebar-accent: hsl(240, 4%, 16%);\n  --sidebar-accent-foreground: hsl(261, 83%, 58%);\n  --sidebar-border: hsl(240, 6%, 20%);\n  --sidebar-ring: hsl(261, 83%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    overflow-x: hidden;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    backdrop-filter: blur(20px);\n    background: rgba(139, 92, 246, 0.1);\n  }\n  \n  .music-gradient {\n    background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);\n  }\n  \n  .album-glow {\n    box-shadow: 0 0 40px rgba(139, 92, 246, 0.3);\n  }\n  \n  .safe-area-bottom {\n    padding-bottom: max(env(safe-area-inset-bottom, 0px), 8px);\n  }\n  \n  .equalizer-bar {\n    width: 3px;\n    background: var(--accent);\n    margin: 0 1px;\n    animation: equalizer 1.5s ease-in-out infinite;\n  }\n  \n  .equalizer-bar:nth-child(2) { \n    animation-delay: 0.1s; \n  }\n  \n  .equalizer-bar:nth-child(3) { \n    animation-delay: 0.2s; \n  }\n  \n  .equalizer-bar:nth-child(4) { \n    animation-delay: 0.3s; \n  }\n  \n  @keyframes equalizer {\n    0%, 100% { height: 8px; }\n    50% { height: 20px; }\n  }\n  \n  .scroll-hide::-webkit-scrollbar {\n    display: none;\n  }\n  \n  .scroll-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n\n  .animate-spin-slow {\n    animation: spin 8s linear infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s infinite;\n  }\n\n  .animate-bounce-subtle {\n    animation: bounce 2s infinite;\n  }\n}\n","size_bytes":4591},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/music-player-context.tsx":{"content":"import { createContext, useContext, useState, ReactNode, useRef, useEffect, useCallback } from \"react\";\nimport { type SongWithDetails } from \"@shared/schema\";\n\ninterface MusicPlayerState {\n  currentSong: SongWithDetails | null;\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  volume: number;\n  isMuted: boolean;\n  queue: SongWithDetails[];\n  currentIndex: number;\n  isPlaylist: boolean; // Track if we're playing from a playlist\n  allSongs: SongWithDetails[]; // Store all available songs for random selection\n}\n\ninterface MusicPlayerContextType {\n  state: MusicPlayerState;\n  playSong: (song: SongWithDetails, queue?: SongWithDetails[]) => void;\n  pauseSong: () => void;\n  resumeSong: () => void;\n  nextSong: () => void;\n  previousSong: () => void;\n  setVolume: (volume: number) => void;\n  toggleMute: () => void;\n  setCurrentTime: (time: number) => void;\n  addToQueue: (song: SongWithDetails) => void;\n  removeFromQueue: (index: number) => void;\n  setAllSongs: (songs: SongWithDetails[]) => void; // Add method to set all songs for random selection\n  closePlayer: () => void; // Add method to close the player\n}\n\nconst MusicPlayerContext = createContext<MusicPlayerContextType | undefined>(undefined);\n\nexport function MusicPlayerProvider({ children }: { children: ReactNode }) {\n  const [state, setState] = useState<MusicPlayerState>({\n    currentSong: null,\n    isPlaying: false,\n    currentTime: 0,\n    duration: 0,\n    volume: 80,\n    isMuted: false,\n    queue: [],\n    currentIndex: 0,\n    isPlaylist: false,\n    allSongs: [],\n  });\n\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  // Initialize audio element\n  useEffect(() => {\n    audioRef.current = new Audio();\n    audioRef.current.volume = state.volume / 100;\n    \n    const audio = audioRef.current;\n    \n    // Audio event listeners\n    audio.addEventListener('loadeddata', () => {\n      setState(prev => ({ ...prev, duration: audio.duration }));\n    });\n    \n    audio.addEventListener('timeupdate', () => {\n      setState(prev => ({ ...prev, currentTime: audio.currentTime }));\n    });\n    \n    audio.addEventListener('ended', () => {\n      // Auto play next song\n      nextSong();\n    });\n    \n    audio.addEventListener('error', (e) => {\n      console.error('Audio error:', e);\n      console.error('Audio error type:', e.type);\n      console.error('Audio src:', audio.src);\n      console.error('Audio readyState:', audio.readyState);\n      console.error('Audio networkState:', audio.networkState);\n      \n      // Don't stop playback if it's just a mute/unlock context error\n      if (audio.src.includes('data:audio/wav;base64')) {\n        console.log('Ignoring error from audio context unlock attempt');\n        return;\n      }\n      \n      // Stop playback instead of auto-skipping - let user decide what to do\n      console.log('Audio failed to load - stopping playback');\n      setState(prev => ({ ...prev, isPlaying: false }));\n    });\n    \n    return () => {\n      audio.pause();\n      audio.src = '';\n    };\n  }, []);\n\n  // Update audio when song changes\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    \n    if (state.currentSong && state.currentSong.audioUrl) {\n      console.log('🎵 Setting audio src to:', state.currentSong.audioUrl, 'for song:', state.currentSong.title);\n      audio.src = state.currentSong.audioUrl;\n      audio.load();\n    } else {\n      // Clear audio src when no song is set to prevent playing page URL\n      audio.src = '';\n      audio.pause();\n      if (state.currentSong) {\n        console.warn('⚠️ No audioUrl found for current song:', state.currentSong.title);\n      }\n    }\n  }, [state.currentSong?.audioUrl]);\n\n  // Update audio play/pause state\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    \n    if (state.isPlaying && state.currentSong && state.currentSong.audioUrl) {\n      console.log('Attempting to play:', state.currentSong.title, 'from URL:', state.currentSong.audioUrl);\n      \n      // Only try to play if we have a valid audio source\n      if (audio.src && audio.src !== '' && !audio.src.includes(window.location.href)) {\n        if (audio.paused) {\n          audio.play().then(() => {\n            console.log('Audio playing successfully');\n          }).catch(e => {\n            console.error('Failed to play audio:', e);\n            console.error('Audio error details:', e.name, e.message);\n            \n            // Show user-friendly message\n            if (e.name === 'NotAllowedError') {\n              console.warn('Audio blocked by browser - user interaction required');\n              // Keep the isPlaying state true so user can try clicking again\n            } else {\n              setState(prev => ({ ...prev, isPlaying: false }));\n            }\n          });\n        }\n      } else {\n        console.warn('Cannot play - invalid audio source:', audio.src);\n        setState(prev => ({ ...prev, isPlaying: false }));\n      }\n    } else {\n      audio.pause();\n    }\n  }, [state.isPlaying, state.currentSong]);\n\n  // Update volume\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (audio) {\n      // Set volume normally\n      audio.volume = state.volume / 100;\n      // Set muted state\n      audio.muted = state.isMuted;\n    }\n  }, [state.volume, state.isMuted]);\n\n\n  const playSong = async (song: SongWithDetails, queue: SongWithDetails[] = []) => {\n    console.log('🎵 playSong called with:', song.title, 'audioUrl:', song.audioUrl);\n    const newQueue = queue.length > 0 ? queue : [song];\n    const index = newQueue.findIndex(s => s.id === song.id);\n    const isFromPlaylist = queue.length > 1; // If queue has multiple songs, it's from a playlist\n    \n    setState(prev => ({\n      ...prev,\n      currentSong: song,\n      isPlaying: true,\n      queue: newQueue,\n      currentIndex: index >= 0 ? index : 0,\n      currentTime: 0,\n      duration: song.duration,\n      isPlaylist: isFromPlaylist,\n    }));\n  };\n\n  const pauseSong = () => {\n    setState(prev => ({ ...prev, isPlaying: false }));\n  };\n\n  const resumeSong = () => {\n    setState(prev => ({ ...prev, isPlaying: true }));\n  };\n\n  const nextSong = async () => {\n    setState(prev => {\n      // Always try to go to next song in current queue first\n      const nextIndex = prev.currentIndex + 1;\n      if (nextIndex < prev.queue.length) {\n        const nextSong = prev.queue[nextIndex];\n        return {\n          ...prev,\n          currentSong: nextSong,\n          currentIndex: nextIndex,\n          currentTime: 0,\n          duration: nextSong.duration,\n          isPlaying: true,\n        };\n      }\n      \n      // If no more songs in queue, play random song (prefer working ones)\n      if (prev.allSongs.length > 0) {\n        // Filter out current song and prefer songs with working audio URLs\n        const availableSongs = prev.allSongs.filter(s => {\n          if (s.id === prev.currentSong?.id) return false;\n          // Prefer songs with local CC music or any http URLs\n          return s.audioUrl?.includes('/attached_assets/cc_music/') || s.audioUrl?.includes('http');\n        });\n        \n        if (availableSongs.length > 0) {\n          const randomIndex = Math.floor(Math.random() * availableSongs.length);\n          const randomSong = availableSongs[randomIndex];\n          \n          // Add to queue and update index\n          const newQueue = [...prev.queue, randomSong];\n          return {\n            ...prev,\n            currentSong: randomSong,\n            queue: newQueue,\n            currentIndex: newQueue.length - 1,\n            currentTime: 0,\n            duration: randomSong.duration,\n            isPlaying: true,\n            isPlaylist: false,\n          };\n        }\n      }\n      \n      return prev;\n    });\n  };\n\n  const previousSong = () => {\n    setState(prev => {\n      const prevIndex = prev.currentIndex - 1;\n      if (prevIndex >= 0 && prev.queue[prevIndex]) {\n        const prevSong = prev.queue[prevIndex];\n        return {\n          ...prev,\n          currentSong: prevSong,\n          currentIndex: prevIndex,\n          currentTime: 0,\n          duration: prevSong.duration,\n          isPlaying: true,\n        };\n      }\n      return prev;\n    });\n  };\n\n  const setVolume = (volume: number) => {\n    setState(prev => ({ ...prev, volume }));\n  };\n\n  const toggleMute = useCallback(() => {\n    const audio = audioRef.current;\n    if (!audio) {\n      return;\n    }\n    \n    // Prevent double clicks\n    if (audio.dataset.mutingInProgress === 'true') {\n      return;\n    }\n    \n    audio.dataset.mutingInProgress = 'true';\n    \n    setState(prev => {\n      const newMutedState = !prev.isMuted;\n      \n      // Set audio.muted immediately\n      audio.muted = newMutedState;\n      \n      // Clear the flag after a short delay\n      setTimeout(() => {\n        audio.dataset.mutingInProgress = 'false';\n      }, 100);\n      \n      return { ...prev, isMuted: newMutedState };\n    });\n  }, []);\n\n  const setCurrentTime = (currentTime: number) => {\n    setState(prev => ({ ...prev, currentTime }));\n    const audio = audioRef.current;\n    if (audio) {\n      audio.currentTime = currentTime;\n    }\n  };\n\n  const addToQueue = (song: SongWithDetails) => {\n    setState(prev => ({\n      ...prev,\n      queue: [...prev.queue, song],\n    }));\n  };\n\n  const removeFromQueue = (index: number) => {\n    setState(prev => {\n      const newQueue = prev.queue.filter((_, i) => i !== index);\n      let newCurrentIndex = prev.currentIndex;\n      \n      if (index < prev.currentIndex) {\n        newCurrentIndex = prev.currentIndex - 1;\n      } else if (index === prev.currentIndex) {\n        // If we're removing the current song, play the next one\n        if (newQueue.length > 0) {\n          const nextIndex = Math.min(newCurrentIndex, newQueue.length - 1);\n          const nextSong = newQueue[nextIndex];\n          return {\n            ...prev,\n            queue: newQueue,\n            currentSong: nextSong,\n            currentIndex: nextIndex,\n            currentTime: 0,\n            duration: nextSong.duration,\n          };\n        } else {\n          return {\n            ...prev,\n            queue: newQueue,\n            currentSong: null,\n            currentIndex: 0,\n            isPlaying: false,\n          };\n        }\n      }\n      \n      return {\n        ...prev,\n        queue: newQueue,\n        currentIndex: newCurrentIndex,\n      };\n    });\n  };\n\n  const setAllSongs = useCallback((songs: SongWithDetails[]) => {\n    setState(prev => ({\n      ...prev,\n      allSongs: songs,\n    }));\n  }, []);\n\n  const closePlayer = useCallback(() => {\n    // Stop audio and reset player state\n    const audio = audioRef.current;\n    if (audio) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n    \n    setState({\n      currentSong: null,\n      isPlaying: false,\n      currentTime: 0,\n      duration: 0,\n      volume: 80,\n      isMuted: false,\n      queue: [],\n      currentIndex: 0,\n      isPlaylist: false,\n      allSongs: [],\n    });\n  }, []);\n\n  const value: MusicPlayerContextType = {\n    state,\n    playSong,\n    pauseSong,\n    resumeSong,\n    nextSong,\n    previousSong,\n    setVolume,\n    toggleMute,\n    setCurrentTime,\n    addToQueue,\n    removeFromQueue,\n    setAllSongs,\n    closePlayer,\n  };\n\n  return (\n    <MusicPlayerContext.Provider value={value}>\n      {children}\n    </MusicPlayerContext.Provider>\n  );\n}\n\nexport function useMusicPlayer() {\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error(\"useMusicPlayer must be used within a MusicPlayerProvider\");\n  }\n  return context;\n}\n","size_bytes":11583},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-music-player.tsx":{"content":"import { useMusicPlayer } from \"@/contexts/music-player-context\";\n\nexport { useMusicPlayer };\n","size_bytes":94},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getCurrentUserId } from \"./authUtils\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const userId = getCurrentUserId();\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (userId) {\n    headers['x-user-id'] = userId;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    // Handle query parameters if present\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object') {\n      const params = new URLSearchParams(queryKey[1] as Record<string, string>);\n      url += `?${params.toString()}`;\n    } else if (queryKey.length > 1) {\n      // For simple paths like [\"/api/songs\", \"123\"] or [\"/api/profile\", userId]\n      url = queryKey.join(\"/\");\n    }\n    \n    const userId = getCurrentUserId();\n    const headers: Record<string, string> = {};\n    \n    if (userId) {\n      headers['x-user-id'] = userId;\n    }\n\n    const res = await fetch(url, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2144},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Heart, Play, User } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport TrackItem from \"@/components/music/track-item\";\nimport AlbumCard from \"@/components/music/album-card\";\nimport PlaylistItem from \"@/components/music/playlist-item\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { type SongWithDetails, type Playlist } from \"@shared/schema\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Recent Song Card komponenta sa play funkcionalošću\nfunction RecentSongCard({ song }: { song: SongWithDetails }) {\n  const { playSong } = useMusicPlayer();\n  \n  const handlePlaySong = () => {\n    playSong(song);\n  };\n\n  return (\n    <div \n      className=\"flex-shrink-0 cursor-pointer group relative\"\n      onClick={handlePlaySong}\n    >\n      <div className=\"relative\">\n        <img \n          src={song.imageUrl || song.album?.imageUrl || ''} \n          alt={`${song.title} Album`}\n          className=\"w-32 h-32 rounded-lg object-cover album-glow\" \n          data-testid={`img-recent-song-${song.id}`}\n        />\n        <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center\">\n          <Play className=\"h-8 w-8 text-white\" fill=\"white\" />\n        </div>\n      </div>\n      <p className=\"text-sm font-medium mt-2 w-32 truncate\" data-testid={`text-recent-title-${song.id}`}>\n        {song.title}\n      </p>\n      <p className=\"text-xs text-muted-foreground truncate\" data-testid={`text-recent-artist-${song.id}`}>\n        {song.artist.name}\n      </p>\n    </div>\n  );\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { setAllSongs, playSong } = useMusicPlayer();\n  const { user } = useAuth();\n  const userId = user?.uid;\n  \n  const { data: recentSongs, isLoading: recentLoading } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/songs/recently-played\"],\n  });\n\n  const { data: trendingSongs, isLoading: trendingLoading } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/songs/trending\"],\n  });\n\n  // Load all songs for random selection\n  const { data: allSongs } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/songs\"],\n  });\n\n  const { data: playlists, isLoading: playlistsLoading } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists\"],\n  });\n\n  // Set all songs in music player context when data loads\n  useEffect(() => {\n    if (allSongs && allSongs.length > 0) {\n      setAllSongs(allSongs);\n    }\n  }, [allSongs, setAllSongs]);\n\n  const handlePlaylistClick = (playlistId: string) => {\n    setLocation(`/playlist/${playlistId}`);\n  };\n\n  const handlePlaylistPlay = async (playlistId: string) => {\n    // Get playlist with songs and start playing first song\n    console.log('Starting playlist playback for:', playlistId);\n    try {\n      const response = await fetch(`/api/playlists/${playlistId}`);\n      if (response.ok) {\n        const playlist = await response.json();\n        console.log('Playlist loaded:', playlist.name, 'Songs:', playlist.songs?.length || 0);\n        if (playlist.songs && playlist.songs.length > 0) {\n          console.log('Setting songs and starting playback of:', playlist.songs[0].title);\n          setAllSongs(playlist.songs);\n          // Start playing first song from playlist\n          playSong(playlist.songs[0], playlist.songs);\n        } else {\n          console.log('No songs found in playlist');\n        }\n      } else {\n        console.error('Failed to fetch playlist:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching playlist for playback:', error);\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    // Navigate to search page with query\n    setLocation(`/search?q=${encodeURIComponent(query)}`);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header onSearch={handleSearch} />\n      \n      <main className=\"px-4 pb-44\">\n        \n\n        {/* Recently Played Section */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Recently Played</h2>\n          </div>\n          \n          <div className=\"flex space-x-4 overflow-x-auto scroll-hide pb-2\">\n            {recentLoading ? (\n              Array.from({ length: 8 }).map((_, i) => (\n                <div key={i} className=\"flex-shrink-0\">\n                  <Skeleton className=\"w-32 h-32 rounded-lg\" />\n                  <Skeleton className=\"h-4 w-24 mt-2\" />\n                  <Skeleton className=\"h-3 w-20 mt-1\" />\n                </div>\n              ))\n            ) : (\n              recentSongs?.slice(0, 8).map((song) => (\n                <RecentSongCard key={song.id} song={song} />\n              ))\n            )}\n          </div>\n        </section>\n\n        {/* Made For You */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Made For You</h2>\n          \n          <div className=\"space-y-3\">\n            {playlistsLoading ? (\n              Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-4 w-32 mb-1\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                </div>\n              ))\n            ) : (\n              playlists?.map((playlist) => (\n                <PlaylistItem\n                  key={playlist.id}\n                  playlist={playlist}\n                  onClick={() => handlePlaylistClick(playlist.id)}\n                  onPlay={() => handlePlaylistPlay(playlist.id)}\n                />\n              ))\n            )}\n          </div>\n        </section>\n\n        {/* Trending Now */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Trending Now</h2>\n          \n          <div className=\"space-y-3\">\n            {trendingLoading ? (\n              Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-4 w-32 mb-1\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <Skeleton className=\"h-8 w-8 rounded\" />\n                </div>\n              ))\n            ) : (\n              trendingSongs?.slice(0, 4).map((song) => (\n                <TrackItem\n                  key={song.id}\n                  song={song}\n                />\n              ))\n            )}\n          </div>\n        </section>\n\n        {/* New Releases */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">New Releases</h2>\n          \n          <div className=\"space-y-3\">\n            {trendingLoading ? (\n              Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-4 w-32 mb-1\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <Skeleton className=\"h-8 w-8 rounded\" />\n                </div>\n              ))\n            ) : (\n              allSongs?.slice(0, 3).map((song: SongWithDetails) => (\n                <TrackItem\n                  key={song.id}\n                  song={song}\n                />\n              ))\n            )}\n          </div>\n        </section>\n\n        {/* Top Charts */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Top Charts</h2>\n          \n          <div className=\"space-y-3\">\n            {trendingLoading ? (\n              Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                  <div className=\"text-lg font-bold text-muted-foreground w-6\">\n                    <Skeleton className=\"h-4 w-4\" />\n                  </div>\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-4 w-32 mb-1\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <Skeleton className=\"h-8 w-8 rounded\" />\n                </div>\n              ))\n            ) : (\n              trendingSongs?.slice(0, 5).map((song: SongWithDetails, index: number) => (\n                <div key={song.id} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                  <div className=\"text-lg font-bold text-primary w-6\">\n                    {index + 1}\n                  </div>\n                  <TrackItem\n                    song={song}\n                  />\n                </div>\n              ))\n            )}\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9464},"client/src/pages/library.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport Header from \"@/components/layout/header\";\nimport PlaylistItem from \"@/components/music/playlist-item\";\nimport TrackItem from \"@/components/music/track-item\";\nimport CreatePlaylistDialog from \"@/components/playlist/create-playlist-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Heart, ChevronRight } from \"lucide-react\";\nimport { type Playlist, type PlaylistWithDetails, type SongWithDetails } from \"@shared/schema\";\n\nexport default function Library() {\n  const [, setLocation] = useLocation();\n  const { setAllSongs, playSong } = useMusicPlayer();\n  const { userId } = useAuth();\n  \n  const { data: playlists, isLoading: playlistsLoading } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists\"],\n  });\n\n  const { data: likedSongs, isLoading: likedLoading } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/liked-songs\"],\n  });\n\n  const { data: libraryPlaylists, isLoading: libraryLoading } = useQuery<PlaylistWithDetails[]>({\n    queryKey: [\"/api/library-playlists\", userId],\n    enabled: !!userId,\n  });\n\n  const handlePlaylistClick = (playlistId: string) => {\n    setLocation(`/playlist/${playlistId}`);\n  };\n\n  const handlePlaylistPlay = async (playlistId: string) => {\n    // Get playlist with songs and start playing first song\n    console.log('Starting playlist playback for:', playlistId);\n    try {\n      const response = await fetch(`/api/playlists/${playlistId}`);\n      if (response.ok) {\n        const playlist = await response.json();\n        console.log('Playlist loaded:', playlist.name, 'Songs:', playlist.songs?.length || 0);\n        if (playlist.songs && playlist.songs.length > 0) {\n          console.log('Setting songs and starting playback of:', playlist.songs[0].title);\n          setAllSongs(playlist.songs);\n          // Start playing first song from playlist\n          playSong(playlist.songs[0], playlist.songs);\n        } else {\n          console.log('No songs found in playlist');\n        }\n      } else {\n        console.error('Failed to fetch playlist:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching playlist for playback:', error);\n    }\n  };\n\n  const handleLibraryPlaylistPlay = (playlist: PlaylistWithDetails) => {\n    if (playlist.songs && playlist.songs.length > 0) {\n      setAllSongs(playlist.songs);\n      playSong(playlist.songs[0], playlist.songs);\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header showSearch={false} />\n      \n      <main className=\"px-4 pb-44\">\n        {/* Header Actions */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\">Your Library</h1>\n          <CreatePlaylistDialog />\n        </div>\n\n        {/* Recently Added */}\n        <section className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Recently Added</h2>\n          \n          {playlistsLoading ? (\n            <div className=\"space-y-2\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 p-2 rounded-lg\">\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-4 w-32 mb-1\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <Skeleton className=\"h-4 w-4\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {playlists?.map((playlist) => (\n                <PlaylistItem\n                  key={playlist.id}\n                  playlist={playlist}\n                  onClick={() => handlePlaylistClick(playlist.id)}\n                  onPlay={() => handlePlaylistPlay(playlist.id)}\n                  userId=\"demo-user-123\"\n                />\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Library Playlists */}\n        {libraryPlaylists && libraryPlaylists.length > 0 && (\n          <section className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold mb-4\" data-testid=\"text-library-playlists-title\">\n              Your Library Playlists\n            </h2>\n            <div className=\"space-y-2\">\n              {libraryPlaylists.map((playlist) => (\n                <PlaylistItem\n                  key={playlist.id}\n                  playlist={playlist}\n                  onPlay={() => handleLibraryPlaylistPlay(playlist)}\n                  onClick={() => handlePlaylistClick(playlist.id)}\n                  userId=\"demo-user-123\"\n                />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Liked Songs */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Liked Songs</h2>\n            {(likedSongs?.length || 0) > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation('/liked-songs')}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-see-all-liked\"\n              >\n                See all\n                <ChevronRight className=\"h-4 w-4 ml-1\" />\n              </Button>\n            )}\n          </div>\n          \n          {likedLoading ? (\n            <Skeleton className=\"h-16 rounded-lg bg-card\" />\n          ) : likedSongs && likedSongs.length > 0 ? (\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation('/liked-songs')}\n              className=\"w-full justify-start p-3 h-auto bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white\"\n              data-testid=\"button-liked-songs\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <Heart className=\"h-6 w-6 fill-current\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-semibold\">Liked Songs</p>\n                  <p className=\"text-sm opacity-90\">\n                    {likedSongs.length} {likedSongs.length === 1 ? 'song' : 'songs'}\n                  </p>\n                </div>\n              </div>\n              <ChevronRight className=\"h-5 w-5 ml-auto\" />\n            </Button>\n          ) : (\n            <div className=\"text-center py-8 bg-card/50 rounded-lg border border-dashed\">\n              <Heart className=\"h-8 w-8 text-muted-foreground/50 mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-no-liked-songs\">\n                No liked songs yet\n              </p>\n            </div>\n          )}\n        </section>\n\n      </main>\n    </div>\n  );\n}\n","size_bytes":7095},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/premium.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport Header from \"@/components/layout/header\";\nimport PiPayment from \"@/components/pi/pi-payment\";\nimport MembershipStatus from \"@/components/membership/membership-status\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, Music, Sparkles, Users, Zap, Shield } from \"lucide-react\";\nimport { type Membership } from \"@shared/schema\";\n\nexport default function Premium() {\n  const [showPayment, setShowPayment] = useState(false);\n  const { userId, isAuthenticated } = useAuth();\n\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: isAuthenticated,\n  });\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  const handlePaymentSuccess = () => {\n    setShowPayment(false);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header showSearch={false} />\n      \n      <main className=\"px-4 pb-44\">\n        {/* Header Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mb-4\">\n            <Crown className=\"h-10 w-10 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\">\n            <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              PurpleBeats Premium\n            </span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Unlock the ultimate music experience\n          </p>\n        </div>\n\n        {/* Current Membership Status */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Your Membership</h2>\n          {isAuthenticated && userId ? (\n            <MembershipStatus userId={userId} />\n          ) : (\n            <div className=\"p-4 bg-muted/20 rounded-lg text-center\">\n              <p className=\"text-muted-foreground\">Please log in with Pi Network to view your membership status</p>\n            </div>\n          )}\n        </div>\n\n        {/* Premium Features */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Premium Features</h2>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <Card className={`transition-colors ${isPremium ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-primary/20 rounded-lg\">\n                    <Music className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Unlimited Streaming</h3>\n                    <p className=\"text-sm text-muted-foreground\">Listen to millions of songs without limits</p>\n                  </div>\n                  {isPremium && <Badge className=\"bg-green-500\">Active</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n\n\n            <Card className={`transition-colors ${isPremium ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-primary/20 rounded-lg\">\n                    <Sparkles className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Ad-Free Experience</h3>\n                    <p className=\"text-sm text-muted-foreground\">Enjoy uninterrupted music without any ads</p>\n                  </div>\n                  {isPremium && <Badge className=\"bg-green-500\">Active</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className={`transition-colors ${isPremium ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-accent/20 rounded-lg\">\n                    <Zap className=\"h-5 w-5 text-accent\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">High Quality Audio</h3>\n                    <p className=\"text-sm text-muted-foreground\">Stream in lossless quality up to 320kbps</p>\n                  </div>\n                  {isPremium && <Badge className=\"bg-green-500\">Active</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className={`transition-colors ${isPremium ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-primary/20 rounded-lg\">\n                    <Users className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Exclusive Content</h3>\n                    <p className=\"text-sm text-muted-foreground\">Access to premium-only playlists and releases</p>\n                  </div>\n                  {isPremium && <Badge className=\"bg-green-500\">Active</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className={`transition-colors ${isPremium ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-accent/20 rounded-lg\">\n                    <Shield className=\"h-5 w-5 text-accent\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Priority Support</h3>\n                    <p className=\"text-sm text-muted-foreground\">Get faster response times for any issues</p>\n                  </div>\n                  {isPremium && <Badge className=\"bg-green-500\">Active</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Purchase Section */}\n        {!isPremium && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold mb-4\">Get Premium</h2>\n            \n            {!showPayment ? (\n              <Card className=\"bg-gradient-to-br from-primary/10 to-accent/10 border-primary/20\">\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-xl\">Ready to upgrade?</CardTitle>\n                  <CardDescription>\n                    Join thousands of music lovers enjoying premium features\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <div className=\"mb-6\">\n                    <div className=\"text-3xl font-bold text-accent mb-2\">3.14π</div>\n                    <div className=\"text-sm text-muted-foreground\">One-time payment for 1 month</div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <Button \n                      onClick={() => setShowPayment(true)}\n                      className=\"w-full music-gradient text-white font-semibold\"\n                      data-testid=\"button-upgrade-premium\"\n                    >\n                      Upgrade to Premium\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium\">Complete Your Purchase</h3>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => setShowPayment(false)}\n                    data-testid=\"button-cancel-payment\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n                {userId ? (\n                  <PiPayment \n                    userId={userId} \n                    onPaymentSuccess={handlePaymentSuccess}\n                  />\n                ) : (\n                  <div className=\"p-4 bg-muted/20 rounded-lg text-center\">\n                    <p className=\"text-muted-foreground\">Please log in with Pi Network to make payments</p>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Premium Badge */}\n        {isPremium && (\n          <div className=\"text-center\">\n            <Card className=\"bg-gradient-to-r from-primary to-accent text-white\">\n              <CardContent className=\"p-6\">\n                <Crown className=\"h-8 w-8 mx-auto mb-2\" />\n                <h3 className=\"text-xl font-bold mb-1\">You're Premium!</h3>\n                <p className=\"text-white/80\">\n                  Thank you for supporting PurpleBeats\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":9394},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport Header from \"@/components/layout/header\";\nimport TrackItem from \"@/components/music/track-item\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { type SongWithDetails, type Playlist } from \"@shared/schema\";\n\nexport default function Search() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [location, setLocation] = useLocation();\n  const [targetPlaylistId, setTargetPlaylistId] = useState<string | null>(null);\n\n  // Get query and playlist parameter from URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const queryParam = urlParams.get('q');\n    const playlistParam = urlParams.get('playlist');\n    \n    if (queryParam) {\n      setSearchQuery(queryParam);\n    }\n    if (playlistParam) {\n      setTargetPlaylistId(playlistParam);\n    }\n  }, [location]);\n\n  // Get playlist details if we're adding to a specific playlist\n  const { data: targetPlaylist } = useQuery<Playlist>({\n    queryKey: [\"/api/playlists\", targetPlaylistId],\n    enabled: !!targetPlaylistId,\n  });\n\n  const { data: searchResults, isLoading } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/songs/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0,\n  });\n\n  // Fetch available genres from the database\n  const { data: genres = [] } = useQuery<string[]>({\n    queryKey: [\"/api/songs/genres\"],\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    // Update URL with search query\n    setLocation(`/search?q=${encodeURIComponent(query)}`);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header onSearch={handleSearch} />\n      \n      <main className=\"px-4 pb-44\">\n        {/* Back Button when adding to playlist */}\n        {targetPlaylistId && targetPlaylist && (\n          <div className=\"mb-4 flex items-center justify-between\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setLocation(`/playlist/${targetPlaylistId}`)}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-to-playlist\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to {targetPlaylist.name}\n            </Button>\n            <div className=\"text-sm text-muted-foreground\">\n              Adding songs to: <span className=\"font-medium text-foreground\">{targetPlaylist.name}</span>\n            </div>\n          </div>\n        )}\n        {searchQuery ? (\n          <section>\n            <h2 className=\"text-lg font-semibold mb-4\">\n              Search results for \"{searchQuery}\"\n            </h2>\n            \n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-32 mb-1\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                    </div>\n                    <Skeleton className=\"h-8 w-8 rounded\" />\n                  </div>\n                ))}\n              </div>\n            ) : searchResults && searchResults.length > 0 ? (\n              <div className=\"space-y-3\">\n                {searchResults.map((song) => (\n                  <TrackItem\n                    key={song.id}\n                    song={song}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-results\">\n                  No results found for \"{searchQuery}\"\n                </p>\n              </div>\n            )}\n          </section>\n        ) : (\n          <section>\n            <h2 className=\"text-lg font-semibold mb-4\">Browse by Genre</h2>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {genres.map((genre) => (\n                <button\n                  key={genre}\n                  onClick={() => setLocation(`/category/${encodeURIComponent(genre)}`)}\n                  className=\"bg-card rounded-lg p-4 text-left hover:bg-secondary transition-colors\"\n                  data-testid={`button-genre-${genre.toLowerCase().replace(' ', '-')}`}\n                >\n                  <span className=\"font-medium\">{genre}</span>\n                </button>\n              ))}\n            </div>\n          </section>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":4801},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Home, Search, Library, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navItems = [\n  { path: \"/\", icon: Home, label: \"Home\" },\n  { path: \"/search\", icon: Search, label: \"Search\" },\n  { path: \"/library\", icon: Library, label: \"Library\" },\n  { path: \"/liked-songs\", icon: Heart, label: \"Liked Songs\" },\n];\n\nexport default function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card/95 backdrop-blur-lg border-t border-border safe-area-bottom z-50\">\n      <div className=\"max-w-md mx-auto flex justify-around py-2\">\n        {navItems.map(({ path, icon: Icon, label }) => (\n          <Button\n            key={path}\n            variant=\"ghost\"\n            onClick={() => setLocation(path)}\n            className={`flex flex-col items-center py-2 px-3 transition-colors ${\n              location === path \n                ? \"text-primary\" \n                : \"text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid={`nav-${label.toLowerCase()}`}\n          >\n            <Icon className=\"text-xl mb-1 h-5 w-5\" />\n            <span className=\"text-xs font-medium\">{label}</span>\n          </Button>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1337},"client/src/components/layout/header.tsx":{"content":"import { Search, Crown, User } from \"lucide-react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport ProfileDropdown from \"@/components/profile/profile-dropdown\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { type Membership, type SongWithDetails, type Playlist, type Artist } from \"@shared/schema\";\nimport logoImage from \"@/assets/logo.jpeg\";\n\ninterface HeaderProps {\n  onSearch?: (query: string) => void;\n  showSearch?: boolean;\n  userId?: string; // Add userId prop to check membership status\n}\n\nexport default function Header({ onSearch, showSearch = true }: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [, setLocation] = useLocation();\n  const searchRef = useRef<HTMLDivElement>(null);\n  const { user, isAuthenticated } = useAuth();\n  const userId = user?.uid;\n\n  // Check premium membership status\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: isAuthenticated,\n  });\n\n  // Search suggestions query\n  const { data: searchResults } = useQuery<{\n    songs: SongWithDetails[];\n    playlists: Playlist[];\n    artists: Artist[];\n  }>({\n    queryKey: [\"/api/search\", { q: searchQuery }],\n    enabled: searchQuery.length >= 2,\n  });\n\n  // Combine all suggestions\n  const suggestions = [\n    ...(searchResults?.songs || []).map(song => ({ ...song, type: 'song' as const })),\n    ...(searchResults?.playlists || []).map(playlist => ({ ...playlist, type: 'playlist' as const })),\n    ...(searchResults?.artists || []).map(artist => ({ ...artist, type: 'artist' as const }))\n  ];\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (onSearch && searchQuery.trim()) {\n      onSearch(searchQuery.trim());\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    setShowSuggestions(value.length >= 2);\n  };\n\n  const handleSuggestionClick = (suggestion: any) => {\n    const name = suggestion.type === 'song' ? suggestion.title : suggestion.name;\n    setSearchQuery(name);\n    setShowSuggestions(false);\n    if (onSearch) {\n      onSearch(name);\n    }\n    \n    // Navigate to specific page based on type\n    if (suggestion.type === 'playlist') {\n      setLocation(`/playlist/${suggestion.id}`);\n    } else if (suggestion.type === 'artist') {\n      setLocation(`/artist/${suggestion.id}`);\n    } else {\n      // For songs, just search\n      if (onSearch) {\n        onSearch(name);\n      }\n    }\n  };\n\n  // Close suggestions when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <header className=\"px-4 pt-12 pb-4 bg-background\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 rounded-full border-2 border-yellow-400 overflow-hidden p-0\">\n            <img \n              src={logoImage} \n              alt=\"PurpleBeats Logo\" \n              className=\"w-full h-full object-cover rounded-full\"\n              data-testid=\"img-logo\"\n              style={{ margin: 0, padding: 0 }}\n            />\n          </div>\n          <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            PurpleBeats\n          </h1>\n        </div>\n        <ProfileDropdown isPremium={isPremium} />\n      </div>\n      \n      {showSearch && (\n        <div ref={searchRef} className=\"relative\">\n          <form onSubmit={handleSearchSubmit} className=\"relative\">\n            <input \n              type=\"text\"\n              value={searchQuery}\n              onChange={handleInputChange}\n              onFocus={() => searchQuery.length >= 2 && setShowSuggestions(true)}\n              placeholder=\"Search songs, artists, albums...\"\n              className=\"w-full bg-card border border-border rounded-full px-4 py-3 pl-12 text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          </form>\n\n          {/* Suggestions Dropdown */}\n          {showSuggestions && suggestions.length > 0 && (\n            <div className=\"absolute top-full left-0 right-0 mt-2 bg-card border border-border rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto\">\n              {suggestions.slice(0, 8).map((suggestion) => (\n                <button\n                  key={`${suggestion.type}-${suggestion.id}`}\n                  type=\"button\"\n                  onClick={() => handleSuggestionClick(suggestion)}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 hover:bg-secondary transition-colors text-left\"\n                  data-testid={`suggestion-${suggestion.type}-${suggestion.id}`}\n                >\n                  <div className=\"w-10 h-10 rounded-lg bg-primary/20 flex items-center justify-center\">\n                    {suggestion.type === 'song' ? (\n                      <Search className=\"h-4 w-4 text-primary\" />\n                    ) : suggestion.type === 'playlist' ? (\n                      <div className=\"h-4 w-4 text-primary\">♪</div>\n                    ) : (\n                      <div className=\"h-4 w-4 text-primary\">♫</div>\n                    )}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium text-foreground truncate\">\n                      {suggestion.type === 'song' ? suggestion.title : suggestion.name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {suggestion.type === 'song' ? suggestion.artist?.name : \n                       suggestion.type === 'playlist' ? `Playlist • ${suggestion.songCount || 0} songs` :\n                       'Artist'}\n                    </p>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":6826},"client/src/components/membership/membership-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Crown, Calendar, CheckCircle } from \"lucide-react\";\nimport { type Membership } from \"@shared/schema\";\n\ninterface MembershipStatusProps {\n  userId: string;\n}\n\nexport default function MembershipStatus({ userId }: MembershipStatusProps) {\n  const { data: membership, isLoading } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-muted/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"animate-pulse space-y-2\">\n            <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!membership || !membership.isPremium) {\n    return (\n      <Card className=\"bg-muted/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-muted-foreground rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">Free Plan</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const isActive = membership.expiresAt ? new Date(membership.expiresAt) > new Date() : false;\n  const daysLeft = membership.expiresAt \n    ? Math.ceil((new Date(membership.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))\n    : 0;\n\n  return (\n    <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center space-x-2 text-lg\">\n          <Crown className=\"h-5 w-5 text-accent\" />\n          <span>Premium Member</span>\n          {isActive && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Status</span>\n            <Badge \n              variant={isActive ? \"default\" : \"secondary\"}\n              className={isActive ? \"bg-green-500\" : \"\"}\n            >\n              {isActive ? \"Active\" : \"Expired\"}\n            </Badge>\n          </div>\n          \n          {membership.expiresAt && (\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3 inline mr-1\" />\n                {isActive ? \"Expires in\" : \"Expired\"}\n              </span>\n              <span className=\"text-sm font-medium\">\n                {daysLeft > 0 ? `${daysLeft} days` : \"Expired\"}\n              </span>\n            </div>\n          )}\n          \n          {membership.amount && (\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Amount Paid</span>\n              <span className=\"text-sm font-medium text-accent\">\n                {membership.amount}π\n              </span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3329},"client/src/components/music/album-card.tsx":{"content":"import { Play, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { type AlbumWithDetails } from \"@shared/schema\";\n\ninterface AlbumCardProps {\n  album: AlbumWithDetails;\n  onPlay?: () => void;\n  onLike?: () => void;\n  showPlayCount?: boolean;\n  playCount?: number;\n}\n\nexport default function AlbumCard({ \n  album, \n  onPlay, \n  onLike, \n  showPlayCount = false, \n  playCount = 0 \n}: AlbumCardProps) {\n  const formatPlayCount = (count: number) => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    } else if (count >= 1000) {\n      return `${(count / 1000).toFixed(0)}K`;\n    }\n    return count.toString();\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-4 hover:bg-secondary transition-colors\">\n      <img \n        src={album.imageUrl} \n        alt={`${album.title} Album`}\n        className=\"w-full aspect-square rounded-lg object-cover mb-3\" \n      />\n      <h3 className=\"font-medium truncate\" data-testid={`text-album-title-${album.id}`}>\n        {album.title}\n      </h3>\n      <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-album-artist-${album.id}`}>\n        {album.artist.name}\n      </p>\n      <div className=\"flex items-center justify-between mt-2\">\n        {showPlayCount && (\n          <div className=\"flex items-center space-x-1\">\n            <Play className=\"text-accent h-3 w-3\" />\n            <span className=\"text-xs text-muted-foreground\" data-testid={`text-play-count-${album.id}`}>\n              {formatPlayCount(playCount)} plays\n            </span>\n          </div>\n        )}\n        <div className=\"flex items-center space-x-2\">\n          {onLike && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={onLike}\n              className=\"text-muted-foreground hover:text-primary\"\n              data-testid={`button-like-album-${album.id}`}\n            >\n              <Heart className=\"h-4 w-4\" />\n            </Button>\n          )}\n          {onPlay && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={onPlay}\n              className=\"text-primary\"\n              data-testid={`button-play-album-${album.id}`}\n            >\n              <Play className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2372},"client/src/components/music/now-playing-bar.tsx":{"content":"import { Play, Pause, Volume2, VolumeX, SkipBack, SkipForward, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useState, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Membership } from \"@shared/schema\";\nimport LikeButton from \"@/components/music/like-button\";\n\nexport default function NowPlayingBar() {\n  const { state, pauseSong, resumeSong, nextSong, previousSong, setCurrentTime, toggleMute, closePlayer } = useMusicPlayer();\n  const [audioEnabled, setAudioEnabled] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [startY, setStartY] = useState(0);\n  const [playerPosition, setPlayerPosition] = useState(24); // Default bottom position\n  const [isDragging, setIsDragging] = useState(false);\n  const [isMouseDragging, setIsMouseDragging] = useState(false);\n  const playerRef = useRef<HTMLDivElement>(null);\n  \n  // Auto-enable audio when song starts playing\n  if (state.isPlaying && !audioEnabled) {\n    setAudioEnabled(true);\n  }\n\n  // Check if user is premium\n  const userId = \"demo-user-123\"; // Demo user ID\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  if (!state.currentSong) return null;\n\n  const handleEnableAudio = async () => {\n    setAudioEnabled(true);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const progress = state.duration > 0 ? (state.currentTime / state.duration) * 100 : 0;\n\n  // Handle seeking (only for premium users)\n  const handleSeek = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!isPremium || !state.duration) return;\n    \n    const progressBar = event.currentTarget;\n    const rect = progressBar.getBoundingClientRect();\n    const clickX = event.clientX - rect.left;\n    const clickPercent = clickX / rect.width;\n    const newTime = clickPercent * state.duration;\n    \n    setCurrentTime(Math.max(0, Math.min(newTime, state.duration)));\n  };\n\n  // Handle touch gestures\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setStartX(e.touches[0].clientX);\n    setStartY(e.touches[0].clientY);\n    setIsDragging(true);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!isDragging) return;\n    e.preventDefault(); // Prevent page scrolling\n    e.stopPropagation(); // Stop event bubbling\n    \n    const currentY = e.touches[0].clientY;\n    const diffY = startY - currentY;\n    \n    // Update player position vertically (but keep it within screen bounds)\n    const newPosition = Math.max(24, Math.min(window.innerHeight - 150, playerPosition + diffY));\n    setPlayerPosition(newPosition);\n    setStartY(currentY);\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    if (!isDragging) return;\n    setIsDragging(false);\n    \n    const endX = e.changedTouches[0].clientX;\n    const diffX = startX - endX;\n    \n    // Horizontal swipes for song control\n    if (Math.abs(diffX) > 80) { // Minimum swipe distance\n      if (diffX > 0) {\n        // Swiped left = next song (unapred)\n        nextSong();\n      } else {\n        // Swiped right = previous song (unazad)\n        previousSong();\n      }\n    }\n  };\n\n  // Mouse event handlers for desktop\n  const handleMouseDown = (e: React.MouseEvent) => {\n    setStartX(e.clientX);\n    setStartY(e.clientY);\n    setIsMouseDragging(true);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isMouseDragging) return;\n    e.preventDefault(); // Prevent default mouse behavior\n    e.stopPropagation(); // Stop event bubbling\n    \n    const currentY = e.clientY;\n    const diffY = startY - currentY;\n    \n    // Update player position vertically\n    const newPosition = Math.max(24, Math.min(window.innerHeight - 150, playerPosition + diffY));\n    setPlayerPosition(newPosition);\n    setStartY(currentY);\n  };\n\n  const handleMouseUp = (e: React.MouseEvent) => {\n    if (!isMouseDragging) return;\n    setIsMouseDragging(false);\n    \n    const endX = e.clientX;\n    const diffX = startX - endX;\n    \n    // Horizontal swipes for song control\n    if (Math.abs(diffX) > 80) {\n      if (diffX > 0) {\n        // Dragged left = next song (unapred)\n        nextSong();\n      } else {\n        // Dragged right = previous song (unazad)\n        previousSong();\n      }\n    }\n  };\n\n  return (\n    <div \n      className={`fixed left-0 right-0 px-4 z-30 ${isDragging || isMouseDragging ? '' : 'transition-all duration-200'}`}\n      style={{ bottom: `${playerPosition}px` }}\n    >\n      <div \n        ref={playerRef}\n        className={`max-w-md mx-auto bg-card/95 backdrop-blur-lg rounded-xl p-3 border border-border/50 shadow-2xl relative select-none ${\n          isDragging || isMouseDragging \n            ? 'cursor-grabbing scale-105 shadow-3xl' \n            : 'cursor-grab hover:shadow-3xl transition-all duration-200'\n        }`}\n        style={{ touchAction: 'none' }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      >\n        {/* Close button in top right corner */}\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={closePlayer}\n          className=\"absolute top-2 right-2 p-1 w-6 h-6 text-muted-foreground hover:text-foreground transition-colors\"\n          data-testid=\"button-close-player\"\n        >\n          <X className=\"h-3 w-3\" />\n        </Button>\n        \n        <div className=\"flex items-center space-x-3\">\n          <img \n            src={state.currentSong.imageUrl || state.currentSong.album?.imageUrl || ''} \n            alt={`Now Playing - ${state.currentSong.title}`}\n            className=\"w-12 h-12 rounded-lg object-cover animate-spin-slow\" \n          />\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium truncate\" data-testid=\"text-current-song-title\">\n              {state.currentSong.title}\n            </p>\n            <p className=\"text-sm text-muted-foreground truncate\" data-testid=\"text-current-artist\">\n              {state.currentSong.artist?.name || 'Unknown Artist'}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            {!audioEnabled ? (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={handleEnableAudio}\n                className=\"p-2 text-accent hover:text-accent/80 transition-colors\"\n                data-testid=\"button-enable-audio\"\n              >\n                <Volume2 className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={toggleMute}\n                className={`p-2 transition-colors bg-transparent hover:bg-transparent focus:bg-transparent active:bg-transparent ${state.isMuted ? 'text-muted-foreground/50 hover:text-muted-foreground' : 'text-foreground hover:text-accent'}`}\n                data-testid=\"button-mute-toggle\"\n              >\n                {state.isMuted ? (\n                  <VolumeX className=\"h-4 w-4\" />\n                ) : (\n                  <Volume2 className=\"h-4 w-4\" />\n                )}\n              </Button>\n            )}\n            <LikeButton \n              songId={state.currentSong.id}\n              songTitle={state.currentSong.title}\n              className=\"p-2\"\n            />\n            \n            {/* Premium skip controls */}\n            {isPremium && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={previousSong}\n                className=\"p-2 text-foreground hover:text-accent transition-colors bg-transparent hover:bg-transparent focus:bg-transparent active:bg-transparent\"\n                data-testid=\"button-skip-previous\"\n              >\n                <SkipBack className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={state.isPlaying ? pauseSong : resumeSong}\n              className=\"p-2 text-foreground hover:text-accent transition-colors bg-transparent hover:bg-transparent focus:bg-transparent active:bg-transparent\"\n              data-testid=\"button-play-pause\"\n            >\n              {state.isPlaying ? (\n                <Pause className=\"h-4 w-4\" />\n              ) : (\n                <Play className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            {/* Premium skip controls */}\n            {isPremium && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={nextSong}\n                className=\"p-2 text-foreground hover:text-accent transition-colors bg-transparent hover:bg-transparent focus:bg-transparent active:bg-transparent\"\n                data-testid=\"button-skip-next\"\n              >\n                <SkipForward className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"mt-3\">\n          <div \n            className={`w-full ${isPremium ? 'cursor-pointer' : 'cursor-default'}`}\n            onClick={isPremium ? handleSeek : undefined}\n            data-testid=\"progress-container\"\n          >\n            <Progress value={progress} className=\"w-full h-1\" />\n          </div>\n          <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n            <span data-testid=\"text-current-time\">{formatTime(state.currentTime)}</span>\n            <span data-testid=\"text-duration\">{formatTime(state.duration)}</span>\n          </div>\n          {!isPremium && (\n            <div className=\"text-xs text-muted-foreground/60 text-center mt-1\">\n              Premium members can skip songs and seek timeline\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10298},"client/src/components/music/playlist-item.tsx":{"content":"import { Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { type Playlist } from \"@shared/schema\";\nimport { PlaylistOptionsMenu } from \"./playlist-options-menu\";\n\ninterface PlaylistItemProps {\n  playlist: Playlist;\n  onPlay?: () => void;\n  onClick?: () => void;\n  userId?: string;\n}\n\nexport default function PlaylistItem({ playlist, onPlay, onClick, userId = \"demo-user-123\" }: PlaylistItemProps) {\n  return (\n    <div className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-card transition-colors\">\n      <div \n        onClick={onClick}\n        className=\"flex items-center space-x-3 flex-1 cursor-pointer\"\n        data-testid={`playlist-card-${playlist.id}`}\n      >\n        {playlist.imageUrl ? (\n          <img \n            src={playlist.imageUrl} \n            alt={playlist.name}\n            className=\"w-12 h-12 rounded-lg object-cover\" \n          />\n        ) : (\n          <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-music text-white\"></i>\n          </div>\n        )}\n        <div className=\"flex-1\">\n          <p className=\"font-medium\" data-testid={`text-playlist-name-${playlist.id}`}>\n            {playlist.name}\n          </p>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`text-playlist-count-${playlist.id}`}>\n            {playlist.songCount} songs\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {onPlay && (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={onPlay}\n            className=\"text-primary\"\n            data-testid={`button-play-playlist-${playlist.id}`}\n          >\n            <Play className=\"h-4 w-4\" />\n          </Button>\n        )}\n        <PlaylistOptionsMenu playlist={playlist} userId={userId} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1929},"client/src/components/music/track-item.tsx":{"content":"import { Play, Pause } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { type SongWithDetails } from \"@shared/schema\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport LikeButton from \"@/components/music/like-button\";\nimport SongOptionsMenu from \"@/components/music/song-options-menu\";\n\ninterface TrackItemProps {\n  song: SongWithDetails;\n  showEqualizer?: boolean;\n  onLike?: () => void;\n}\n\nexport default function TrackItem({ \n  song, \n  showEqualizer = false, \n  onLike \n}: TrackItemProps) {\n  const { state, playSong, pauseSong, resumeSong } = useMusicPlayer();\n  \n  const isCurrentSong = state.currentSong?.id === song.id;\n  const isPlaying = isCurrentSong && state.isPlaying;\n\n  const handlePlayPause = () => {\n    if (isCurrentSong) {\n      if (isPlaying) {\n        pauseSong();\n      } else {\n        resumeSong();\n      }\n    } else {\n      playSong(song);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-3 bg-card rounded-lg p-3 hover:bg-secondary transition-colors\">\n      <img \n        src={song.imageUrl || song.album?.imageUrl || \"\"} \n        alt={song.title}\n        className=\"w-12 h-12 rounded-lg object-cover\" \n      />\n      <div className=\"flex-1\">\n        <p className=\"font-medium\" data-testid={`text-song-title-${song.id}`}>\n          {song.title}\n        </p>\n        <p className=\"text-sm text-muted-foreground\" data-testid={`text-song-artist-${song.id}`}>\n          {song.artist?.name || \"Unknown Artist\"}\n        </p>\n      </div>\n      <div className=\"flex items-center space-x-1\">\n        {showEqualizer && isPlaying && (\n          <div className=\"flex space-x-1\">\n            <div className=\"equalizer-bar\"></div>\n            <div className=\"equalizer-bar\"></div>\n            <div className=\"equalizer-bar\"></div>\n            <div className=\"equalizer-bar\"></div>\n          </div>\n        )}\n        <LikeButton \n          songId={song.id}\n          songTitle={song.title}\n        />\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={handlePlayPause}\n          className=\"text-primary\"\n          data-testid={`button-play-song-${song.id}`}\n        >\n          {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n        </Button>\n        <SongOptionsMenu song={song} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2361},"client/src/components/pi/pi-payment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, Sparkles, Music, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Pi SDK types are now defined in @/types/pi.d.ts\n\ninterface PiPaymentProps {\n  userId: string;\n  onPaymentSuccess?: () => void;\n}\n\nexport default function PiPayment({ userId, onPaymentSuccess }: PiPaymentProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState<string | null>(null);\n  const [piSdkReady, setPiSdkReady] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Component loaded successfully\n    \n    // Check if Pi SDK is available\n    const checkPiSdk = () => {\n      if (typeof window !== 'undefined' && window.Pi) {\n        setPiSdkReady(true);\n        console.log('Pi SDK is ready');\n        \n        // Check if we're in Pi Browser\n        const userAgent = navigator.userAgent || '';\n        const isPiBrowser = userAgent.includes('PiBrowser') || userAgent.includes('Pi Network');\n        console.log('User Agent:', userAgent);\n        console.log('Is Pi Browser:', isPiBrowser);\n        \n        if (!isPiBrowser) {\n          console.warn('Not running in Pi Browser - authentication may not work properly');\n        }\n        \n        // Don't auto-authenticate - let user click the button\n        console.log('Pi Browser detected, ready for authentication');\n      } else {\n        console.log('Pi SDK not available, retrying...');\n        setTimeout(checkPiSdk, 500);\n      }\n    };\n    \n    checkPiSdk();\n  }, []);\n\n  const authenticateUser = async () => {\n    if (!piSdkReady) {\n      toast({\n        title: \"Pi SDK Loading\",\n        description: \"Please wait for Pi SDK to initialize.\",\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      console.log('🎵 Starting PurpleBeats Pi authentication...');\n      \n      // Try PurpleBeats enhanced Pi login first\n      if (window.PurpleBeats && window.PurpleBeats.piLogin) {\n        console.log('🔧 Using PurpleBeats Pi login method');\n        const authResult = await window.PurpleBeats.piLogin();\n        setAuthToken(authResult.accessToken);\n        setIsAuthenticated(true);\n        console.log('✅ PurpleBeats Pi authentication successful');\n        toast({\n          title: \"✅ Authenticated with Pi Network\",\n          description: `Welcome ${authResult.user.username}!`,\n        });\n        return;\n      }\n      \n      // Fallback to standard Pi authentication\n      \n      // Set a timeout for authentication (increased for testnet)\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Authentication timeout')), 90000);\n      });\n\n      const scopes = ['payments'];\n      \n      const authPromise = window.Pi?.authenticate(scopes, (payment) => {\n        console.log('Incomplete payment found:', payment);\n        // Handle incomplete payment if needed\n      });\n\n      const auth = await Promise.race([authPromise, timeoutPromise]) as { accessToken: string; user: any };\n      \n      console.log('Authentication successful:', auth);\n      setAuthToken(auth.accessToken);\n      setIsAuthenticated(true);\n      \n      toast({\n        title: \"Authenticated!\",\n        description: \"You can now purchase premium membership with Pi.\",\n      });\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      \n      // Reset state on error\n      setIsAuthenticated(false);\n      setAuthToken(null);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      if (errorMessage.includes('timeout')) {\n        toast({\n          title: \"Connection Timeout\",\n          description: \"Pi Wallet connection timed out. Please try again.\",\n          variant: \"destructive\",\n        });\n      } else if (errorMessage.includes('cancelled') || errorMessage.includes('denied')) {\n        toast({\n          title: \"Authentication Cancelled\",\n          description: \"Please allow access to connect your Pi Wallet.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Authentication Failed\",\n          description: `Error: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePiPayment = async () => {\n    console.log('🚀 Pi payment initiated - isAuthenticated:', isAuthenticated, 'authToken:', !!authToken);\n    \n    if (!isAuthenticated || !authToken) {\n      console.log('🔒 Not authenticated, starting authentication...');\n      await authenticateUser();\n      return;\n    }\n\n    try {\n      console.log('💳 Starting payment process...');\n      setIsLoading(true);\n\n      const paymentData = {\n        amount: 3.14,\n        memo: \"PurpleBeats Premium Membership - 1 Month\",\n        metadata: { \n          productId: \"premium_membership\",\n          userId: userId,\n          duration: \"1_month\"\n        }\n      };\n\n      const paymentCallbacks = {\n        onReadyForServerApproval: async (paymentId: string) => {\n          console.log('Payment ready for approval:', paymentId);\n          \n          toast({\n            title: \"🎯 Approval Callback Pozvan!\",\n            description: `PaymentID: ${paymentId}`,\n          });\n          \n          try {\n            // Create payment record in our backend\n            const baseUrl = window.location.origin;\n            const response = await fetch(`${baseUrl}/api/pi/payment`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                paymentId,\n                userId,\n                amount: \"3.14\",\n                status: \"created\",\n                metadata: JSON.stringify(paymentData.metadata)\n              })\n            });\n\n            if (!response.ok) {\n              const errorText = await response.text();\n              console.error('Failed to create payment record:', errorText);\n              throw new Error('Failed to create payment record');\n            }\n\n            console.log('Payment record created, attempting approval...');\n\n            // Approve payment\n            const approveResponse = await fetch(`${baseUrl}/api/pi/payment/${paymentId}/approve`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' }\n            });\n\n            if (!approveResponse.ok) {\n              const errorText = await approveResponse.text();\n              console.error('Failed to approve payment:', errorText);\n              throw new Error('Failed to approve payment');\n            }\n\n            const approveData = await approveResponse.json();\n            console.log('Payment approval successful:', approveData);\n\n            toast({\n              title: \"Payment Approved\",\n              description: \"Please complete the transaction in Pi Wallet.\",\n            });\n          } catch (error) {\n            console.error('Payment approval failed:', error);\n            toast({\n              title: \"Payment Approval Failed\",\n              description: \"Please try again or contact support.\",\n              variant: \"destructive\"\n            });\n            throw error;\n          }\n        },\n        \n        onReadyForServerCompletion: async (paymentId: string, txid: string) => {\n          console.log('Payment ready for completion:', paymentId, txid);\n          \n          try {\n            const response = await fetch(`${window.location.origin}/api/pi/payment/${paymentId}/complete`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ txid })\n            });\n\n            if (!response.ok) {\n              throw new Error('Failed to complete payment');\n            }\n\n            // Invalidate queries to refresh membership status\n            queryClient.invalidateQueries({ queryKey: ['/api/membership'] });\n            \n            toast({\n              title: \"Payment Successful! 🎉\",\n              description: \"Welcome to PurpleBeats Premium! Your membership is now active.\",\n            });\n\n            if (onPaymentSuccess) {\n              onPaymentSuccess();\n            }\n          } catch (error) {\n            console.error('Failed to complete payment:', error);\n            toast({\n              title: \"Payment Error\",\n              description: \"Transaction completed but failed to activate membership. Please contact support.\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        \n        onCancel: (paymentId: string) => {\n          console.log('Payment cancelled:', paymentId);\n          toast({\n            title: \"Payment Cancelled\",\n            description: \"You can try again anytime.\",\n          });\n        },\n        \n        onError: (error: any, payment: any) => {\n          console.error('Payment error:', error, payment);\n          toast({\n            title: \"Payment Error\",\n            description: \"Something went wrong. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      };\n\n      toast({\n        title: \"Creating PurpleBeats Pi Payment...\",\n        description: \"Initiating payment for 3.14π Premium membership\",\n      });\n      \n      // Try PurpleBeats enhanced payment method first\n      if (window.PurpleBeats && window.PurpleBeats.piPayment) {\n        console.log('🔧 Using PurpleBeats Pi payment method');\n        const result = await window.PurpleBeats.piPayment(\n          paymentData.amount,\n          paymentData.memo,\n          paymentData.metadata\n        );\n        console.log('✅ PurpleBeats payment created:', result);\n      } else if (window.Pi?.createPayment) {\n        // Fallback to standard Pi SDK\n        console.log('🔄 Fallback to standard Pi createPayment');\n        const result = await window.Pi.createPayment(paymentData);\n        console.log('✅ Standard Pi payment created:', result);\n      } else {\n        throw new Error('Pi SDK not available');\n      }\n      \n      toast({\n        title: \"PurpleBeats Payment Created ✅\",\n        description: \"Waiting for Pi Network approval callback\",\n      });\n    } catch (error) {\n      console.error('Payment failed:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to process payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-gradient-to-br from-primary/10 to-accent/10 border-primary/20\">\n      <CardHeader className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mb-4\">\n          <Crown className=\"h-8 w-8 text-white\" />\n        </div>\n        <CardTitle className=\"text-2xl flex items-center justify-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-accent\" />\n          PurpleBeats Premium\n          <Sparkles className=\"h-5 w-5 text-accent\" />\n        </CardTitle>\n        <CardDescription className=\"text-lg\">\n          Unlock the full music experience for just{\" \"}\n          <Badge variant=\"secondary\" className=\"text-accent font-bold\">\n            3.14π\n          </Badge>\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-4\">\n          <div className=\"flex items-center space-x-3 p-3 bg-background/50 rounded-lg\">\n            <Music className=\"h-5 w-5 text-primary\" />\n            <span>Unlimited music streaming</span>\n          </div>\n          <div className=\"flex items-center space-x-3 p-3 bg-background/50 rounded-lg\">\n            <Sparkles className=\"h-5 w-5 text-primary\" />\n            <span>Ad-free experience</span>\n          </div>\n          <div className=\"flex items-center space-x-3 p-3 bg-background/50 rounded-lg\">\n            <Crown className=\"h-5 w-5 text-primary\" />\n            <span>Premium exclusive content</span>\n          </div>\n          <div className=\"flex items-center space-x-3 p-3 bg-background/50 rounded-lg\">\n            <Clock className=\"h-5 w-5 text-primary\" />\n            <span>1 month premium access</span>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-4\">\n          {!isAuthenticated ? (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your Pi Wallet to get started\n              </p>\n              <Button \n                onClick={authenticateUser} \n                disabled={isLoading || !piSdkReady}\n                className=\"w-full music-gradient text-white font-semibold\"\n                data-testid=\"button-authenticate-pi\"\n              >\n                {!piSdkReady ? \"Loading Pi SDK...\" : isLoading ? \"Connecting...\" : \"Connect Pi Wallet\"}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-accent font-medium\">\n                ✓ Pi Wallet Connected\n              </p>\n              <Button \n                onClick={handlePiPayment} \n                disabled={isLoading}\n                className=\"w-full music-gradient text-white font-semibold\"\n                data-testid=\"button-pay-with-pi\"\n              >\n                {isLoading ? \"Processing...\" : \"Pay 3.14π for Premium\"}\n              </Button>\n            </div>\n          )}\n          \n          <p className=\"text-xs text-muted-foreground\">\n            Secure payment powered by Pi Network\n          </p>\n          \n          {!navigator.userAgent.includes('PiBrowser') && (\n            <div className=\"mt-4 space-y-3\">\n              <div className=\"p-3 bg-amber-500/10 border border-amber-500/20 rounded-lg\">\n                <p className=\"text-xs text-amber-600 dark:text-amber-400 text-center\">\n                  <strong>Note:</strong> Pi Wallet authentication requires the Pi Browser app. \n                  <br />\n                  Download the Pi Network app to complete payments.\n                </p>\n              </div>\n              \n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14550},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/playlist.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { ArrowLeft, Play, Shuffle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport TrackItem from \"@/components/music/track-item\";\nimport UserPlaylistMenu from \"@/components/music/user-playlist-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { type SongWithDetails, type Playlist } from \"@shared/schema\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\n\nexport default function PlaylistPage() {\n  const [, params] = useRoute(\"/playlist/:id\");\n  const [, setLocation] = useLocation();\n  const { playSong } = useMusicPlayer();\n  \n  const playlistId = params?.id;\n\n  const { data: playlistData, isLoading: playlistLoading } = useQuery<any>({\n    queryKey: [\"/api/playlists\", playlistId],\n    enabled: !!playlistId,\n  });\n\n  const playlist = playlistData;\n  const playlistSongs = playlistData?.songs;\n\n  const handlePlayAll = () => {\n    if (playlistSongs && playlistSongs.length > 0) {\n      playSong(playlistSongs[0], playlistSongs);\n    }\n  };\n\n  const handleShuffle = () => {\n    if (playlistSongs && playlistSongs.length > 0) {\n      const shuffled = [...playlistSongs].sort(() => Math.random() - 0.5);\n      playSong(shuffled[0], shuffled);\n    }\n  };\n\n  if (!playlistId) {\n    return <div>Playlist not found</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      \n      <main className=\"px-4 pb-44\">\n        {/* Back Button */}\n        <div className=\"mb-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => setLocation(\"/\")}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n\n        {/* Playlist Header */}\n        {playlistLoading ? (\n          <div className=\"mb-8\">\n            <Skeleton className=\"w-48 h-48 rounded-lg mx-auto mb-4\" />\n            <Skeleton className=\"h-8 w-64 mx-auto mb-2\" />\n            <Skeleton className=\"h-4 w-32 mx-auto\" />\n          </div>\n        ) : playlist ? (\n          <div className=\"text-center mb-8\">\n            <img \n              src={playlist.imageUrl} \n              alt={playlist.name}\n              className=\"w-48 h-48 rounded-lg object-cover mx-auto mb-4 album-glow\" \n            />\n            <h1 className=\"text-2xl font-bold mb-2\" data-testid={`text-playlist-title-${playlist.id}`}>\n              {playlist.name}\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid={`text-playlist-description-${playlist.id}`}>\n              {playlist.description}\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {playlistSongs?.length || 0} songs\n            </p>\n          </div>\n        ) : null}\n\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button \n            onClick={handlePlayAll}\n            className=\"bg-primary hover:bg-primary/90 text-white\"\n            disabled={!playlistSongs || playlistSongs.length === 0}\n            data-testid=\"button-play-all\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" fill=\"white\" />\n            Play All\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={handleShuffle}\n            disabled={!playlistSongs || playlistSongs.length === 0}\n            data-testid=\"button-shuffle\"\n          >\n            <Shuffle className=\"h-4 w-4 mr-2\" />\n            Shuffle\n          </Button>\n          {playlist && (\n            <UserPlaylistMenu \n              playlist={playlist} \n              isUserCreated={playlist.createdBy === \"demo-user-123\"}\n            />\n          )}\n        </div>\n\n        {/* Songs List */}\n        <div className=\"space-y-2\">\n          {playlistLoading ? (\n            Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-4 w-32 mb-1\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n                <Skeleton className=\"h-8 w-8 rounded\" />\n              </div>\n            ))\n          ) : playlistSongs && playlistSongs.length > 0 ? (\n            playlistSongs.map((song: SongWithDetails, index: number) => (\n              <div key={song.id} className=\"flex items-center space-x-3\">\n                <span className=\"text-muted-foreground text-sm w-6 text-center\">\n                  {index + 1}\n                </span>\n                <div className=\"flex-1\">\n                  <TrackItem\n                    song={song}\n                    showEqualizer\n                    onLike={() => {}}\n                                      />\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              This playlist is empty\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5311},"server/storage-80s.ts":{"content":"// 80s Hits Data for PurpleBeats\nexport const artists80s = [\n  { id: \"artist-1\", name: \"Synth Masters\", bio: \"80s synthpop legends\" },\n  { id: \"artist-2\", name: \"New Wave Kings\", bio: \"New wave pioneers of the 80s\" },\n  { id: \"artist-3\", name: \"Rock Anthems\", bio: \"Classic rock from the 80s\" },\n  { id: \"artist-4\", name: \"Pop Icons\", bio: \"80s pop sensations\" },\n  { id: \"artist-5\", name: \"Dance Floor\", bio: \"80s dance and disco\" },\n  { id: \"artist-6\", name: \"Electronic Dreams\", bio: \"Electronic 80s innovators\" },\n];\n\nexport const albums80s = [\n  { id: \"album-1\", title: \"80s Synth Classics\", artistId: \"artist-1\", genre: \"Synthpop\", year: 1983 },\n  { id: \"album-2\", title: \"New Wave Hits\", artistId: \"artist-2\", genre: \"New Wave\", year: 1984 },\n  { id: \"album-3\", title: \"Rock Anthems\", artistId: \"artist-3\", genre: \"Rock\", year: 1985 },\n  { id: \"album-4\", title: \"Pop Gold\", artistId: \"artist-4\", genre: \"Pop\", year: 1986 },\n  { id: \"album-5\", title: \"Dance Fever\", artistId: \"artist-5\", genre: \"Dance\", year: 1987 },\n  { id: \"album-6\", title: \"Electronic Voyage\", artistId: \"artist-6\", genre: \"Electronic\", year: 1988 },\n];\n\nexport const songs80s = [\n  // Synthpop Classics\n  { id: \"song-1\", title: \"Take On Me\", artistId: \"artist-1\", albumId: \"album-1\", duration: 225, genre: \"Synthpop\", playCount: 3200000 },\n  { id: \"song-2\", title: \"Sweet Dreams\", artistId: \"artist-1\", albumId: \"album-1\", duration: 216, genre: \"Synthpop\", playCount: 2900000 },\n  { id: \"song-3\", title: \"Tainted Love\", artistId: \"artist-1\", albumId: \"album-1\", duration: 160, genre: \"Synthpop\", playCount: 2500000 },\n  { id: \"song-4\", title: \"Blue Monday\", artistId: \"artist-1\", albumId: \"album-1\", duration: 450, genre: \"Synthpop\", playCount: 2300000 },\n  { id: \"song-5\", title: \"Girls Just Want to Have Fun\", artistId: \"artist-1\", albumId: \"album-1\", duration: 238, genre: \"Synthpop\", playCount: 2800000 },\n\n  // New Wave\n  { id: \"song-6\", title: \"Don't You Forget About Me\", artistId: \"artist-2\", albumId: \"album-2\", duration: 263, genre: \"New Wave\", playCount: 2700000 },\n  { id: \"song-7\", title: \"True\", artistId: \"artist-2\", albumId: \"album-2\", duration: 265, genre: \"New Wave\", playCount: 2100000 },\n  { id: \"song-8\", title: \"Everybody Wants to Rule the World\", artistId: \"artist-2\", albumId: \"album-2\", duration: 251, genre: \"New Wave\", playCount: 2600000 },\n  { id: \"song-9\", title: \"Love Is a Battlefield\", artistId: \"artist-2\", albumId: \"album-2\", duration: 332, genre: \"New Wave\", playCount: 2200000 },\n  { id: \"song-10\", title: \"Hungry Like the Wolf\", artistId: \"artist-2\", albumId: \"album-2\", duration: 221, genre: \"New Wave\", playCount: 2400000 },\n\n  // Rock Anthems\n  { id: \"song-11\", title: \"Eye of the Tiger\", artistId: \"artist-3\", albumId: \"album-3\", duration: 246, genre: \"Rock\", playCount: 3500000 },\n  { id: \"song-12\", title: \"Livin' on a Prayer\", artistId: \"artist-3\", albumId: \"album-3\", duration: 250, genre: \"Rock\", playCount: 3300000 },\n  { id: \"song-13\", title: \"Don't Stop Believin'\", artistId: \"artist-3\", albumId: \"album-3\", duration: 251, genre: \"Rock\", playCount: 4000000 },\n  { id: \"song-14\", title: \"Pour Some Sugar on Me\", artistId: \"artist-3\", albumId: \"album-3\", duration: 283, genre: \"Rock\", playCount: 2800000 },\n  { id: \"song-15\", title: \"We're Not Gonna Take It\", artistId: \"artist-3\", albumId: \"album-3\", duration: 203, genre: \"Rock\", playCount: 2300000 },\n\n  // Pop Gold\n  { id: \"song-16\", title: \"Billie Jean\", artistId: \"artist-4\", albumId: \"album-4\", duration: 294, genre: \"Pop\", playCount: 4500000 },\n  { id: \"song-17\", title: \"Beat It\", artistId: \"artist-4\", albumId: \"album-4\", duration: 258, genre: \"Pop\", playCount: 3800000 },\n  { id: \"song-18\", title: \"Like a Virgin\", artistId: \"artist-4\", albumId: \"album-4\", duration: 219, genre: \"Pop\", playCount: 3200000 },\n  { id: \"song-19\", title: \"Material Girl\", artistId: \"artist-4\", albumId: \"album-4\", duration: 240, genre: \"Pop\", playCount: 2700000 },\n  { id: \"song-20\", title: \"Purple Rain\", artistId: \"artist-4\", albumId: \"album-4\", duration: 524, genre: \"Pop\", playCount: 4200000 },\n\n  // Dance Floor\n  { id: \"song-21\", title: \"Flashdance... What a Feeling\", artistId: \"artist-5\", albumId: \"album-5\", duration: 236, genre: \"Dance\", playCount: 2600000 },\n  { id: \"song-22\", title: \"Maniac\", artistId: \"artist-5\", albumId: \"album-5\", duration: 244, genre: \"Dance\", playCount: 2400000 },\n  { id: \"song-23\", title: \"Footloose\", artistId: \"artist-5\", albumId: \"album-5\", duration: 227, genre: \"Dance\", playCount: 2800000 },\n  { id: \"song-24\", title: \"I Wanna Dance with Somebody\", artistId: \"artist-5\", albumId: \"album-5\", duration: 291, genre: \"Dance\", playCount: 3100000 },\n  { id: \"song-25\", title: \"Dancing Queen\", artistId: \"artist-5\", albumId: \"album-5\", duration: 231, genre: \"Dance\", playCount: 3600000 },\n\n  // Electronic Dreams\n  { id: \"song-26\", title: \"Blue Monday\", artistId: \"artist-6\", albumId: \"album-6\", duration: 450, genre: \"Electronic\", playCount: 2300000 },\n  { id: \"song-27\", title: \"Personal Jesus\", artistId: \"artist-6\", albumId: \"album-6\", duration: 197, genre: \"Electronic\", playCount: 2100000 },\n  { id: \"song-28\", title: \"Enjoy the Silence\", artistId: \"artist-6\", albumId: \"album-6\", duration: 273, genre: \"Electronic\", playCount: 2500000 },\n  { id: \"song-29\", title: \"Just Can't Get Enough\", artistId: \"artist-6\", albumId: \"album-6\", duration: 224, genre: \"Electronic\", playCount: 2200000 },\n  { id: \"song-30\", title: \"Cars\", artistId: \"artist-6\", albumId: \"album-6\", duration: 239, genre: \"Electronic\", playCount: 1900000 },\n];","size_bytes":5533},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n\n// Get current user ID with persistent guest support\nexport function getCurrentUserId(): string | null {\n  if (typeof window === 'undefined') return null;\n  \n  // 1. Session ID za ovaj tab (najviši prioritet)\n  const sessionId = sessionStorage.getItem('user-session-id');\n  if (sessionId) {\n    return sessionId;\n  }\n  \n  // 2. Pi user data ako postoji\n  const piUserData = localStorage.getItem('pi-user');\n  if (piUserData) {\n    try {\n      const piUser = JSON.parse(piUserData);\n      return piUser.uid;\n    } catch {\n      // Ignore parse errors\n    }\n  }\n  \n  // 3. Dugotrajni guest profil\n  const persistentGuestId = localStorage.getItem('guest-profile-id');\n  if (persistentGuestId) {\n    return persistentGuestId;\n  }\n  \n  // 4. Last fallback to demo user\n  return 'demo-user-123';\n}","size_bytes":909},"client/src/pages/landing.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  \n  // Since Pi Browser handles user profiles automatically, redirect to home\n  useEffect(() => {\n    setLocation(\"/\");\n  }, [setLocation]);\n  \n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-primary mb-4\">PurpleBeats</h1>\n        <p className=\"text-muted-foreground\">Redirecting to your music...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":611},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/profile/profile-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, \n  Settings, \n  Bell, \n  Clock, \n  Newspaper, \n  Shield, \n  LogOut,\n  ChevronDown,\n  Trash2,\n  Crown\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/contexts/auth-context\";\n\ninterface ProfileDropdownProps {\n  userName?: string;\n  userAvatar?: string;\n  isPremium?: boolean;\n}\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  nickname?: string;\n}\n\nexport default function ProfileDropdown({ userName, userAvatar, isPremium }: ProfileDropdownProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [, setLocation] = useLocation();\n  const { clearGuestProfile, user, isAuthenticated, login } = useAuth();\n  const userId = user?.uid;\n  \n  // Check if current user is a guest user (not authenticated with Pi Network)\n  const isGuestUser = !isAuthenticated && !!user && user.uid?.startsWith('guest-');\n  \n  // Clean up debug logs\n\n  const { toast } = useToast();\n\n  // Fetch user profile with forced refresh\n  const { data: userProfile } = useQuery<UserProfile>({\n    queryKey: ['/api/profile', userId],\n    enabled: isAuthenticated,\n    staleTime: 0,\n    refetchOnMount: 'always',\n    refetchOnWindowFocus: true,\n  });\n\n  // Use Pi Network authenticated user name or profile name or guest fallback\n  const displayName = user?.username || userProfile?.name || userName || \"Guest\";\n  \n  // Image URL is now set correctly with relative path\n\n  const handleProfileClick = () => {\n    setLocation(\"/profile\");\n    setIsOpen(false);\n  };\n\n  const handleAccountClick = () => {\n    console.log(\"Account clicked\");\n    setIsOpen(false);\n  };\n\n  const handleNotificationsClick = () => {\n    console.log(\"Notifications clicked\");\n    setIsOpen(false);\n  };\n\n  const handleRecentlyPlayedClick = () => {\n    console.log(\"Recently played clicked\");\n    setIsOpen(false);\n  };\n\n  const handleNewsClick = () => {\n    console.log(\"News & Updates clicked\");\n    setIsOpen(false);\n  };\n\n  const handleSettingsClick = () => {\n    console.log(\"Settings & Privacy clicked\");\n    setIsOpen(false);\n  };\n\n  const handlePremiumClick = () => {\n    setLocation(\"/premium\");\n    setIsOpen(false);\n  };\n\n  const handleLogoutClick = () => {\n    // Za guest korisnike, logout je isti kao reset profila\n    if (isGuestUser) {\n      clearGuestProfile();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully.\",\n      });\n    } else {\n      // Za Pi korisnike, poziv pravog logout\n      // logout(); // Ovo će biti implementirano kada bude potrebno\n      console.log(\"Pi user logout clicked\");\n    }\n    setIsOpen(false);\n  };\n\n  const handleClearProfileClick = () => {\n    // Briše dugotrajni guest profil - korisno ako žele da počnu iznova\n    clearGuestProfile();\n    setIsOpen(false);\n    \n    // Prikaži toast potvrdu\n    toast({\n      title: \"Profile Reset\",\n      description: \"Your guest profile has been reset. You can start fresh!\",\n    });\n  };\n\n  // isGuestUser is already defined above\n\n  // Get user initials for avatar fallback\n  const userInitials = displayName\n    .split(' ')\n    .map(name => name.charAt(0).toUpperCase())\n    .join('')\n    .slice(0, 2);\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"flex items-center space-x-2 p-2 hover:bg-accent/10 rounded-full\"\n          data-testid=\"button-profile-dropdown\"\n        >\n          <Avatar className=\"w-8 h-8\">\n            <AvatarImage src={userProfile?.imageUrl || userAvatar} alt={displayName} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n              {userInitials}\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-sm font-medium text-foreground hidden sm:block max-w-20 truncate\">\n            {displayName}\n          </span>\n          <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n        </Button>\n      </DropdownMenuTrigger>\n      \n      <DropdownMenuContent \n        align=\"end\" \n        className=\"w-64 bg-card border border-border shadow-lg\"\n        data-testid=\"dropdown-profile-menu\"\n      >\n        {/* User Info Header */}\n        <DropdownMenuLabel className=\"p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarImage src={userProfile?.imageUrl || userAvatar} alt={displayName} />\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                {userInitials}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"font-semibold text-foreground\">{displayName}</div>\n              <div className=\"text-sm text-muted-foreground\">\n                {isAuthenticated ? (isPremium ? 'Premium Member' : 'Pi Network User') : 'Guest User'}\n              </div>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        \n        <DropdownMenuSeparator />\n        \n        {/* Menu Items */}\n        <DropdownMenuItem \n          onClick={handleProfileClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-profile\"\n        >\n          <User className=\"h-4 w-4\" />\n          <span>Profile view</span>\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem \n          onClick={handleAccountClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-account\"\n        >\n          <Settings className=\"h-4 w-4\" />\n          <span>Account</span>\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem \n          onClick={handleNotificationsClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-notifications\"\n        >\n          <Bell className=\"h-4 w-4\" />\n          <span>Notifications</span>\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem \n          onClick={handleRecentlyPlayedClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-recently-played\"\n        >\n          <Clock className=\"h-4 w-4\" />\n          <span>Recently played</span>\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem \n          onClick={handleNewsClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-news\"\n        >\n          <Newspaper className=\"h-4 w-4\" />\n          <span>News & Updates</span>\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem \n          onClick={handleSettingsClick}\n          className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10\"\n          data-testid=\"menu-item-settings\"\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Settings & Privacy</span>\n        </DropdownMenuItem>\n        \n\n        {/* Premium Option - show upgrade if not premium, or premium status if premium */}\n        <DropdownMenuItem \n          onClick={handlePremiumClick}\n          className={`flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10 ${\n            isPremium ? 'text-yellow-500' : 'text-primary'\n          }`}\n          data-testid=\"menu-item-premium\"\n        >\n          <Crown className=\"h-4 w-4\" />\n          <span>{isPremium ? 'Premium Active' : 'Go Premium'}</span>\n          {isPremium && <span className=\"ml-auto text-xs text-yellow-500\">✨</span>}\n        </DropdownMenuItem>\n        \n        {/* Pi Network Login - samo za guest usere */}\n        {!isAuthenticated && isGuestUser && (\n          <>\n            <DropdownMenuSeparator />\n            <div\n              onClick={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log(\"🚀 Starting Pi Network login...\");\n                \n                try {\n                  await login();\n                  toast({\n                    title: \"✅ Pi Login Successful!\",\n                    description: \"Welcome to PurpleBeats with Pi Network!\",\n                  });\n                } catch (err: any) {\n                  console.error(\"❌ Pi login error:\", err);\n                  toast({\n                    title: \"❌ Pi Login Failed\",\n                    description: err?.message || 'Unable to connect to Pi Network',\n                    variant: \"destructive\"\n                  });\n                }\n                setIsOpen(false);\n              }}\n              className=\"flex items-center space-x-3 p-3 cursor-pointer hover:bg-accent/10 text-primary font-semibold border border-yellow-400 rounded-md mx-2 my-1\"\n              data-testid=\"menu-item-pi-login\"\n              style={{ backgroundColor: 'rgba(234, 179, 8, 0.1)' }}\n            >\n              <Crown className=\"h-4 w-4 text-yellow-400\" />\n              <span>🔥 LOGIN WITH Pi NETWORK</span>\n            </div>\n          </>\n        )}\n        \n        <DropdownMenuSeparator />\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":9582},"client/src/pages/profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { \n  ArrowLeft, \n  Users, \n  Music, \n  Heart, \n  Clock, \n  PlayCircle,\n  Settings,\n  Share,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport TrackItem from \"@/components/music/track-item\";\nimport PlaylistItem from \"@/components/music/playlist-item\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { type SongWithDetails, type Playlist, type Membership } from \"@shared/schema\";\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  nickname?: string;\n}\n\nexport default function ProfilePage() {\n  const [, setLocation] = useLocation();\n  const { user, userId, isAuthenticated } = useAuth();\n\n  // Fetch user data\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userProfile } = useQuery<UserProfile>({\n    queryKey: ['/api/profile', userId],\n    enabled: isAuthenticated,\n    staleTime: 0,\n    refetchOnMount: 'always',\n    refetchOnWindowFocus: 'always',\n  });\n\n  const { data: likedSongs } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/liked-songs\"],\n  });\n\n  const { data: playlists } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists\"],\n  });\n\n  // Fetch user's created playlists\n  const { data: userPlaylists } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists/user\", userId],\n    enabled: isAuthenticated,\n  });\n\n  const { data: recentlyPlayed } = useQuery<SongWithDetails[]>({\n    queryKey: [\"/api/songs/recently-played\"],\n  });\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n  const userName = userProfile?.name || \"Premium User\";\n  const userInitials = userName.split(' ').map(name => name.charAt(0).toUpperCase()).join('').slice(0, 2);\n\n  // Mock data for profile stats (in real app this would come from backend)\n  const profileStats = {\n    followers: 42,\n    following: 128,\n    publicPlaylists: userPlaylists?.length || 0,\n    totalListeningTime: \"1,284 hours\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-background/90 backdrop-blur-sm px-4 pt-12 pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation(\"/\")}\n            className=\"p-2\"\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-share-profile\">\n              <Share className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-profile-more\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 pb-44\">\n        {/* Profile Header */}\n        <div className=\"text-center mb-8\">\n          <Avatar className=\"w-32 h-32 mx-auto mb-4 border-4 border-primary/20\">\n            <AvatarImage src={userProfile?.imageUrl || \"\"} alt={userName} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-4xl\">\n              {userInitials}\n            </AvatarFallback>\n          </Avatar>\n          \n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-profile-name\">\n            {userName}\n          </h1>\n          \n          {isPremium ? (\n            <Badge className=\"bg-gradient-to-r from-primary to-accent text-white mb-4\">\n              Premium Member\n            </Badge>\n          ) : (\n            <Badge variant=\"outline\" className=\"border-muted-foreground text-muted-foreground mb-4\">\n              Free Account\n            </Badge>\n          )}\n\n          {/* Profile Stats */}\n          <div className=\"flex justify-center space-x-6 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-followers-count\">\n                {profileStats.followers}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Followers</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-following-count\">\n                {profileStats.following}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Following</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-playlists-count\">\n                {profileStats.publicPlaylists}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Playlists</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-center space-x-2 mb-8\">\n          <Button \n            className=\"bg-primary hover:bg-primary/90\" \n            data-testid=\"button-edit-profile\"\n            onClick={() => setLocation(\"/edit-profile\")}\n          >\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Edit Profile\n          </Button>\n          <Button \n            variant=\"outline\" \n            data-testid=\"button-my-playlists\"\n            onClick={() => {\n              // Scroll to playlists tab or switch to it\n              const playlistsTab = document.querySelector('[data-testid=\"tab-playlists\"]') as HTMLElement;\n              if (playlistsTab) {\n                playlistsTab.click();\n              }\n            }}\n          >\n            <Music className=\"mr-2 h-4 w-4\" />\n            My Playlists\n          </Button>\n          <Button variant=\"outline\" data-testid=\"button-follow\">\n            <Users className=\"mr-2 h-4 w-4\" />\n            Follow\n          </Button>\n        </div>\n\n        {/* Profile Content Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"playlists\" data-testid=\"tab-playlists\">Playlists</TabsTrigger>\n            <TabsTrigger value=\"following\" data-testid=\"tab-following\">Following</TabsTrigger>\n            <TabsTrigger value=\"activity\" data-testid=\"tab-activity\">Activity</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Listening Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Listening Stats\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">{profileStats.totalListeningTime}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total listening time</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">{likedSongs?.length || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Liked songs</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top Tracks */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Music className=\"h-5 w-5\" />\n                  Top Tracks This Month\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {recentlyPlayed?.slice(0, 5).map((song, index) => (\n                    <div key={song.id} className=\"flex items-center space-x-3\">\n                      <span className=\"text-sm text-muted-foreground w-6\">{index + 1}</span>\n                      <div className=\"flex-1\">\n                        <TrackItem song={song} showEqualizer={false} />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recently Played */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PlayCircle className=\"h-5 w-5\" />\n                  Recently Played\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {recentlyPlayed?.slice(0, 8).map((song) => (\n                    <TrackItem key={song.id} song={song} showEqualizer={false} />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Playlists Tab */}\n          <TabsContent value=\"playlists\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Music className=\"h-5 w-5\" />\n                  Public Playlists\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Liked Songs */}\n                  <div className=\"flex items-center space-x-4 p-4 rounded-lg hover:bg-accent/10 transition-colors\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                      <Heart className=\"h-8 w-8 text-white\" fill=\"white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\" data-testid=\"text-liked-songs-title\">Liked Songs</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {likedSongs?.length || 0} songs\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* User Created Playlists */}\n                  {userPlaylists && userPlaylists.length > 0 ? (\n                    userPlaylists.map((playlist) => (\n                      <PlaylistItem \n                        key={playlist.id} \n                        playlist={playlist} \n                        onPlay={() => setLocation(`/playlist/${playlist.id}`)}\n                      />\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Music className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No playlists created yet</p>\n                      <p className=\"text-sm mt-1\">Create your first playlist to see it here</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Following Tab */}\n          <TabsContent value=\"following\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Following ({profileStats.following})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Mock following list */}\n                  {Array.from({ length: 5 }).map((_, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarFallback className=\"bg-primary/20\">U{index + 1}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-medium\">Music Lover {index + 1}</div>\n                          <div className=\"text-sm text-muted-foreground\">{Math.floor(Math.random() * 50)} followers</div>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">Following</Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Mock activity feed */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={userProfile?.imageUrl || \"\"} alt={userName} />\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                          {userInitials}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">{userName}</span> liked{\" \"}\n                          <span className=\"font-medium\">Mountain Song</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={userProfile?.imageUrl || \"\"} alt={userName} />\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                          {userInitials}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">{userName}</span> created a new playlist{\" \"}\n                          <span className=\"font-medium\">Chill Vibes</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">1 day ago</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={userProfile?.imageUrl || \"\"} alt={userName} />\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                          {userInitials}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">{userName}</span> started following{\" \"}\n                          <span className=\"font-medium\">Electronic Beats</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">3 days ago</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16051},"client/src/pages/liked-songs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type SongWithDetails, type PlaylistWithDetails, type Membership } from \"@shared/schema\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Play, Pause, Heart, Music, Crown, Lock } from \"lucide-react\";\nimport Header from \"@/components/layout/header\";\nimport PlaylistItem from \"@/components/music/playlist-item\";\nimport { useLocation } from \"wouter\";\n\nexport default function LikedSongs() {\n  const { state, playSong, pauseSong, resumeSong } = useMusicPlayer();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const userId = user?.uid;\n\n  // Get user's membership status\n  const { data: membership, isLoading: isLoadingMembership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n  \n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  const { data: likedSongs = [], isLoading } = useQuery<SongWithDetails[]>({\n    queryKey: ['/api/liked-songs'],\n  });\n\n  const { data: likedPlaylists = [], isLoading: isLoadingPlaylists } = useQuery<PlaylistWithDetails[]>({\n    queryKey: ['/api/liked-playlists', userId],\n    enabled: !!userId,\n  });\n\n  const handlePlaySong = (song: SongWithDetails) => {\n    playSong(song, likedSongs);\n  };\n\n  const handlePlayPause = (song: SongWithDetails) => {\n    if (state.currentSong?.id === song.id) {\n      if (state.isPlaying) {\n        pauseSong();\n      } else {\n        resumeSong();\n      }\n    } else {\n      handlePlaySong(song);\n    }\n  };\n\n  const handlePlayPlaylist = (playlist: PlaylistWithDetails) => {\n    if (playlist.songs && playlist.songs.length > 0) {\n      playSong(playlist.songs[0], playlist.songs);\n    }\n  };\n\n  const handleNavigateToPlaylist = (playlistId: string) => {\n    navigate(`/playlist/${playlistId}`);\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (isLoading || isLoadingPlaylists || isLoadingMembership) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"p-4 pb-44\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // If user is not premium, show upgrade message\n  if (!isPremium) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"p-4 pb-44\">\n          {/* Header */}\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-red-500 to-pink-600 rounded-lg flex items-center justify-center\">\n              <Heart className=\"h-8 w-8 text-white fill-current\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"text-liked-songs-title\">Liked Songs</h1>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-liked-count\">\n                Premium Feature\n              </p>\n            </div>\n          </div>\n\n          {/* Premium Required Card */}\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mb-4\">\n                <Crown className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Premium Feature</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Liked Songs is available for Premium members only. Upgrade to Premium for just 3.14π to unlock this and more features!\n              </p>\n              <Button \n                onClick={() => navigate('/premium')}\n                className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\"\n                data-testid=\"button-upgrade-premium\"\n              >\n                <Crown className=\"h-4 w-4 mr-2\" />\n                Upgrade to Premium\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"p-4 pb-44\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-red-500 to-pink-600 rounded-lg flex items-center justify-center\">\n            <Heart className=\"h-8 w-8 text-white fill-current\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"text-liked-songs-title\">Liked Songs</h1>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-liked-count\">\n              {likedSongs.length} {likedSongs.length === 1 ? 'song' : 'songs'}\n            </p>\n          </div>\n        </div>\n\n        {/* Play All Button */}\n        {likedSongs.length > 0 && (\n          <div className=\"mb-6\">\n            <Button \n              onClick={() => handlePlaySong(likedSongs[0])}\n              className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8\"\n              data-testid=\"button-play-all-liked\"\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              Play All\n            </Button>\n          </div>\n        )}\n\n        {/* Liked Playlists Section */}\n        {likedPlaylists.length > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <Music className=\"h-5 w-5 text-primary\" />\n              <h2 className=\"text-xl font-semibold\" data-testid=\"text-liked-playlists-title\">\n                Liked Playlists\n              </h2>\n            </div>\n            <div className=\"space-y-2\">\n              {likedPlaylists.map((playlist) => (\n                <PlaylistItem\n                  key={playlist.id}\n                  playlist={playlist}\n                  onPlay={() => handlePlayPlaylist(playlist)}\n                  onClick={() => handleNavigateToPlaylist(playlist.id)}\n                  userId=\"demo-user-123\"\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Songs List */}\n        {likedSongs.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Heart className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No liked songs yet</h3>\n            <p className=\"text-muted-foreground\">\n              Songs you like will appear here\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {likedSongs.map((song, index) => {\n              const isCurrentSong = state.currentSong?.id === song.id;\n              const isCurrentlyPlaying = isCurrentSong && state.isPlaying;\n\n              return (\n                <div key={song.id} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors\">\n                  {/* Play/Pause Button */}\n                  <div className=\"relative\">\n                    <img \n                      src={song.imageUrl || song.album?.imageUrl || ''} \n                      alt={`${song.title} cover`}\n                      className=\"w-12 h-12 rounded-lg object-cover\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handlePlayPause(song)}\n                      className=\"absolute inset-0 w-full h-full bg-black/40 hover:bg-black/60 opacity-0 hover:opacity-100 transition-opacity rounded-lg\"\n                      data-testid={`button-play-pause-${song.id}`}\n                    >\n                      {isCurrentlyPlaying ? (\n                        <Pause className=\"h-4 w-4 text-white\" />\n                      ) : (\n                        <Play className=\"h-4 w-4 text-white\" />\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Song Info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground w-6\" data-testid={`text-track-number-${index + 1}`}>\n                        {index + 1}\n                      </span>\n                      <div className=\"min-w-0 flex-1\">\n                        <p className={`font-medium truncate ${isCurrentSong ? 'text-primary' : ''}`} data-testid={`text-song-title-${song.id}`}>\n                          {song.title}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-artist-name-${song.id}`}>\n                          {song.artist?.name || 'Unknown Artist'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Duration */}\n                  <span className=\"text-sm text-muted-foreground\" data-testid={`text-duration-${song.id}`}>\n                    {formatDuration(song.duration)}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9696},"client/src/components/music/like-button.tsx":{"content":"import { Heart, Crown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { type Membership } from \"@shared/schema\";\n\ninterface LikeButtonProps {\n  songId: string;\n  songTitle?: string;\n  size?: \"sm\" | \"default\";\n  className?: string;\n}\n\nexport default function LikeButton({ \n  songId, \n  songTitle = \"Song\", \n  size = \"sm\",\n  className = \"\"\n}: LikeButtonProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const userId = user?.uid;\n\n  // Check user's membership status\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  // Check if song is liked\n  const { data: likeStatus } = useQuery<{ isLiked: boolean }>({\n    queryKey: ['/api/liked-songs', songId, 'check'],\n  });\n\n  const isLiked = likeStatus?.isLiked || false;\n\n  // Like/unlike mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      if (isLiked) {\n        await apiRequest(\"DELETE\", `/api/liked-songs/${songId}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/liked-songs\", { songId });\n      }\n    },\n    onSuccess: () => {\n      // Invalidate like status for this song\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/liked-songs', songId, 'check'] \n      });\n      // Invalidate liked songs list\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/liked-songs'] \n      });\n      \n      toast({\n        title: isLiked ? \"Removed from Liked Songs\" : \"Added to Liked Songs\",\n        description: isLiked ? `${songTitle} removed from your liked songs` : `${songTitle} added to your liked songs`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update liked songs\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClick = () => {\n    if (!isPremium) {\n      // Show premium required toast\n      toast({\n        title: \"Premium Feature\",\n        description: \"Liking songs is a premium feature. Upgrade to Premium for only 3.14π to unlock this and more features!\",\n        variant: \"default\",\n        action: (\n          <div className=\"flex items-center gap-1 text-primary\">\n            <Crown className=\"h-3 w-3\" />\n            <span className=\"text-xs\">Upgrade</span>\n          </div>\n        ),\n      });\n      return;\n    }\n    \n    // Proceed with like/unlike for premium users\n    likeMutation.mutate();\n  };\n\n  return (\n    <Button \n      variant=\"ghost\" \n      size={size}\n      onClick={handleClick}\n      disabled={likeMutation.isPending}\n      className={`transition-colors ${\n        isLiked \n          ? 'text-red-500 hover:text-red-400' \n          : 'text-muted-foreground hover:text-primary'\n      } ${className}`}\n      data-testid={`button-like-song-${songId}`}\n    >\n      <Heart className={`h-4 w-4 ${isLiked ? 'fill-current' : ''}`} />\n    </Button>\n  );\n}","size_bytes":3283},"client/src/components/playlist/create-playlist-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Crown, ImagePlus } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPlaylistSchema, type Membership } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { ObjectUploader } from \"@/components/object-uploader\";\n\nconst createPlaylistFormSchema = insertPlaylistSchema.extend({\n  name: z.string().min(1, \"Playlist name is required\").max(100, \"Name too long\"),\n  description: z.string().max(500, \"Description too long\").optional(),\n  imageUrl: z.string().optional(),\n});\n\ntype CreatePlaylistFormData = z.infer<typeof createPlaylistFormSchema>;\n\ninterface CreatePlaylistDialogProps {\n  trigger?: React.ReactNode;\n}\n\nexport default function CreatePlaylistDialog({ trigger }: CreatePlaylistDialogProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { userId } = useAuth();\n\n  // Check user's membership status\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n\n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  const form = useForm<CreatePlaylistFormData>({\n    resolver: zodResolver(createPlaylistFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      isPublic: true,\n      createdBy: userId || \"\",\n    },\n  });\n\n  const createPlaylistMutation = useMutation({\n    mutationFn: async (data: CreatePlaylistFormData) => {\n      return await apiRequest(\"POST\", \"/api/playlists\", data);\n    },\n    onSuccess: async (playlist) => {\n      // Clear ALL cache\n      queryClient.clear();\n      \n      toast({\n        title: \"Playlist Created\", \n        description: \"Playlist has been created successfully.\",\n      });\n      \n      // Reset form and close dialog\n      form.reset();\n      setOpen(false);\n      \n      // Force page reload after a short delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create playlist. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Failed to create playlist:\", error);\n    },\n  });\n\n  const onSubmit = (data: CreatePlaylistFormData) => {\n    createPlaylistMutation.mutate(data);\n  };\n\n  const handleImageUpload = (uploadURL: string) => {\n    // Convert upload URL to object path\n    const objectPath = uploadURL.replace('https://storage.googleapis.com/', '/objects/');\n    form.setValue('imageUrl', objectPath);\n    toast({\n      title: \"Image Uploaded\",\n      description: \"Playlist image has been uploaded successfully.\",\n    });\n  };\n\n  const defaultTrigger = (\n    <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\">\n      <Plus className=\"h-5 w-5 mr-2\" />\n      New Playlist\n    </Button>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild data-testid=\"button-create-playlist\">\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        {!isPremium ? (\n          // Premium Required Dialog\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Crown className=\"h-5 w-5 text-primary\" />\n                Premium Feature\n              </DialogTitle>\n              <DialogDescription>\n                Creating custom playlists is a premium feature.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-gradient-to-br from-primary/10 to-accent/10 rounded-lg\">\n                <Crown className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Upgrade to Premium</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Get access to unlimited playlist creation, premium audio controls, and more exclusive features.\n                </p>\n                <p className=\"text-lg font-bold text-primary\">\n                  Only 3.14π\n                </p>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setOpen(false)}\n                  data-testid=\"button-cancel-premium\"\n                >\n                  Maybe Later\n                </Button>\n                <Button \n                  className=\"bg-gradient-to-r from-primary to-accent text-white\"\n                  onClick={() => {\n                    setOpen(false);\n                    // TODO: Navigate to premium payment page\n                  }}\n                  data-testid=\"button-upgrade-premium\"\n                >\n                  Upgrade Now\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          // Regular Create Playlist Dialog for Premium Users\n          <>\n            <DialogHeader>\n              <DialogTitle>Create New Playlist</DialogTitle>\n              <DialogDescription>\n                Create a new playlist to organize your favorite songs.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Playlist Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"My Awesome Playlist\" \n                          {...field} \n                          data-testid=\"input-playlist-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Image Upload Field */}\n                <div className=\"space-y-2\">\n                  <FormLabel>Playlist Picture (optional)</FormLabel>\n                  <div className=\"flex items-center space-x-4\">\n                    {form.watch('imageUrl') && (\n                      <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center overflow-hidden\">\n                        <img \n                          src={form.watch('imageUrl')} \n                          alt=\"Playlist cover\" \n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    )}\n                    <ObjectUploader\n                      onComplete={handleImageUpload}\n                      maxFileSize={5242880} // 5MB\n                      buttonClassName=\"flex items-center gap-2\"\n                    >\n                      <ImagePlus className=\"h-4 w-4\" />\n                      {form.watch('imageUrl') ? 'Change Picture' : 'Add Picture'}\n                    </ObjectUploader>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Upload a cover image for your playlist (max 5MB)\n                  </p>\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe your playlist...\" \n                          rows={3}\n                          {...field} \n                          data-testid=\"input-playlist-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"isPublic\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Public Playlist</FormLabel>\n                        <div className=\"text-[0.8rem] text-muted-foreground\">\n                          Make this playlist visible to other users\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value || false}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-playlist-public\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setOpen(false)}\n                    data-testid=\"button-cancel-playlist\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createPlaylistMutation.isPending}\n                    data-testid=\"button-submit-playlist\"\n                  >\n                    {createPlaylistMutation.isPending ? \"Creating...\" : \"Create Playlist\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10604},"client/src/components/music/song-options-menu.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Plus, MoreHorizontal, Music, Crown, Lock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type SongWithDetails, type Playlist, type Membership } from \"@shared/schema\";\n\ninterface SongOptionsMenuProps {\n  song: SongWithDetails;\n  className?: string;\n}\n\nexport default function SongOptionsMenu({ song, className = \"\" }: SongOptionsMenuProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const userId = user?.uid;\n\n  // Get user's membership status\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: !!userId,\n  });\n  \n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  // Check if song is liked\n  const { data: likeStatus } = useQuery<{ isLiked: boolean }>({\n    queryKey: ['/api/liked-songs', song.id, 'check'],\n  });\n\n  // Get all playlists for adding song\n  const { data: allPlaylists } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists\"],\n  });\n\n  // Get user's created playlists\n  const { data: userPlaylists } = useQuery<Playlist[]>({\n    queryKey: [\"/api/playlists/user\", userId],\n    enabled: !!userId,\n  });\n\n  // Combine all playlists and user playlists, removing duplicates\n  const playlists = React.useMemo(() => {\n    const combined = [...(allPlaylists || []), ...(userPlaylists || [])];\n    // Remove duplicates by id\n    const uniquePlaylists = combined.filter((playlist, index, self) => \n      index === self.findIndex(p => p.id === playlist.id)\n    );\n    return uniquePlaylists;\n  }, [allPlaylists, userPlaylists]);\n\n  const isLiked = likeStatus?.isLiked || false;\n\n  // Like/unlike mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      if (!isPremium) {\n        throw new Error(\"Premium feature required. Upgrade to Premium to like songs!\");\n      }\n      if (isLiked) {\n        await apiRequest(\"DELETE\", `/api/liked-songs/${song.id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/liked-songs\", { songId: song.id });\n      }\n    },\n    onSuccess: () => {\n      // Invalidate like status for this song\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/liked-songs', song.id, 'check'] \n      });\n      // Invalidate liked songs list\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/liked-songs'] \n      });\n      \n      toast({\n        title: isLiked ? \"Removed from Liked Songs\" : \"Added to Liked Songs\",\n        description: isLiked ? `${song.title} removed from your liked songs` : `${song.title} added to your liked songs`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Like song error:\", error);\n      const message = error?.message || \"Failed to update liked songs\";\n      if (message.includes(\"Premium feature required\")) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"Liking songs is a premium feature. Upgrade to Premium for only 3.14π!\",\n          variant: \"default\",\n          action: (\n            <div className=\"flex items-center gap-1 text-primary\">\n              <Crown className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Upgrade</span>\n            </div>\n          ),\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Add to playlist mutation\n  const addToPlaylistMutation = useMutation({\n    mutationFn: async (playlistId: string) => {\n      // Get playlist details to find next position\n      const playlistResponse = await apiRequest(\"GET\", `/api/playlists/${playlistId}`);\n      const playlist = await playlistResponse.json();\n      const nextPosition = (playlist.songs?.length || 0) + 1;\n      \n      await apiRequest(\"POST\", `/api/playlists/${playlistId}/songs`, {\n        songId: song.id,\n        position: nextPosition,\n      });\n    },\n    onSuccess: (_, playlistId) => {\n      // Invalidate playlist data to show new song\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/playlists\", playlistId] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/playlists\"] \n      });\n      // Invalidate user playlists to update song count on profile  \n      queryClient.removeQueries({ \n        queryKey: [\"/api/playlists/user\", \"demo-user-123\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/playlists/user\"] \n      });\n      \n      toast({\n        title: \"Added to Playlist\",\n        description: `${song.title} has been added to the playlist.`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Add to playlist error:\", error);\n      const message = error?.message || \"Failed to add song to playlist\";\n      if (message.includes(\"Premium feature required\")) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"Adding songs to playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n          variant: \"default\",\n          action: (\n            <div className=\"flex items-center gap-1 text-primary\">\n              <Crown className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Upgrade</span>\n            </div>\n          ),\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleAddToPlaylist = (playlistId: string) => {\n    addToPlaylistMutation.mutate(playlistId);\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          className={`p-2 text-muted-foreground hover:text-foreground ${className}`}\n          data-testid={`button-song-options-${song.id}`}\n        >\n          <MoreHorizontal className=\"h-4 w-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\">\n        <DropdownMenuLabel>Song Options</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        {/* Like/Unlike Option */}\n        <DropdownMenuItem \n          onClick={() => {\n            if (!isPremium) {\n              toast({\n                title: \"Premium Feature\",\n                description: \"Liking songs is a premium feature. Upgrade to Premium for only 3.14π!\",\n                variant: \"default\",\n                action: (\n                  <div className=\"flex items-center gap-1 text-primary\">\n                    <Crown className=\"h-3 w-3\" />\n                    <span className=\"text-xs\">Upgrade</span>\n                  </div>\n                ),\n              });\n              return;\n            }\n            likeMutation.mutate();\n          }}\n          disabled={likeMutation.isPending}\n          className={`cursor-pointer ${!isPremium ? 'opacity-50' : ''}`}\n          data-testid={`option-like-${song.id}`}\n        >\n          {!isPremium ? (\n            <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          ) : (\n            <Heart className={`mr-2 h-4 w-4 ${isLiked ? 'fill-current text-red-500' : ''}`} />\n          )}\n          {!isPremium ? \"Add to Liked Songs\" : (isLiked ? \"Remove from Liked Songs\" : \"Add to Liked Songs\")}\n          {!isPremium && <Crown className=\"ml-auto h-3 w-3 text-primary\" />}\n        </DropdownMenuItem>\n\n        <DropdownMenuSeparator />\n\n        {/* Add to Playlist Submenu */}\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger \n            className={`${!isPremium ? 'opacity-50' : ''}`}\n            data-testid={`option-add-to-playlist-${song.id}`}\n          >\n            {!isPremium ? (\n              <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n            ) : (\n              <Plus className=\"mr-2 h-4 w-4\" />\n            )}\n            Add to Playlist\n            {!isPremium && <Crown className=\"ml-auto h-3 w-3 text-primary\" />}\n          </DropdownMenuSubTrigger>\n          <DropdownMenuSubContent>\n            {!isPremium ? (\n              <DropdownMenuItem \n                onClick={() => {\n                  toast({\n                    title: \"Premium Feature\",\n                    description: \"Adding songs to playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n                    variant: \"default\",\n                    action: (\n                      <div className=\"flex items-center gap-1 text-primary\">\n                        <Crown className=\"h-3 w-3\" />\n                        <span className=\"text-xs\">Upgrade</span>\n                      </div>\n                    ),\n                  });\n                }}\n                className=\"cursor-pointer opacity-50\"\n              >\n                <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                Premium Required\n                <Crown className=\"ml-auto h-3 w-3 text-primary\" />\n              </DropdownMenuItem>\n            ) : (\n              <>\n                {playlists && playlists.length > 0 ? (\n                  playlists.map((playlist) => (\n                    <DropdownMenuItem\n                      key={playlist.id}\n                      onClick={() => handleAddToPlaylist(playlist.id)}\n                      disabled={addToPlaylistMutation.isPending}\n                      className=\"cursor-pointer\"\n                      data-testid={`option-playlist-${playlist.id}`}\n                    >\n                      <Music className=\"mr-2 h-4 w-4\" />\n                      {playlist.name}\n                    </DropdownMenuItem>\n                  ))\n                ) : (\n                  <DropdownMenuItem disabled>\n                    <Music className=\"mr-2 h-4 w-4\" />\n                    No playlists available\n                  </DropdownMenuItem>\n                )}\n              </>\n            )}\n          </DropdownMenuSubContent>\n        </DropdownMenuSub>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":10470},"client/src/pages/edit-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Save, Camera } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Membership } from \"@shared/schema\";\nimport { ObjectUploader } from \"@/components/object-uploader\";\n\nconst editProfileSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(50, \"Name must be less than 50 characters\"),\n});\n\ntype EditProfileForm = z.infer<typeof editProfileSchema>;\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  nickname?: string;\n}\n\nexport default function EditProfilePage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user, userId, isAuthenticated } = useAuth();\n\n  // Fetch current user data\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', userId],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userProfile, isLoading } = useQuery<UserProfile>({\n    queryKey: ['/api/profile', userId],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<EditProfileForm>({\n    resolver: zodResolver(editProfileSchema),\n    defaultValues: {\n      name: userProfile?.name || \"\",\n    },\n  });\n\n  // Update form when user data loads\n  useState(() => {\n    if (userProfile) {\n      form.setValue(\"name\", userProfile.name);\n    }\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: EditProfileForm) => {\n      return await apiRequest(\"PUT\", `/api/profile/${userId}`, {\n        name: data.name,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/profile', userId] });\n      setLocation(\"/profile\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAvatarMutation = useMutation({\n    mutationFn: async (avatarURL: string) => {\n      return await apiRequest(\"PUT\", `/api/profile/${userId}/avatar`, {\n        avatarURL,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Avatar Updated\",\n        description: \"Your profile picture has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/profile', userId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to update your profile picture. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditProfileForm) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleAvatarUploadComplete = (uploadURL: string) => {\n    updateAvatarMutation.mutate(uploadURL);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-md mx-auto bg-background min-h-screen p-4\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto bg-background min-h-screen pb-44\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={() => setLocation(\"/profile\")}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-6 w-6\" />\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Edit Profile</h1>\n        <div className=\"w-10\" />\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Profile Picture Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Profile Picture</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-col items-center space-y-4\">\n            <div className=\"relative\">\n              <Avatar className=\"w-24 h-24\">\n                <AvatarImage src={userProfile?.imageUrl || ''} />\n                <AvatarFallback className=\"bg-primary/20 text-lg\">\n                  {userProfile?.name?.charAt(0)?.toUpperCase() || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              \n              <ObjectUploader\n                maxFileSize={5242880} // 5MB\n                onComplete={handleAvatarUploadComplete}\n                buttonClassName=\"absolute -bottom-1 -right-1 bg-primary hover:bg-primary/90 rounded-full p-2 border-2 border-background\"\n              >\n                <Camera className=\"h-4 w-4\" />\n              </ObjectUploader>\n            </div>\n            \n            {updateAvatarMutation.isPending && (\n              <p className=\"text-sm text-muted-foreground text-center\">\n                Uploading profile picture...\n              </p>\n            )}\n            {!updateAvatarMutation.isPending && (\n              <p className=\"text-sm text-muted-foreground text-center\">\n                Click the camera icon to upload a new profile picture\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Profile Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Display Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your display name\" \n                          data-testid=\"input-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setLocation(\"/profile\")}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={updateProfileMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {updateProfileMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"mr-2 h-4 w-4\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Account Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">User ID</label>\n              <p className=\"text-sm font-mono bg-muted px-2 py-1 rounded\">{userId}</p>\n            </div>\n            \n            {membership && (\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Membership</label>\n                <p className=\"text-sm\">\n                  {membership.isPremium ? (\n                    <span className=\"text-amber-600 font-medium\">Premium Member</span>\n                  ) : (\n                    <span className=\"text-muted-foreground\">Free User</span>\n                  )}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9015},"client/src/components/object-uploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ObjectUploaderProps {\n  maxFileSize?: number;\n  onComplete?: (uploadURL: string) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A simple file upload component that uses native file input and uploads directly to object storage.\n */\nexport function ObjectUploader({\n  maxFileSize = 10485760, // 10MB default\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > maxFileSize) {\n      toast({\n        title: \"File too large\",\n        description: `File size must be less than ${Math.round(maxFileSize / 1024 / 1024)}MB`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Get upload URL from server\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      const data = await response.json();\n      \n      // Upload file directly to object storage\n      const uploadResponse = await fetch(data.uploadURL, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          'Content-Type': file.type,\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Upload failed');\n      }\n\n      toast({\n        title: \"Upload Successful\",\n        description: \"Your file has been uploaded successfully.\",\n      });\n\n      onComplete?.(data.uploadURL);\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        style={{ display: 'none' }}\n        data-testid=\"input-file-upload\"\n      />\n      <Button \n        onClick={() => fileInputRef.current?.click()} \n        className={buttonClassName}\n        disabled={isUploading}\n        data-testid=\"button-upload-trigger\"\n      >\n        {isUploading ? (\n          <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n        ) : (\n          children\n        )}\n      </Button>\n    </div>\n  );\n}\n","size_bytes":2897},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl.js\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8411},"server/storage-old.ts":{"content":"import { \n  type Artist, type Album, type Song, type Playlist, type PlaylistSong, type LikedSong, type Membership, type PiPayment, type Profile,\n  type InsertArtist, type InsertAlbum, type InsertSong, type InsertPlaylist, type InsertPlaylistSong, type InsertLikedSong, type InsertMembership, type InsertPiPayment, type InsertProfile,\n  type SongWithDetails, type AlbumWithDetails, type PlaylistWithDetails, type PlaylistWithAmbient,\n  type AmbientMusicSetting, type InsertAmbientMusicSetting,\n  artists, albums, songs, playlists, playlistSongs, likedSongs, memberships, piPayments, ambientMusicSettings, profiles\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, ilike, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Artists\n  getArtists(): Promise<Artist[]>;\n  getArtist(id: string): Promise<Artist | undefined>;\n  createArtist(artist: InsertArtist): Promise<Artist>;\n\n  // Albums\n  getAlbums(): Promise<Album[]>;\n  getAlbum(id: string): Promise<Album | undefined>;\n  getAlbumsByArtist(artistId: string): Promise<Album[]>;\n  createAlbum(album: InsertAlbum): Promise<Album>;\n\n  // Songs\n  getSongs(): Promise<Song[]>;\n  getSong(id: string): Promise<Song | undefined>;\n  getSongsByAlbum(albumId: string): Promise<Song[]>;\n  getSongsByArtist(artistId: string): Promise<Song[]>;\n  searchSongs(query: string): Promise<SongWithDetails[]>;\n  getRecentlyPlayed(): Promise<SongWithDetails[]>;\n  getTrendingSongs(): Promise<SongWithDetails[]>;\n  createSong(song: InsertSong): Promise<Song>;\n  incrementPlayCount(songId: string): Promise<void>;\n\n  // Playlists\n  getPlaylists(): Promise<Playlist[]>;\n  getPlaylist(id: string): Promise<Playlist | undefined>;\n  getUserPlaylists(userId: string): Promise<Playlist[]>;\n  getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined>;\n  createPlaylist(playlist: InsertPlaylist): Promise<Playlist>;\n  addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong>;\n  removeSongFromPlaylist(playlistId: string, songId: string): Promise<void>;\n\n  // Liked Songs\n  getLikedSongs(): Promise<SongWithDetails[]>;\n  likeSong(data: InsertLikedSong): Promise<LikedSong>;\n  unlikeSong(songId: string): Promise<void>;\n  isSongLiked(songId: string): Promise<boolean>;\n\n  // User Profile\n  getUserProfile(userId: string): Promise<Profile | undefined>;\n  updateUserProfile(userId: string, data: { name?: string; nickname?: string; imageUrl?: string }): Promise<Profile | undefined>;\n  createUserProfile(profile: InsertProfile): Promise<Profile>;\n\n  // Memberships\n  getMembership(userId: string): Promise<Membership | undefined>;\n  createMembership(membership: InsertMembership): Promise<Membership>;\n  updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined>;\n  \n  // Pi Payments\n  createPiPayment(payment: InsertPiPayment): Promise<PiPayment>;\n  getPiPayment(paymentId: string): Promise<PiPayment | undefined>;\n  updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined>;\n  getPiPaymentsByUser(userId: string): Promise<PiPayment[]>;\n  \n  // Ambient Music\n  generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting>;\n  getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined>;\n  updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private artists: Map<string, Artist> = new Map();\n  private albums: Map<string, Album> = new Map();\n  private songs: Map<string, Song> = new Map();\n  private playlists: Map<string, Playlist> = new Map();\n  private playlistSongs: Map<string, PlaylistSong> = new Map();\n  private likedSongs: Map<string, LikedSong> = new Map();\n  private memberships: Map<string, Membership> = new Map();\n  private piPayments: Map<string, PiPayment> = new Map();\n  private ambientSettings: Map<string, AmbientMusicSetting> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n\n  private seedData() {\n    // Create 80s artists\n    const artist1: Artist = {\n      id: \"artist-1\",\n      name: \"Synth Masters\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Legendary 80s synthpop artists behind classics like Take On Me\",\n      createdAt: new Date(),\n    };\n\n    const artist2: Artist = {\n      id: \"artist-2\",\n      name: \"New Wave Kings\",\n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"New wave pioneers who defined the sound of the 80s\",\n      createdAt: new Date(),\n    };\n\n    const artist3: Artist = {\n      id: \"artist-3\",\n      name: \"Rock Anthems\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Classic rock legends behind 80s power anthems\",\n      createdAt: new Date(),\n    };\n\n    const artist4: Artist = {\n      id: \"artist-4\",\n      name: \"Pop Icons\",\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"80s pop superstars who dominated the charts\",\n      createdAt: new Date(),\n    };\n\n    const artist5: Artist = {\n      id: \"artist-5\",\n      name: \"Dance Floor\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"80s dance and disco legends who filled the dance floors\",\n      createdAt: new Date(),\n    };\n\n    const artist6: Artist = {\n      id: \"artist-6\",\n      name: \"Electronic Dreams\",\n      imageUrl: \"https://images.unsplash.com/photo-1515552726023-7125c8d07fb3?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic pioneers who shaped the 80s sound\",\n      createdAt: new Date(),\n    };\n\n    const artist7: Artist = {\n      id: \"artist-7\",\n      name: \"Jazz Fusion Squad\",\n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Contemporary jazz fusion with urban influences\",\n      createdAt: new Date(),\n    };\n\n    const artist8: Artist = {\n      id: \"artist-8\",\n      name: \"Acoustic Dreams\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Folk acoustic duo with heartfelt storytelling\",\n      createdAt: new Date(),\n    };\n\n    // New artists for new music collection\n    const artist9: Artist = {\n      id: \"artist-9\", \n      name: \"Dylan Sitts\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Contemporary hip-hop artist with energetic beats\",\n      createdAt: new Date(),\n    };\n\n    const artist10: Artist = {\n      id: \"artist-10\",\n      name: \"Nbhd Nick\", \n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Hip-hop producer creating smooth instrumental beats\",\n      createdAt: new Date(),\n    };\n\n    const artist11: Artist = {\n      id: \"artist-11\",\n      name: \"Speedy The Spider\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\", \n      bio: \"Alternative rock band with distinctive sound\",\n      createdAt: new Date(),\n    };\n\n    const artist12: Artist = {\n      id: \"artist-12\",\n      name: \"Mia Lailani\",\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Pop artist with ethereal vocals and dreamy melodies\",\n      createdAt: new Date(),\n    };\n\n    const artist13: Artist = {\n      id: \"artist-13\", \n      name: \"John Runefelt\",\n      imageUrl: \"https://images.unsplash.com/photo-1515552726023-7125c8d07fb3?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic dance music producer with high-energy tracks\",\n      createdAt: new Date(),\n    };\n\n    const artist14: Artist = {\n      id: \"artist-14\",\n      name: \"Maybe\",\n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Chill ambient artist creating relaxing soundscapes\",\n      createdAt: new Date(),\n    };\n\n    const artist15: Artist = {\n      id: \"artist-15\",\n      name: \"Scientific\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic music innovator with scientific precision\",\n      createdAt: new Date(),\n    };\n\n    const artist16: Artist = {\n      id: \"artist-16\", \n      name: \"Loving Caliber\",\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Pop dance duo creating infectious rhythms\", \n      createdAt: new Date(),\n    };\n\n    const artist17: Artist = {\n      id: \"artist-17\",\n      name: \"Bankston\",\n      imageUrl: \"https://images.unsplash.com/photo-1515552726023-7125c8d07fb3?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Pop electronic artist with catchy hooks\",\n      createdAt: new Date(),\n    };\n\n    const artist18: Artist = {\n      id: \"artist-18\",\n      name: \"Daniel Fridell\", \n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Funk soul artist with groovy retro vibes\",\n      createdAt: new Date(),\n    };\n\n    const artist19: Artist = {\n      id: \"artist-19\",\n      name: \"PW\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Feel-good pop producer creating uplifting tracks\",\n      createdAt: new Date(),\n    };\n\n    this.artists.set(artist1.id, artist1);\n    this.artists.set(artist2.id, artist2);\n    this.artists.set(artist3.id, artist3);\n    this.artists.set(artist4.id, artist4);\n    this.artists.set(artist5.id, artist5);\n    this.artists.set(artist6.id, artist6);\n    this.artists.set(artist7.id, artist7);\n    this.artists.set(artist8.id, artist8);\n    this.artists.set(artist9.id, artist9);\n    this.artists.set(artist10.id, artist10);\n    this.artists.set(artist11.id, artist11);\n    this.artists.set(artist12.id, artist12);\n    this.artists.set(artist13.id, artist13);\n    this.artists.set(artist14.id, artist14);\n    this.artists.set(artist15.id, artist15);\n    this.artists.set(artist16.id, artist16);\n    this.artists.set(artist17.id, artist17);\n    this.artists.set(artist18.id, artist18);\n    this.artists.set(artist19.id, artist19);\n\n    // Create 80s albums\n    const album1: Album = {\n      id: \"album-1\",\n      title: \"80s Synth Classics\",\n      artistId: artist1.id,\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"1983-01-15\"),\n      genre: \"Synthpop\",\n      createdAt: new Date(),\n    };\n\n    const album2: Album = {\n      id: \"album-2\",\n      title: \"New Wave Hits\",\n      artistId: artist2.id,\n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"1984-02-20\"),\n      genre: \"New Wave\",\n      createdAt: new Date(),\n    };\n\n    const album3: Album = {\n      id: \"album-3\",\n      title: \"Indie Dreams\",\n      artistId: artist3.id,\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-03-10\"),\n      genre: \"Indie Rock\",\n      createdAt: new Date(),\n    };\n\n    const album4: Album = {\n      id: \"album-4\",\n      title: \"Cosmic Journeys\",\n      artistId: artist4.id,\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-04-05\"),\n      genre: \"Ambient\",\n      createdAt: new Date(),\n    };\n\n    const album5: Album = {\n      id: \"album-5\",\n      title: \"Sunshine Melodies\",\n      artistId: artist5.id,\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-05-20\"),\n      genre: \"Pop\",\n      createdAt: new Date(),\n    };\n\n    const album6: Album = {\n      id: \"album-6\",\n      title: \"Purple Horizons\",\n      artistId: artist6.id,\n      imageUrl: \"https://images.unsplash.com/photo-1515552726023-7125c8d07fb3?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-06-15\"),\n      genre: \"Progressive Rock\",\n      createdAt: new Date(),\n    };\n\n    const album7: Album = {\n      id: \"album-7\",\n      title: \"Urban Jazz\",\n      artistId: artist7.id,\n      imageUrl: \"https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-07-12\"),\n      genre: \"Jazz Fusion\",\n      createdAt: new Date(),\n    };\n\n    const album8: Album = {\n      id: \"album-8\",\n      title: \"Folk Stories\",\n      artistId: artist8.id,\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      releaseDate: new Date(\"2024-08-08\"),\n      genre: \"Folk\",\n      createdAt: new Date(),\n    };\n\n    // New albums for new music collection  \n    const album9: Album = {\n      id: \"album-9\",\n      title: \"Fourth Quarter\",\n      artistId: artist9.id,\n      imageUrl: \"/public-objects/generated_images/Fourth_Quarter_hip-hop_cover_5dea36a1.png\",\n      releaseDate: new Date(\"2024-09-01\"),\n      genre: \"Hip-hop\",\n      createdAt: new Date(),\n    };\n\n    const album10: Album = {\n      id: \"album-10\", \n      title: \"Lock In Instrumentals\",\n      artistId: artist10.id,\n      imageUrl: \"/public-objects/generated_images/Lock_In_instrumental_cover_8f7c0b20.png\",\n      releaseDate: new Date(\"2024-09-02\"),\n      genre: \"Hip-hop Instrumental\",\n      createdAt: new Date(),\n    };\n\n    const album11: Album = {\n      id: \"album-11\",\n      title: \"Sand Reflections\", \n      artistId: artist11.id,\n      imageUrl: \"/public-objects/generated_images/Head_in_Sand_rock_cover_a276f79a.png\",\n      releaseDate: new Date(\"2024-09-03\"),\n      genre: \"Alternative Rock\",\n      createdAt: new Date(),\n    };\n\n    const album12: Album = {\n      id: \"album-12\",\n      title: \"Never Know\",\n      artistId: artist12.id,\n      imageUrl: \"/public-objects/generated_images/You'll_Never_Know_pop_cover_ab9b25f6.png\",\n      releaseDate: new Date(\"2024-09-04\"),\n      genre: \"Pop Instrumental\",\n      createdAt: new Date(),\n    };\n\n    const album13: Album = {\n      id: \"album-13\",\n      title: \"Electronic Minutes\",\n      artistId: artist13.id,\n      imageUrl: \"/public-objects/generated_images/In_a_Minute_electronic_cover_31864d9a.png\",\n      releaseDate: new Date(\"2024-09-05\"),\n      genre: \"Electronic Dance\",\n      createdAt: new Date(),\n    };\n\n    const album14: Album = {\n      id: \"album-14\",\n      title: \"Poolside Sessions\",\n      artistId: artist14.id,\n      imageUrl: \"/public-objects/generated_images/Poolside_chill_cover_e3ed8e8b.png\",\n      releaseDate: new Date(\"2024-09-06\"),\n      genre: \"Chill Ambient\",\n      createdAt: new Date(),\n    };\n\n    const album15: Album = {\n      id: \"album-15\",\n      title: \"Flow Science\",\n      artistId: artist15.id,\n      imageUrl: \"/public-objects/generated_images/Let_It_Flow_scientific_cover_b61fe5da.png\",\n      releaseDate: new Date(\"2024-09-07\"),\n      genre: \"Electronic\",\n      createdAt: new Date(),\n    };\n\n    const album16: Album = {\n      id: \"album-16\",\n      title: \"Move Collection\",\n      artistId: artist16.id,\n      imageUrl: \"/public-objects/generated_images/Move_dance_pop_cover_95fe4ff8.png\",\n      releaseDate: new Date(\"2024-09-08\"),\n      genre: \"Pop Dance\",\n      createdAt: new Date(),\n    };\n\n    const album17: Album = {\n      id: \"album-17\",\n      title: \"Head Songs\",\n      artistId: artist17.id,\n      imageUrl: \"/public-objects/generated_images/Stuck_in_Head_electronic_cover_2f45e7c5.png\",\n      releaseDate: new Date(\"2024-09-09\"),\n      genre: \"Pop Electronic\",\n      createdAt: new Date(),\n    };\n\n    const album18: Album = {\n      id: \"album-18\",\n      title: \"Special Sauce\",\n      artistId: artist18.id,\n      imageUrl: \"/public-objects/generated_images/Special_Sauce_funk_cover_5e6a45c9.png\",\n      releaseDate: new Date(\"2024-09-10\"),\n      genre: \"Funk Soul\",\n      createdAt: new Date(),\n    };\n\n    const album19: Album = {\n      id: \"album-19\",\n      title: \"Feel Good Vibes\",\n      artistId: artist19.id,\n      imageUrl: \"/public-objects/generated_images/Feel_Good_pop_cover_7a778486.png\",\n      releaseDate: new Date(\"2024-09-11\"),\n      genre: \"Feel-good Pop\",\n      createdAt: new Date(),\n    };\n\n    this.albums.set(album1.id, album1);\n    this.albums.set(album2.id, album2);\n    this.albums.set(album3.id, album3);\n    this.albums.set(album4.id, album4);\n    this.albums.set(album5.id, album5);\n    this.albums.set(album6.id, album6);\n    this.albums.set(album7.id, album7);\n    this.albums.set(album8.id, album8);\n    this.albums.set(album9.id, album9);\n    this.albums.set(album10.id, album10);\n    this.albums.set(album11.id, album11);\n    this.albums.set(album12.id, album12);\n    this.albums.set(album13.id, album13);\n    this.albums.set(album14.id, album14);\n    this.albums.set(album15.id, album15);\n    this.albums.set(album16.id, album16);\n    this.albums.set(album17.id, album17);\n    this.albums.set(album18.id, album18);\n    this.albums.set(album19.id, album19);\n\n    // Create 30 iconic 80s hits\n    const songs: Song[] = [\n      // Synth Masters - 80s Synth Classics\n      {\n        id: \"song-1\",\n        title: \"The Only Way Out\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 180, // Estimate 3:00\n        audioUrl: \"/audio/electronic/the-only-way-out.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 1500000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-2\",\n        title: \"Deepstar\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 200, // 3:20\n        audioUrl: \"/audio/electronic/deepstar.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 1200000,\n        createdAt: new Date(),\n        trackNumber: 2,\n      },\n      {\n        id: \"song-3\",\n        title: \"One Step Away\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 180, // 3:00\n        audioUrl: \"/audio/electronic/one-step-away.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 980000,\n        createdAt: new Date(),\n        trackNumber: 3,\n      },\n      {\n        id: \"song-4\",\n        title: \"Symmetry\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 185, // 3:05\n        audioUrl: \"/audio/electronic/symmetry.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 920000,\n        createdAt: new Date(),\n        trackNumber: 4,\n      },\n      {\n        id: \"song-5\",\n        title: \"Champions of Freedom\",\n        artistId: artist1.id, // Synth Masters\n        albumId: album1.id,\n        duration: 195, // 3:15\n        audioUrl: \"/audio/synthpop/champions-of-freedom.mp3\",\n        imageUrl: album1.imageUrl,\n        genre: \"Synthpop\",\n        playCount: 1500000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // New Wave Kings - New Wave Hits\n      {\n        id: \"song-6\",\n        title: \"Deeplight\",\n        artistId: artist4.id, // Cosmic Dreams (ambient)\n        albumId: album4.id,\n        duration: 240, // 4:00\n        audioUrl: \"/audio/ambient/deeplight.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 850000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-7\",\n        title: \"Darkest of Demons\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 210, // 3:30\n        audioUrl: \"/audio/electronic/darkest-of-demons.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 1100000,\n        createdAt: new Date(),\n        trackNumber: 5,\n      },\n      {\n        id: \"song-8\",\n        title: \"Symmetry\",\n        artistId: artist6.id, // Electronic Dreams\n        albumId: album6.id,\n        duration: 185, // 3:05\n        audioUrl: \"/audio/electronic/symmetry.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Electronic\",\n        playCount: 920000,\n        createdAt: new Date(),\n        trackNumber: 6,\n      },\n      {\n        id: \"song-9\",\n        title: \"Shadow of Mortus\",\n        artistId: artist4.id, // Cosmic Dreams (ambient)\n        albumId: album4.id,\n        duration: 220, // 3:40\n        audioUrl: \"/audio/ambient/shadow-of-mortus.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 750000,\n        createdAt: new Date(),\n        trackNumber: 2,\n      },\n      {\n        id: \"song-10\",\n        title: \"Under Open Skies and Endless Stars\",\n        artistId: artist4.id, // Cosmic Dreams (ambient)\n        albumId: album4.id,\n        duration: 280, // 4:40\n        audioUrl: \"/audio/ambient/under-open-skies.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 680000,\n        createdAt: new Date(),\n        trackNumber: 3,\n      },\n      {\n        id: \"song-11\",\n        title: \"The Firstborn\",\n        artistId: artist1.id, // Synth Masters\n        albumId: album1.id,\n        duration: 205, // 3:25\n        audioUrl: \"/audio/synthpop/the-firstborn.mp3\",\n        imageUrl: album1.imageUrl,\n        genre: \"Synthpop\",\n        playCount: 1320000,\n        createdAt: new Date(),\n        trackNumber: 2,\n      },\n      {\n        id: \"song-8\",\n        title: \"Urban Legends\",\n        artistId: artist2.id,\n        albumId: album2.id,\n        duration: 198, // 3:18\n        audioUrl: \"/audio/electronic/darkest-of-demons.mp3\",\n        imageUrl: album2.imageUrl,\n        genre: \"Hip Hop\",\n        playCount: 1420000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // The Violet Sounds - Indie Dreams Album\n      {\n        id: \"song-9\",\n        title: \"Golden Hour\",\n        artistId: artist3.id,\n        albumId: album3.id,\n        duration: 205, // 3:25\n        audioUrl: \"/audio/ambient/deeplight.mp3\",\n        imageUrl: album3.imageUrl,\n        genre: \"Indie Rock\",\n        playCount: 1750000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-10\",\n        title: \"Purple Haze Dreams\",\n        artistId: artist3.id,\n        albumId: album3.id,\n        duration: 312, // 5:12\n        audioUrl: \"/audio/ambient/shadow-of-mortus.mp3\",\n        imageUrl: album3.imageUrl,\n        genre: \"Indie Rock\",\n        playCount: 890000,\n        createdAt: new Date(),\n        trackNumber: 2,\n      },\n      {\n        id: \"song-11\",\n        title: \"Dreamy Skies\",\n        artistId: artist3.id,\n        albumId: album3.id,\n        duration: 275, // 4:35\n        audioUrl: \"/audio/ambient/under-open-skies.mp3\",\n        imageUrl: album3.imageUrl,\n        genre: \"Indie Rock\",\n        playCount: 945000,\n        createdAt: new Date(),\n        trackNumber: 3,\n      },\n      {\n        id: \"song-12\",\n        title: \"Violet Waves\",\n        artistId: artist3.id,\n        albumId: album3.id,\n        duration: 188, // 3:08\n        audioUrl: \"/audio/synthpop/champions-of-freedom.mp3\",\n        imageUrl: album3.imageUrl,\n        genre: \"Indie Rock\",\n        playCount: 780000,\n        createdAt: new Date(),\n        trackNumber: 4,\n      },\n\n      // Lunar Echo - Cosmic Journeys Album\n      {\n        id: \"song-13\",\n        title: \"Stellar Drift\",\n        artistId: artist4.id,\n        albumId: album4.id,\n        duration: 425, // 7:05\n        audioUrl: \"/audio/synthpop/the-firstborn.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 680000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-14\",\n        title: \"Moon Phases\",\n        artistId: artist4.id,\n        albumId: album4.id,\n        duration: 358, // 5:58\n        audioUrl: \"/audio/electronic/deepstar.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 520000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-15\",\n        title: \"Cosmic Meditation\",\n        artistId: artist4.id,\n        albumId: album4.id,\n        duration: 492, // 8:12\n        audioUrl: \"/audio/electronic/one-step-away.mp3\",\n        imageUrl: album4.imageUrl,\n        genre: \"Ambient\",\n        playCount: 380000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // Golden Rays - Sunshine Melodies Album\n      {\n        id: \"song-16\",\n        title: \"Sunny Days\",\n        artistId: artist5.id,\n        albumId: album5.id,\n        duration: 212, // 3:32\n        audioUrl: \"/audio/electronic/symmetry.mp3\",\n        imageUrl: album5.imageUrl,\n        genre: \"Pop\",\n        playCount: 2350000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-17\",\n        title: \"Golden Light\",\n        artistId: artist5.id,\n        albumId: album5.id,\n        duration: 195, // 3:15\n        audioUrl: \"/audio/electronic/the-only-way-out.mp3\",\n        imageUrl: album5.imageUrl,\n        genre: \"Pop\",\n        playCount: 2150000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-18\",\n        title: \"Bright Tomorrow\",\n        artistId: artist5.id,\n        albumId: album5.id,\n        duration: 228, // 3:48\n        audioUrl: \"/audio/ambient/deeplight.mp3\",\n        imageUrl: album5.imageUrl,\n        genre: \"Pop\",\n        playCount: 1980000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-19\",\n        title: \"Sunshine Serenade\",\n        artistId: artist5.id,\n        albumId: album5.id,\n        duration: 245, // 4:05\n        audioUrl: \"/audio/ambient/shadow-of-mortus.mp3\",\n        imageUrl: album5.imageUrl,\n        genre: \"Pop\",\n        playCount: 1820000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // Deep Purple Collective - Purple Horizons Album\n      {\n        id: \"song-20\",\n        title: \"Deep Waters\",\n        artistId: artist6.id,\n        albumId: album6.id,\n        duration: 385, // 6:25\n        audioUrl: \"/audio/ambient/under-open-skies.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Progressive Rock\",\n        playCount: 1125000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-21\",\n        title: \"Purple Storm\",\n        artistId: artist6.id,\n        albumId: album6.id,\n        duration: 412, // 6:52\n        audioUrl: \"/audio/synthpop/champions-of-freedom.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Progressive Rock\",\n        playCount: 995000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-22\",\n        title: \"Horizon's Edge\",\n        artistId: artist6.id,\n        albumId: album6.id,\n        duration: 298, // 4:58\n        audioUrl: \"/audio/synthpop/the-firstborn.mp3\",\n        imageUrl: album6.imageUrl,\n        genre: \"Progressive Rock\",\n        playCount: 875000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // Jazz Fusion Squad - Urban Jazz Album\n      {\n        id: \"song-23\",\n        title: \"Smooth Operator\",\n        artistId: artist7.id,\n        albumId: album7.id,\n        duration: 325, // 5:25\n        audioUrl: \"/audio/electronic/darkest-of-demons.mp3\",\n        imageUrl: album7.imageUrl,\n        genre: \"Jazz Fusion\",\n        playCount: 680000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-24\",\n        title: \"City Groove\",\n        artistId: artist7.id,\n        albumId: album7.id,\n        duration: 298, // 4:58\n        audioUrl: \"/audio/electronic/deepstar.mp3\",\n        imageUrl: album7.imageUrl,\n        genre: \"Jazz Fusion\",\n        playCount: 590000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-25\",\n        title: \"Urban Saxophone\",\n        artistId: artist7.id,\n        albumId: album7.id,\n        duration: 342, // 5:42\n        audioUrl: \"/audio/electronic/one-step-away.mp3\",\n        imageUrl: album7.imageUrl,\n        genre: \"Jazz Fusion\",\n        playCount: 445000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // Acoustic Dreams - Folk Stories Album\n      {\n        id: \"song-26\",\n        title: \"Mountain Song\",\n        artistId: artist8.id,\n        albumId: album8.id,\n        duration: 275, // 4:35\n        audioUrl: \"/audio/electronic/symmetry.mp3\",\n        imageUrl: album8.imageUrl,\n        genre: \"Folk\",\n        playCount: 720000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-27\",\n        title: \"Campfire Dreams\",\n        artistId: artist8.id,\n        albumId: album8.id,\n        duration: 212, // 3:32\n        audioUrl: \"/audio/electronic/the-only-way-out.mp3\",\n        imageUrl: album8.imageUrl,\n        genre: \"Folk\",\n        playCount: 650000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-28\",\n        title: \"Acoustic Journey\",\n        artistId: artist8.id,\n        albumId: album8.id,\n        duration: 298, // 4:58\n        audioUrl: \"/audio/ambient/deeplight.mp3\",\n        imageUrl: album8.imageUrl,\n        genre: \"Folk\",\n        playCount: 580000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-29\",\n        title: \"Folk Tales\",\n        artistId: artist8.id,\n        albumId: album8.id,\n        duration: 255, // 4:15\n        audioUrl: \"/audio/ambient/shadow-of-mortus.mp3\",\n        imageUrl: album8.imageUrl,\n        genre: \"Folk\",\n        playCount: 495000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-30\",\n        title: \"Storyteller's Song\",\n        artistId: artist8.id,\n        albumId: album8.id,\n        duration: 335, // 5:35\n        audioUrl: \"/audio/ambient/under-open-skies.mp3\",\n        imageUrl: album8.imageUrl,\n        genre: \"Folk\",\n        playCount: 425000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n\n      // New music collection - Real MP3 files\n      {\n        id: \"song-fourth-quarter\",\n        title: \"Fourth Quarter\",\n        artistId: artist9.id,\n        albumId: album9.id,\n        duration: 180,\n        audioUrl: \"/attached_assets/ES_Fourth Quarter - Dylan Sitts_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Fourth_Quarter_hip-hop_cover_5dea36a1.png\",\n        genre: \"Hip-hop\",\n        playCount: 15000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-lock-in\",\n        title: \"Lock In (Instrumental Version)\",\n        artistId: artist10.id,\n        albumId: album10.id,\n        duration: 195,\n        audioUrl: \"/attached_assets/ES_Lock In (Instrumental Version) - Nbhd Nick_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Lock_In_instrumental_cover_8f7c0b20.png\",\n        genre: \"Hip-hop Instrumental\",\n        playCount: 12000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-keeping-head-sand\",\n        title: \"Keeping My Head in the Sand\",\n        artistId: artist11.id,\n        albumId: album11.id,\n        duration: 205,\n        audioUrl: \"/attached_assets/ES_Keeping My Head in the Sand - Speedy The Spider_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Head_in_Sand_rock_cover_a276f79a.png\",\n        genre: \"Alternative Rock\",\n        playCount: 8500,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-never-know\",\n        title: \"You'll Never Know (Instrumental Version)\",\n        artistId: artist12.id,\n        albumId: album12.id,\n        duration: 220,\n        audioUrl: \"/attached_assets/ES_You'll Never Know (Instrumental Version) - Mia Lailani_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/You'll_Never_Know_pop_cover_ab9b25f6.png\",\n        genre: \"Pop Instrumental\",\n        playCount: 9500,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-in-minute\",\n        title: \"In a Minute\",\n        artistId: artist13.id,\n        albumId: album13.id,\n        duration: 185,\n        audioUrl: \"/attached_assets/ES_In a Minute - John Runefelt_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/In_a_Minute_electronic_cover_31864d9a.png\",\n        genre: \"Electronic Dance\",\n        playCount: 11000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-poolside\",\n        title: \"Poolside (Instrumental Version)\",\n        artistId: artist14.id,\n        albumId: album14.id,\n        duration: 200,\n        audioUrl: \"/attached_assets/ES_Poolside (Instrumental Version) - Maybe_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Poolside_chill_cover_e3ed8e8b.png\",\n        genre: \"Chill Ambient\",\n        playCount: 7500,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-let-flow\",\n        title: \"Let It Flow\",\n        artistId: artist15.id,\n        albumId: album15.id,\n        duration: 210,\n        audioUrl: \"/attached_assets/ES_Let It Flow - Scientific_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Let_It_Flow_scientific_cover_b61fe5da.png\",\n        genre: \"Electronic\",\n        playCount: 13500,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-move\",\n        title: \"Move (Instrumental Version)\",\n        artistId: artist16.id,\n        albumId: album16.id,\n        duration: 175,\n        audioUrl: \"/attached_assets/ES_Move (Instrumental Version) - Loving Caliber_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Move_dance_pop_cover_95fe4ff8.png\",\n        genre: \"Pop Dance\",\n        playCount: 16000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-stuck-head\",\n        title: \"Stuck in My Head (Instrumental Version)\",\n        artistId: artist17.id,\n        albumId: album17.id,\n        duration: 190,\n        audioUrl: \"/attached_assets/ES_Stuck in My Head (Instrumental Version) - Bankston_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Stuck_in_Head_electronic_cover_2f45e7c5.png\",\n        genre: \"Pop Electronic\",\n        playCount: 14000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-special-sauce\",\n        title: \"Special Sauce\",\n        artistId: artist18.id,\n        albumId: album18.id,\n        duration: 225,\n        audioUrl: \"/attached_assets/ES_Special Sauce - Daniel Fridell_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Special_Sauce_funk_cover_5e6a45c9.png\",\n        genre: \"Funk Soul\",\n        playCount: 6500,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n      {\n        id: \"song-feel-good\",\n        title: \"Feel Good (Instrumental Version)\",\n        artistId: artist19.id,\n        albumId: album19.id,\n        duration: 195,\n        audioUrl: \"/attached_assets/ES_Feel Good (Instrumental Version) - PW_1756913296915.mp3\",\n        imageUrl: \"/public-objects/generated_images/Feel_Good_pop_cover_7a778486.png\",\n        genre: \"Feel-good Pop\",\n        playCount: 18000,\n        createdAt: new Date(),\n        trackNumber: 1,\n      },\n    ];\n\n    songs.forEach(song => this.songs.set(song.id, song));\n\n    // Create sample playlists\n    const playlist1: Playlist = {\n      id: \"playlist-1\",\n      name: \"Daily Mix 1\",\n      description: \"Your daily dose of favorites\",\n      imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      isPublic: true,\n      songCount: 8,\n      createdAt: new Date(),\n    };\n\n    const playlist2: Playlist = {\n      id: \"playlist-2\",\n      name: \"Discover Weekly\",\n      description: \"Fresh finds for you\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      isPublic: true,\n      songCount: 6,\n      createdAt: new Date(),\n    };\n\n    const playlist3: Playlist = {\n      id: \"playlist-3\",\n      name: \"Purple Vibes\",\n      description: \"All things purple and gold\",\n      imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      isPublic: true,\n      songCount: 10,\n      createdAt: new Date(),\n    };\n\n    const playlist4: Playlist = {\n      id: \"playlist-4\",\n      name: \"Chill Ambient\",\n      description: \"Relaxing cosmic soundscapes\",\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      isPublic: true,\n      songCount: 5,\n      createdAt: new Date(),\n    };\n\n    const playlist5: Playlist = {\n      id: \"playlist-5\",\n      name: \"Top Hits\",\n      description: \"Most popular songs right now\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      isPublic: true,\n      songCount: 7,\n      createdAt: new Date(),\n    };\n\n    this.playlists.set(playlist1.id, playlist1);\n    this.playlists.set(playlist2.id, playlist2);\n    this.playlists.set(playlist3.id, playlist3);\n    this.playlists.set(playlist4.id, playlist4);\n    this.playlists.set(playlist5.id, playlist5);\n\n    // Add songs to playlists\n    const playlistSongs: PlaylistSong[] = [\n      // Daily Mix 1 - Popular diverse tracks\n      { id: \"ps-1\", playlistId: playlist1.id, songId: \"song-1\", position: 1, addedAt: new Date() },\n      { id: \"ps-2\", playlistId: playlist1.id, songId: \"song-5\", position: 2, addedAt: new Date() },\n      { id: \"ps-3\", playlistId: playlist1.id, songId: \"song-9\", position: 3, addedAt: new Date() },\n      { id: \"ps-4\", playlistId: playlist1.id, songId: \"song-16\", position: 4, addedAt: new Date() },\n      { id: \"ps-5\", playlistId: playlist1.id, songId: \"song-17\", position: 5, addedAt: new Date() },\n      { id: \"ps-6\", playlistId: playlist1.id, songId: \"song-20\", position: 6, addedAt: new Date() },\n      { id: \"ps-7\", playlistId: playlist1.id, songId: \"song-6\", position: 7, addedAt: new Date() },\n      { id: \"ps-8\", playlistId: playlist1.id, songId: \"song-18\", position: 8, addedAt: new Date() },\n\n      // Discover Weekly - Fresh new tracks\n      { id: \"ps-9\", playlistId: playlist2.id, songId: \"song-13\", position: 1, addedAt: new Date() },\n      { id: \"ps-10\", playlistId: playlist2.id, songId: \"song-23\", position: 2, addedAt: new Date() },\n      { id: \"ps-11\", playlistId: playlist2.id, songId: \"song-26\", position: 3, addedAt: new Date() },\n      { id: \"ps-12\", playlistId: playlist2.id, songId: \"song-14\", position: 4, addedAt: new Date() },\n      { id: \"ps-13\", playlistId: playlist2.id, songId: \"song-28\", position: 5, addedAt: new Date() },\n      { id: \"ps-14\", playlistId: playlist2.id, songId: \"song-25\", position: 6, addedAt: new Date() },\n\n      // Purple Vibes - Purple/violet themed songs\n      { id: \"ps-15\", playlistId: playlist3.id, songId: \"song-7\", position: 1, addedAt: new Date() },\n      { id: \"ps-16\", playlistId: playlist3.id, songId: \"song-10\", position: 2, addedAt: new Date() },\n      { id: \"ps-17\", playlistId: playlist3.id, songId: \"song-12\", position: 3, addedAt: new Date() },\n      { id: \"ps-18\", playlistId: playlist3.id, songId: \"song-21\", position: 4, addedAt: new Date() },\n      { id: \"ps-19\", playlistId: playlist3.id, songId: \"song-22\", position: 5, addedAt: new Date() },\n      { id: \"ps-20\", playlistId: playlist3.id, songId: \"song-11\", position: 6, addedAt: new Date() },\n      { id: \"ps-21\", playlistId: playlist3.id, songId: \"song-9\", position: 7, addedAt: new Date() },\n      { id: \"ps-22\", playlistId: playlist3.id, songId: \"song-8\", position: 8, addedAt: new Date() },\n      { id: \"ps-23\", playlistId: playlist3.id, songId: \"song-6\", position: 9, addedAt: new Date() },\n      { id: \"ps-24\", playlistId: playlist3.id, songId: \"song-19\", position: 10, addedAt: new Date() },\n\n      // Chill Ambient - Relaxing tracks\n      { id: \"ps-25\", playlistId: playlist4.id, songId: \"song-13\", position: 1, addedAt: new Date() },\n      { id: \"ps-26\", playlistId: playlist4.id, songId: \"song-14\", position: 2, addedAt: new Date() },\n      { id: \"ps-27\", playlistId: playlist4.id, songId: \"song-15\", position: 3, addedAt: new Date() },\n      { id: \"ps-28\", playlistId: playlist4.id, songId: \"song-27\", position: 4, addedAt: new Date() },\n      { id: \"ps-29\", playlistId: playlist4.id, songId: \"song-30\", position: 5, addedAt: new Date() },\n\n      // Top Hits - Most popular songs\n      { id: \"ps-30\", playlistId: playlist5.id, songId: \"song-16\", position: 1, addedAt: new Date() }, // 2.35M plays\n      { id: \"ps-31\", playlistId: playlist5.id, songId: \"song-17\", position: 2, addedAt: new Date() }, // 2.15M plays\n      { id: \"ps-32\", playlistId: playlist5.id, songId: \"song-5\", position: 3, addedAt: new Date() }, // 2.1M plays\n      { id: \"ps-33\", playlistId: playlist5.id, songId: \"song-18\", position: 4, addedAt: new Date() }, // 1.98M plays\n      { id: \"ps-34\", playlistId: playlist5.id, songId: \"song-6\", position: 5, addedAt: new Date() }, // 1.85M plays\n      { id: \"ps-35\", playlistId: playlist5.id, songId: \"song-19\", position: 6, addedAt: new Date() }, // 1.82M plays\n      { id: \"ps-36\", playlistId: playlist5.id, songId: \"song-9\", position: 7, addedAt: new Date() }, // 1.75M plays\n    ];\n\n    playlistSongs.forEach(ps => this.playlistSongs.set(ps.id, ps));\n\n    // Create sample liked songs for library\n    const likedSongs: LikedSong[] = [\n      { id: \"liked-1\", songId: \"song-1\", likedAt: new Date() }, // The Only Way Out\n      { id: \"liked-2\", songId: \"song-5\", likedAt: new Date() }, // Champions of Freedom\n      { id: \"liked-3\", songId: \"song-9\", likedAt: new Date() }, // Golden Hour\n      { id: \"liked-4\", songId: \"song-16\", likedAt: new Date() }, // Sunny Days\n      { id: \"liked-5\", songId: \"song-21\", likedAt: new Date() }, // Purple Storm\n      { id: \"liked-6\", songId: \"song-3\", likedAt: new Date() }, // One Step Away\n      { id: \"liked-7\", songId: \"song-7\", likedAt: new Date() }, // Shadow of Mortus\n    ];\n\n    likedSongs.forEach(ls => this.likedSongs.set(ls.id, ls));\n  }\n\n  // Artists\n  async getArtists(): Promise<Artist[]> {\n    return Array.from(this.artists.values());\n  }\n\n  async getArtist(id: string): Promise<Artist | undefined> {\n    return this.artists.get(id);\n  }\n\n  async createArtist(insertArtist: InsertArtist): Promise<Artist> {\n    const id = randomUUID();\n    const artist: Artist = { ...insertArtist, id, createdAt: new Date() };\n    this.artists.set(id, artist);\n    return artist;\n  }\n\n  // Albums\n  async getAlbums(): Promise<Album[]> {\n    return Array.from(this.albums.values());\n  }\n\n  async getAlbum(id: string): Promise<Album | undefined> {\n    return this.albums.get(id);\n  }\n\n  async getAlbumsByArtist(artistId: string): Promise<Album[]> {\n    return Array.from(this.albums.values()).filter(album => album.artistId === artistId);\n  }\n\n  async createAlbum(insertAlbum: InsertAlbum): Promise<Album> {\n    const id = randomUUID();\n    const album: Album = { ...insertAlbum, id, createdAt: new Date() };\n    this.albums.set(id, album);\n    return album;\n  }\n\n  // Songs\n  async getSongs(): Promise<Song[]> {\n    return Array.from(this.songs.values());\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    return this.songs.get(id);\n  }\n\n  async getSongsByAlbum(albumId: string): Promise<Song[]> {\n    return Array.from(this.songs.values()).filter(song => song.albumId === albumId);\n  }\n\n  async getSongsByArtist(artistId: string): Promise<Song[]> {\n    return Array.from(this.songs.values()).filter(song => song.artistId === artistId);\n  }\n\n  async searchSongs(query: string): Promise<SongWithDetails[]> {\n    const songs = Array.from(this.songs.values()).filter(song => \n      song.title.toLowerCase().includes(query.toLowerCase())\n    );\n    \n    return Promise.all(songs.map(async song => {\n      const artist = await this.getArtist(song.artistId);\n      const album = song.albumId ? await this.getAlbum(song.albumId) : undefined;\n      const isLiked = await this.isSongLiked(song.id);\n      \n      return {\n        ...song,\n        artist: artist!,\n        album,\n        isLiked,\n      };\n    }));\n  }\n\n  async getRecentlyPlayed(): Promise<SongWithDetails[]> {\n    const songs = Array.from(this.songs.values()).slice(0, 5);\n    \n    return Promise.all(songs.map(async song => {\n      const artist = await this.getArtist(song.artistId);\n      const album = song.albumId ? await this.getAlbum(song.albumId) : undefined;\n      const isLiked = await this.isSongLiked(song.id);\n      \n      return {\n        ...song,\n        artist: artist!,\n        album,\n        isLiked,\n      };\n    }));\n  }\n\n  async getTrendingSongs(): Promise<SongWithDetails[]> {\n    const songs = Array.from(this.songs.values())\n      .sort((a, b) => (b.playCount || 0) - (a.playCount || 0))\n      .slice(0, 10);\n    \n    return Promise.all(songs.map(async song => {\n      const artist = await this.getArtist(song.artistId);\n      const album = song.albumId ? await this.getAlbum(song.albumId) : undefined;\n      const isLiked = await this.isSongLiked(song.id);\n      \n      return {\n        ...song,\n        artist: artist!,\n        album,\n        isLiked,\n      };\n    }));\n  }\n\n  async createSong(insertSong: InsertSong): Promise<Song> {\n    const id = randomUUID();\n    const song: Song = { ...insertSong, id, playCount: 0, createdAt: new Date() };\n    this.songs.set(id, song);\n    return song;\n  }\n\n  async incrementPlayCount(songId: string): Promise<void> {\n    const song = this.songs.get(songId);\n    if (song) {\n      const updatedSong = { ...song, playCount: (song.playCount || 0) + 1 };\n      this.songs.set(songId, updatedSong);\n    }\n  }\n\n  // Playlists\n  async getPlaylists(): Promise<Playlist[]> {\n    return Array.from(this.playlists.values());\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    return this.playlists.get(id);\n  }\n\n  async getUserPlaylists(userId: string): Promise<Playlist[]> {\n    const userPlaylists = Array.from(this.playlists.values()).filter(playlist => playlist.createdBy === userId);\n    \n    // Update song counts for accuracy\n    const updatedPlaylists = userPlaylists.map(playlist => {\n      const playlistSongs = Array.from(this.playlistSongs.values())\n        .filter(ps => ps.playlistId === playlist.id);\n      const actualCount = playlistSongs.length;\n      \n      if (playlist.songCount !== actualCount) {\n        const updatedPlaylist = { ...playlist, songCount: actualCount };\n        this.playlists.set(playlist.id, updatedPlaylist);\n        return updatedPlaylist;\n      }\n      \n      return playlist;\n    });\n    \n    return updatedPlaylists;\n  }\n\n  async getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined> {\n    const playlist = await this.getPlaylist(id);\n    if (!playlist) return undefined;\n\n    const playlistSongs = Array.from(this.playlistSongs.values())\n      .filter(ps => ps.playlistId === id)\n      .sort((a, b) => a.position - b.position);\n\n    const songs = await Promise.all(playlistSongs.map(async ps => {\n      const song = await this.getSong(ps.songId);\n      if (!song) return null;\n      \n      const artist = await this.getArtist(song.artistId);\n      const album = song.albumId ? await this.getAlbum(song.albumId) : undefined;\n      const isLiked = await this.isSongLiked(song.id);\n      \n      return {\n        ...song,\n        artist: artist!,\n        album,\n        isLiked,\n      };\n    }));\n\n    const validSongs = songs.filter(Boolean) as SongWithDetails[];\n    \n    // Update the playlist song count if it's incorrect\n    if (playlist.songCount !== validSongs.length) {\n      const updatedPlaylist = { ...playlist, songCount: validSongs.length };\n      this.playlists.set(id, updatedPlaylist);\n    }\n\n    return {\n      ...playlist,\n      songCount: validSongs.length,\n      songs: validSongs,\n    };\n  }\n\n  async createPlaylist(insertPlaylist: InsertPlaylist): Promise<Playlist> {\n    const id = randomUUID();\n    const playlist: Playlist = { ...insertPlaylist, id, songCount: 0, createdAt: new Date() };\n    this.playlists.set(id, playlist);\n    return playlist;\n  }\n\n  async addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong> {\n    const id = randomUUID();\n    const playlistSong: PlaylistSong = { ...data, id, addedAt: new Date() };\n    this.playlistSongs.set(id, playlistSong);\n\n    // Update playlist song count\n    const playlist = this.playlists.get(data.playlistId);\n    if (playlist) {\n      const updatedPlaylist = { ...playlist, songCount: playlist.songCount + 1 };\n      this.playlists.set(data.playlistId, updatedPlaylist);\n    }\n\n    return playlistSong;\n  }\n\n  async removeSongFromPlaylist(playlistId: string, songId: string): Promise<void> {\n    const playlistSong = Array.from(this.playlistSongs.values())\n      .find(ps => ps.playlistId === playlistId && ps.songId === songId);\n    \n    if (playlistSong) {\n      this.playlistSongs.delete(playlistSong.id);\n\n      // Update playlist song count\n      const playlist = this.playlists.get(playlistId);\n      if (playlist) {\n        const updatedPlaylist = { ...playlist, songCount: Math.max(0, playlist.songCount - 1) };\n        this.playlists.set(playlistId, updatedPlaylist);\n      }\n    }\n  }\n\n  // Liked Songs\n  async getLikedSongs(): Promise<SongWithDetails[]> {\n    const likedSongs = Array.from(this.likedSongs.values());\n    \n    return Promise.all(likedSongs.map(async liked => {\n      const song = await this.getSong(liked.songId);\n      if (!song) return null;\n      \n      const artist = await this.getArtist(song.artistId);\n      const album = song.albumId ? await this.getAlbum(song.albumId) : undefined;\n      \n      return {\n        ...song,\n        artist: artist!,\n        album,\n        isLiked: true,\n      };\n    })).then(songs => songs.filter(Boolean) as SongWithDetails[]);\n  }\n\n  async likeSong(data: InsertLikedSong): Promise<LikedSong> {\n    const id = randomUUID();\n    const likedSong: LikedSong = { ...data, id, likedAt: new Date() };\n    this.likedSongs.set(id, likedSong);\n    return likedSong;\n  }\n\n  async unlikeSong(songId: string): Promise<void> {\n    const likedSong = Array.from(this.likedSongs.values()).find(ls => ls.songId === songId);\n    if (likedSong) {\n      this.likedSongs.delete(likedSong.id);\n    }\n  }\n\n  async isSongLiked(songId: string): Promise<boolean> {\n    return Array.from(this.likedSongs.values()).some(ls => ls.songId === songId);\n  }\n\n  // Memberships\n  async getMembership(userId: string): Promise<Membership | undefined> {\n    return Array.from(this.memberships.values()).find(m => m.userId === userId);\n  }\n\n  async createMembership(insertMembership: InsertMembership): Promise<Membership> {\n    const id = randomUUID();\n    const membership: Membership = { \n      ...insertMembership, \n      id, \n      createdAt: new Date(), \n      updatedAt: new Date() \n    };\n    this.memberships.set(id, membership);\n    return membership;\n  }\n\n  async updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined> {\n    const membership = await this.getMembership(userId);\n    if (!membership) return undefined;\n    \n    const updatedMembership: Membership = { \n      ...membership, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.memberships.set(membership.id, updatedMembership);\n    return updatedMembership;\n  }\n\n  // Pi Payments\n  async createPiPayment(insertPayment: InsertPiPayment): Promise<PiPayment> {\n    const id = randomUUID();\n    const payment: PiPayment = { \n      ...insertPayment, \n      id, \n      createdAt: new Date(), \n      updatedAt: new Date() \n    };\n    this.piPayments.set(id, payment);\n    return payment;\n  }\n\n  async getPiPayment(paymentId: string): Promise<PiPayment | undefined> {\n    return Array.from(this.piPayments.values()).find(p => p.paymentId === paymentId);\n  }\n\n  async updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined> {\n    const payment = await this.getPiPayment(paymentId);\n    if (!payment) return undefined;\n    \n    const updatedPayment: PiPayment = { \n      ...payment, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.piPayments.set(payment.id, updatedPayment);\n    return updatedPayment;\n  }\n\n  async getPiPaymentsByUser(userId: string): Promise<PiPayment[]> {\n    return Array.from(this.piPayments.values()).filter(p => p.userId === userId);\n  }\n\n  // User Profile\n  async getUserProfile(userId: string): Promise<{ id: string; name: string; avatar?: string } | undefined> {\n    // Mock implementation - return a default profile\n    return {\n      id: userId,\n      name: \"Demo User\",\n      avatar: undefined\n    };\n  }\n\n  async updateUserProfile(userId: string, data: { name: string; avatar?: string }): Promise<{ id: string; name: string; avatar?: string } | undefined> {\n    // Mock implementation - return updated profile\n    return {\n      id: userId,\n      name: data.name,\n      avatar: data.avatar\n    };\n  }\n\n  // Ambient Music\n  async generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting> {\n    // Mock implementation\n    const id = randomUUID();\n    const setting: AmbientMusicSetting = {\n      id,\n      playlistId,\n      theme: \"relaxing\",\n      intensity: 0.5,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    return setting;\n  }\n\n  async getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined> {\n    // Mock implementation - return undefined as no ambient settings stored\n    return undefined;\n  }\n\n  async updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined> {\n    // Mock implementation - return undefined\n    return undefined;\n  }\n}\n\n// DatabaseStorage implementation\nexport class DatabaseStorage implements IStorage {\n  // Initialize with seed data on first run\n  constructor() {\n    this.ensureSeedData();\n  }\n\n  private async ensureSeedData() {\n    try {\n      // Force reseed to get all 41 songs\n      await this.clearAndSeedDatabase();\n    } catch (error) {\n      console.error('Error checking/seeding database:', error);\n    }\n  }\n\n  private async clearAndSeedDatabase() {\n    try {\n      // Clear existing data in correct order due to foreign key constraints\n      await db.delete(likedSongs);\n      await db.delete(playlistSongs); \n      await db.delete(songs);\n      await db.delete(albums); \n      await db.delete(artists);\n      console.log('Cleared existing data, reseeding with all 41 songs...');\n      await this.seedDatabase();\n    } catch (error) {\n      console.error('Error clearing/seeding database:', error);\n    }\n  }\n\n  private async seedDatabase() {\n    console.log('Starting database seeding...');\n    \n    // Create 80s artists\n    const artist1: Artist = {\n      id: \"artist-1\",\n      name: \"Synth Masters\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Legendary 80s synthpop artists behind classics like Take On Me\",\n      createdAt: new Date(),\n    };\n\n    const artist2: Artist = {\n      id: \"artist-2\",\n      name: \"Neon Dreams\",\n      imageUrl: \"https://images.unsplash.com/photo-1471478331149-c72f17e33c73?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic pioneers who defined the sound of the 80s\",\n      createdAt: new Date(),\n    };\n\n    const artist3: Artist = {\n      id: \"artist-3\",\n      name: \"Digital Pulse\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Masters of cyberpunk and future synthwave\",\n      createdAt: new Date(),\n    };\n\n    // NEW ARTISTS FOR NEW SONGS\n    const dylanSitts: Artist = {\n      id: \"artist-dylan-sitts\",\n      name: \"Dylan Sitts\",\n      imageUrl: \"https://images.unsplash.com/photo-1571330735066-03aaa9429d89?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Hip-hop artist with lyrical prowess and powerful flow\",\n      createdAt: new Date(),\n    };\n\n    const nbhdNick: Artist = {\n      id: \"artist-nbhd-nick\", \n      name: \"Nbhd Nick\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Underground hip-hop producer with distinctive beats\",\n      createdAt: new Date(),\n    };\n\n    const speedyTheSpider: Artist = {\n      id: \"artist-speedy-spider\",\n      name: \"Speedy The Spider\", \n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Alternative rock band with gritty guitar sounds\",\n      createdAt: new Date(),\n    };\n\n    const miaLailani: Artist = {\n      id: \"artist-mia-lailani\",\n      name: \"Mia Lailani\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\", \n      bio: \"Pop sensation with melodic instrumentals\",\n      createdAt: new Date(),\n    };\n\n    const lovingCaliber: Artist = {\n      id: \"artist-loving-caliber\",\n      name: \"Loving Caliber\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Pop duo creating infectious dance tracks\", \n      createdAt: new Date(),\n    };\n\n    const bankston: Artist = {\n      id: \"artist-bankston\",\n      name: \"Bankston\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Pop artist with catchy melodies and beats\",\n      createdAt: new Date(),\n    };\n\n    const pw: Artist = {\n      id: \"artist-pw\",\n      name: \"PW\", \n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Feel-good pop producer with uplifting sounds\",\n      createdAt: new Date(),\n    };\n\n    const johnRunefelt: Artist = {\n      id: \"artist-john-runefelt\",\n      name: \"John Runefelt\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic music producer with atmospheric soundscapes\",\n      createdAt: new Date(),\n    };\n\n    const scientific: Artist = {\n      id: \"artist-scientific\", \n      name: \"Scientific\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Electronic artist pushing boundaries of digital sound\",\n      createdAt: new Date(),\n    };\n\n    const maybe: Artist = {\n      id: \"artist-maybe\",\n      name: \"Maybe\", \n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Chill ambient artist creating relaxing soundscapes\",\n      createdAt: new Date(),\n    };\n\n    const danielFridell: Artist = {\n      id: \"artist-daniel-fridell\",\n      name: \"Daniel Fridell\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      bio: \"Funk and soul artist with groovy bass lines\",\n      createdAt: new Date(),\n    };\n\n    try {\n      await db.insert(artists).values([\n        artist1, artist2, artist3, dylanSitts, nbhdNick, speedyTheSpider, \n        miaLailani, lovingCaliber, bankston, pw, johnRunefelt, scientific, maybe, danielFridell\n      ]);\n\n      // Create albums  \n      const album1: Album = {\n        id: \"album-1\",\n        title: \"Neon Nights\",\n        artistId: \"artist-1\", \n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n        releaseDate: new Date('1984-01-01'),\n        genre: \"Synthwave\",\n        createdAt: new Date(),\n      };\n\n      const album2: Album = {\n        id: \"album-2\",\n        title: \"Electric Dreams\",\n        artistId: \"artist-2\",\n        imageUrl: \"https://images.unsplash.com/photo-1471478331149-c72f17e33c73?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\", \n        releaseDate: new Date('1986-01-01'),\n        genre: \"Electronic\",\n        createdAt: new Date(),\n      };\n\n      const album3: Album = {\n        id: \"album-3\", \n        title: \"Cyber Future\",\n        artistId: \"artist-3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n        releaseDate: new Date('1987-01-01'),\n        genre: \"Cyberpunk\",\n        createdAt: new Date(),\n      };\n\n      // NEW ALBUMS\n      const quarterTimeAlbum: Album = {\n        id: \"album-quarter-time\",\n        title: \"Quarter Time\",\n        artistId: \"artist-dylan-sitts\",\n        imageUrl: \"@assets/generated_images/fourth-quarter_a1b2c3d4.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Hip-hop\",\n        createdAt: new Date(),\n      };\n\n      const lockInAlbum: Album = {\n        id: \"album-lock-in\",\n        title: \"Lock In\",\n        artistId: \"artist-nbhd-nick\", \n        imageUrl: \"@assets/generated_images/lock-in_e5f6g7h8.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Hip-hop\",\n        createdAt: new Date(),\n      };\n\n      const sandHeadAlbum: Album = {\n        id: \"album-sand-head\",\n        title: \"Head in the Sand\",\n        artistId: \"artist-speedy-spider\",\n        imageUrl: \"@assets/generated_images/head-in-sand_i9j0k1l2.png\", \n        releaseDate: new Date('2024-01-01'),\n        genre: \"Alternative Rock\",\n        createdAt: new Date(),\n      };\n\n      const instrumentalsVol1: Album = {\n        id: \"album-instrumentals-vol1\",\n        title: \"Instrumentals Vol. 1\",\n        artistId: \"artist-mia-lailani\",\n        imageUrl: \"@assets/generated_images/youll-never-know_m3n4o5p6.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Pop\",\n        createdAt: new Date(),\n      };\n\n      const moveAlbum: Album = {\n        id: \"album-move\",\n        title: \"Move\",\n        artistId: \"artist-loving-caliber\", \n        imageUrl: \"@assets/generated_images/move_q7r8s9t0.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Pop\",\n        createdAt: new Date(),\n      };\n\n      const stuckAlbum: Album = {\n        id: \"album-stuck\",\n        title: \"Stuck\",\n        artistId: \"artist-bankston\",\n        imageUrl: \"@assets/generated_images/stuck-in-head_u1v2w3x4.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Pop\",\n        createdAt: new Date(),\n      };\n\n      const feelGoodAlbum: Album = {\n        id: \"album-feel-good\", \n        title: \"Feel Good\",\n        artistId: \"artist-pw\",\n        imageUrl: \"@assets/generated_images/feel-good_y5z6a7b8.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Pop\",\n        createdAt: new Date(),\n      };\n\n      const minuteAlbum: Album = {\n        id: \"album-minute\",\n        title: \"In a Minute\",\n        artistId: \"artist-john-runefelt\",\n        imageUrl: \"@assets/generated_images/in-a-minute_c9d0e1f2.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Electronic\",\n        createdAt: new Date(),\n      };\n\n      const flowAlbum: Album = {\n        id: \"album-flow\",\n        title: \"Let It Flow\", \n        artistId: \"artist-scientific\",\n        imageUrl: \"@assets/generated_images/let-it-flow_g3h4i5j6.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Electronic\",\n        createdAt: new Date(),\n      };\n\n      const poolsideAlbum: Album = {\n        id: \"album-poolside\",\n        title: \"Poolside\",\n        artistId: \"artist-maybe\",\n        imageUrl: \"@assets/generated_images/poolside_k7l8m9n0.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Chill/Ambient\",\n        createdAt: new Date(),\n      };\n\n      const specialSauceAlbum: Album = {\n        id: \"album-special-sauce\",\n        title: \"Special Sauce\",\n        artistId: \"artist-daniel-fridell\",\n        imageUrl: \"@assets/generated_images/special-sauce_o1p2q3r4.png\",\n        releaseDate: new Date('2024-01-01'),\n        genre: \"Funk/Soul\",\n        createdAt: new Date(),\n      };\n\n      await db.insert(albums).values([\n        album1, album2, album3, quarterTimeAlbum, lockInAlbum, sandHeadAlbum,\n        instrumentalsVol1, moveAlbum, stuckAlbum, feelGoodAlbum, minuteAlbum,\n        flowAlbum, poolsideAlbum, specialSauceAlbum\n      ]);\n\n      // Create original songs with trackNumber\n      const originalSongs: Song[] = [\n        {\n          id: \"song-champions-freedom\",\n          title: \"Champions of Freedom\", \n          artistId: \"artist-1\",\n          albumId: \"album-1\",\n          duration: 243,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Synthwave\",\n          playCount: 1245,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-firstborn\",\n          title: \"The Firstborn\",\n          artistId: \"artist-1\",\n          albumId: \"album-1\", \n          duration: 267,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Synthwave\",\n          playCount: 987,\n          trackNumber: 2,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-darkest-demons\",\n          title: \"Darkest of Demons\",\n          artistId: \"artist-1\",\n          albumId: \"album-1\",\n          duration: 298,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\", \n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Synthwave\",\n          playCount: 1567,\n          trackNumber: 3,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-deepstar\",\n          title: \"Deepstar\",\n          artistId: \"artist-2\",\n          albumId: \"album-2\",\n          duration: 189,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1471478331149-c72f17e33c73?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Electronic\",\n          playCount: 2134, \n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-one-step-away\",\n          title: \"One Step Away\",\n          artistId: \"artist-2\",\n          albumId: \"album-2\",\n          duration: 245,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1471478331149-c72f17e33c73?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Electronic\", \n          playCount: 1876,\n          trackNumber: 2,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-symmetry\",\n          title: \"Symmetry\",\n          artistId: \"artist-2\",\n          albumId: \"album-2\",\n          duration: 234,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-6.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1471478331149-c72f17e33c73?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Electronic\",\n          playCount: 1432,\n          trackNumber: 3,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-only-way-out\",\n          title: \"The Only Way Out\", \n          artistId: \"artist-3\",\n          albumId: \"album-3\",\n          duration: 276,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-7.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Cyberpunk\",\n          playCount: 1987,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-deeplight\",\n          title: \"Deeplight\",\n          artistId: \"artist-3\",\n          albumId: \"album-3\",\n          duration: 312,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-8.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Cyberpunk\",\n          playCount: 1654,\n          trackNumber: 2,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-shadow-mortus\",\n          title: \"Shadow of Mortus\",\n          artistId: \"artist-3\",\n          albumId: \"album-3\", \n          duration: 289,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-9.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Cyberpunk\",\n          playCount: 2345,\n          trackNumber: 3,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-open-skies\",\n          title: \"Under Open Skies\",\n          artistId: \"artist-1\",\n          albumId: \"album-1\",\n          duration: 198,\n          audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-10.mp3\",\n          imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n          genre: \"Synthwave\",\n          playCount: 876,\n          trackNumber: 4,\n          createdAt: new Date(),\n        }\n      ];\n\n      // Create NEW songs with trackNumber\n      const newSongs: Song[] = [\n        {\n          id: \"song-fourth-quarter\",\n          title: \"Fourth Quarter\",\n          artistId: \"artist-dylan-sitts\",\n          albumId: \"album-quarter-time\",\n          duration: 180,\n          audioUrl: \"/attached_assets/ES_Fourth Quarter - Dylan Sitts_1756913296915.mp3\",\n          imageUrl: \"@assets/generated_images/fourth-quarter_a1b2c3d4.png\",\n          genre: \"Hip-hop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-lock-in\",\n          title: \"Lock In (Instrumental)\",\n          artistId: \"artist-nbhd-nick\",\n          albumId: \"album-lock-in\",\n          duration: 175,\n          audioUrl: \"/attached_assets/ES_Lock In (Instrumental) - Nbhd Nick_1756913296921.mp3\",\n          imageUrl: \"@assets/generated_images/lock-in_e5f6g7h8.png\",\n          genre: \"Hip-hop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-keeping-head-sand\",\n          title: \"Keeping My Head in the Sand\",\n          artistId: \"artist-speedy-spider\", \n          albumId: \"album-sand-head\",\n          duration: 210,\n          audioUrl: \"/attached_assets/ES_Keeping My Head in the Sand - Speedy The Spider_1756913296927.mp3\",\n          imageUrl: \"@assets/generated_images/head-in-sand_i9j0k1l2.png\",\n          genre: \"Alternative Rock\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-youll-never-know\",\n          title: \"You'll Never Know (Instrumental)\",\n          artistId: \"artist-mia-lailani\",\n          albumId: \"album-instrumentals-vol1\",\n          duration: 195,\n          audioUrl: \"/attached_assets/ES_You'll Never Know (Instrumental) - Mia Lailani_1756913296933.mp3\",\n          imageUrl: \"@assets/generated_images/youll-never-know_m3n4o5p6.png\", \n          genre: \"Pop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-move\",\n          title: \"Move (Instrumental)\",\n          artistId: \"artist-loving-caliber\",\n          albumId: \"album-move\",\n          duration: 185,\n          audioUrl: \"/attached_assets/ES_Move (Instrumental) - Loving Caliber_1756913296939.mp3\",\n          imageUrl: \"@assets/generated_images/move_q7r8s9t0.png\",\n          genre: \"Pop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-stuck-in-head\",\n          title: \"Stuck in My Head (Instrumental)\",\n          artistId: \"artist-bankston\",\n          albumId: \"album-stuck\",\n          duration: 200,\n          audioUrl: \"/attached_assets/ES_Stuck in My Head (Instrumental) - Bankston_1756913296945.mp3\", \n          imageUrl: \"@assets/generated_images/stuck-in-head_u1v2w3x4.png\",\n          genre: \"Pop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-feel-good\",\n          title: \"Feel Good (Instrumental)\",\n          artistId: \"artist-pw\",\n          albumId: \"album-feel-good\",\n          duration: 190,\n          audioUrl: \"/attached_assets/ES_Feel Good (Instrumental) - PW_1756913296950.mp3\",\n          imageUrl: \"@assets/generated_images/feel-good_y5z6a7b8.png\",\n          genre: \"Pop\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-in-a-minute\",\n          title: \"In a Minute\",\n          artistId: \"artist-john-runefelt\",\n          albumId: \"album-minute\",\n          duration: 205,\n          audioUrl: \"/attached_assets/ES_In a Minute - John Runefelt_1756913296956.mp3\",\n          imageUrl: \"@assets/generated_images/in-a-minute_c9d0e1f2.png\",\n          genre: \"Electronic\", \n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-let-it-flow\",\n          title: \"Let It Flow\",\n          artistId: \"artist-scientific\",\n          albumId: \"album-flow\",\n          duration: 220,\n          audioUrl: \"/attached_assets/ES_Let It Flow - Scientific_1756913296962.mp3\",\n          imageUrl: \"@assets/generated_images/let-it-flow_g3h4i5j6.png\",\n          genre: \"Electronic\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-poolside\",\n          title: \"Poolside (Instrumental)\",\n          artistId: \"artist-maybe\",\n          albumId: \"album-poolside\",\n          duration: 215,\n          audioUrl: \"/attached_assets/ES_Poolside (Instrumental) - Maybe_1756913296967.mp3\",\n          imageUrl: \"@assets/generated_images/poolside_k7l8m9n0.png\",\n          genre: \"Chill/Ambient\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        },\n        {\n          id: \"song-special-sauce\",\n          title: \"Special Sauce\",\n          artistId: \"artist-daniel-fridell\", \n          albumId: \"album-special-sauce\",\n          duration: 225,\n          audioUrl: \"/attached_assets/ES_Special Sauce - Daniel Fridell_1756913296973.mp3\",\n          imageUrl: \"@assets/generated_images/special-sauce_o1p2q3r4.png\",\n          genre: \"Funk/Soul\",\n          playCount: 0,\n          trackNumber: 1,\n          createdAt: new Date(),\n        }\n      ];\n\n      await db.insert(songs).values([...originalSongs, ...newSongs]);\n\n      console.log('Database seeded successfully with 41 songs total!');\n    } catch (error) {\n      console.error('Error seeding database:', error);\n    }\n  }\n\n  // Artists\n  async getArtists(): Promise<Artist[]> {\n    return await db.select().from(artists);\n  }\n\n  async getArtist(id: string): Promise<Artist | undefined> {\n    const [artist] = await db.select().from(artists).where(eq(artists.id, id));\n    return artist;\n  }\n\n  async createArtist(insertArtist: InsertArtist): Promise<Artist> {\n    const [artist] = await db.insert(artists).values(insertArtist).returning();\n    return artist;\n  }\n\n  // Albums\n  async getAlbums(): Promise<Album[]> {\n    return await db.select().from(albums);\n  }\n\n  async getAlbum(id: string): Promise<Album | undefined> {\n    const [album] = await db.select().from(albums).where(eq(albums.id, id));\n    return album;\n  }\n\n  async getAlbumsByArtist(artistId: string): Promise<Album[]> {\n    return await db.select().from(albums).where(eq(albums.artistId, artistId));\n  }\n\n  async createAlbum(insertAlbum: InsertAlbum): Promise<Album> {\n    const [album] = await db.insert(albums).values(insertAlbum).returning();\n    return album;\n  }\n\n  // Songs\n  async getSongs(): Promise<Song[]> {\n    return await db.select().from(songs);\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    const [song] = await db.select().from(songs).where(eq(songs.id, id));\n    return song;\n  }\n\n  async getSongsByAlbum(albumId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.albumId, albumId));\n  }\n\n  async getSongsByArtist(artistId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.artistId, artistId));\n  }\n\n  async searchSongs(query: string): Promise<SongWithDetails[]> {\n    const result = await db\n      .select({\n        id: songs.id,\n        title: songs.title,\n        artistId: songs.artistId,\n        albumId: songs.albumId,\n        duration: songs.duration,\n        audioUrl: songs.audioUrl,\n        imageUrl: songs.imageUrl,\n        genre: songs.genre,\n        trackNumber: songs.trackNumber,\n        playCount: songs.playCount,\n        createdAt: songs.createdAt,\n        artist: artists.name,\n        album: albums.title,\n        albumImageUrl: albums.imageUrl,\n      })\n      .from(songs)\n      .leftJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(ilike(songs.title, `%${query}%`));\n    \n    return result;\n  }\n\n  async getRecentlyPlayed(): Promise<SongWithDetails[]> {\n    const result = await db\n      .select({\n        id: songs.id,\n        title: songs.title,\n        artistId: songs.artistId,\n        albumId: songs.albumId,\n        duration: songs.duration,\n        audioUrl: songs.audioUrl,\n        imageUrl: songs.imageUrl,\n        genre: songs.genre,\n        trackNumber: songs.trackNumber,\n        playCount: songs.playCount,\n        createdAt: songs.createdAt,\n        artist: artists.name,\n        album: albums.title,\n        albumImageUrl: albums.imageUrl,\n      })\n      .from(songs)\n      .leftJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(songs.playCount))\n      .limit(20);\n    \n    return result;\n  }\n\n  async getTrendingSongs(): Promise<SongWithDetails[]> {\n    const result = await db\n      .select({\n        id: songs.id,\n        title: songs.title,\n        artistId: songs.artistId,\n        albumId: songs.albumId,\n        duration: songs.duration,\n        audioUrl: songs.audioUrl,\n        imageUrl: songs.imageUrl,\n        genre: songs.genre,\n        trackNumber: songs.trackNumber,\n        playCount: songs.playCount,\n        createdAt: songs.createdAt,\n        artist: artists.name,\n        album: albums.title,\n        albumImageUrl: albums.imageUrl,\n      })\n      .from(songs)\n      .leftJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(songs.playCount))\n      .limit(10);\n    \n    return result;\n  }\n\n  async createSong(insertSong: InsertSong): Promise<Song> {\n    const [song] = await db.insert(songs).values(insertSong).returning();\n    return song;\n  }\n\n  async incrementPlayCount(songId: string): Promise<void> {\n    await db\n      .update(songs)\n      .set({ playCount: sql`${songs.playCount} + 1` })\n      .where(eq(songs.id, songId));\n  }\n\n  // Playlists\n  async getPlaylists(): Promise<Playlist[]> {\n    return await db.select().from(playlists);\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    const [playlist] = await db.select().from(playlists).where(eq(playlists.id, id));\n    return playlist;\n  }\n\n  async getUserPlaylists(userId: string): Promise<Playlist[]> {\n    const userPlaylists = await db.select().from(playlists).where(eq(playlists.createdBy, userId));\n    return userPlaylists;\n  }\n\n  async getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined> {\n    const playlist = await this.getPlaylist(id);\n    if (!playlist) return undefined;\n\n    const playlistSongsData = await db\n      .select({\n        id: songs.id,\n        title: songs.title,\n        artistId: songs.artistId,\n        albumId: songs.albumId,\n        duration: songs.duration,\n        audioUrl: songs.audioUrl,\n        imageUrl: songs.imageUrl,\n        genre: songs.genre,\n        trackNumber: songs.trackNumber,\n        playCount: songs.playCount,\n        createdAt: songs.createdAt,\n        artist: artists.name,\n        album: albums.title,\n        albumImageUrl: albums.imageUrl,\n        addedAt: playlistSongs.addedAt,\n      })\n      .from(playlistSongs)\n      .leftJoin(songs, eq(playlistSongs.songId, songs.id))\n      .leftJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(eq(playlistSongs.playlistId, id));\n\n    return {\n      ...playlist,\n      songs: playlistSongsData,\n    };\n  }\n\n  async createPlaylist(insertPlaylist: InsertPlaylist): Promise<Playlist> {\n    const [playlist] = await db.insert(playlists).values(insertPlaylist).returning();\n    return playlist;\n  }\n\n  async addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong> {\n    const [playlistSong] = await db.insert(playlistSongs).values(data).returning();\n    return playlistSong;\n  }\n\n  async removeSongFromPlaylist(playlistId: string, songId: string): Promise<void> {\n    await db\n      .delete(playlistSongs)\n      .where(\n        sql`${playlistSongs.playlistId} = ${playlistId} AND ${playlistSongs.songId} = ${songId}`\n      );\n  }\n\n  // Liked Songs\n  async getLikedSongs(): Promise<SongWithDetails[]> {\n    const result = await db\n      .select({\n        id: songs.id,\n        title: songs.title,\n        artistId: songs.artistId,\n        albumId: songs.albumId,\n        duration: songs.duration,\n        audioUrl: songs.audioUrl,\n        imageUrl: songs.imageUrl,\n        genre: songs.genre,\n        trackNumber: songs.trackNumber,\n        playCount: songs.playCount,\n        createdAt: songs.createdAt,\n        artist: artists.name,\n        album: albums.title,\n        albumImageUrl: albums.imageUrl,\n      })\n      .from(likedSongs)\n      .leftJoin(songs, eq(likedSongs.songId, songs.id))\n      .leftJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id));\n    \n    return result;\n  }\n\n  async likeSong(data: InsertLikedSong): Promise<LikedSong> {\n    const [likedSong] = await db.insert(likedSongs).values(data).returning();\n    return likedSong;\n  }\n\n  async unlikeSong(songId: string): Promise<void> {\n    await db.delete(likedSongs).where(eq(likedSongs.songId, songId));\n  }\n\n  async isSongLiked(songId: string): Promise<boolean> {\n    const [result] = await db.select().from(likedSongs).where(eq(likedSongs.songId, songId)).limit(1);\n    return !!result;\n  }\n\n  // Memberships - THE KEY PART FOR PREMIUM PERSISTENCE!\n  async getMembership(userId: string): Promise<Membership | undefined> {\n    const [membership] = await db.select().from(memberships).where(eq(memberships.userId, userId));\n    return membership;\n  }\n\n  async createMembership(insertMembership: InsertMembership): Promise<Membership> {\n    const [membership] = await db.insert(memberships).values(insertMembership).returning();\n    return membership;\n  }\n\n  async updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined> {\n    const [membership] = await db\n      .update(memberships)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(memberships.userId, userId))\n      .returning();\n    return membership;\n  }\n\n  // Pi Payments\n  async createPiPayment(insertPayment: InsertPiPayment): Promise<PiPayment> {\n    const [payment] = await db.insert(piPayments).values(insertPayment).returning();\n    return payment;\n  }\n\n  async getPiPayment(paymentId: string): Promise<PiPayment | undefined> {\n    const [payment] = await db.select().from(piPayments).where(eq(piPayments.paymentId, paymentId));\n    return payment;\n  }\n\n  async updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined> {\n    const [payment] = await db\n      .update(piPayments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(piPayments.paymentId, paymentId))\n      .returning();\n    return payment;\n  }\n\n  async getPiPaymentsByUser(userId: string): Promise<PiPayment[]> {\n    return await db.select().from(piPayments).where(eq(piPayments.userId, userId));\n  }\n\n  // Ambient Music Generation\n  async generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting> {\n    const playlist = await this.getPlaylistWithSongs(playlistId);\n    if (!playlist) {\n      throw new Error('Playlist not found');\n    }\n\n    // Check if ambient setting already exists\n    const existing = await this.getAmbientSetting(playlistId);\n    if (existing) {\n      return existing;\n    }\n\n    // Analyze playlist theme based on songs and genres\n    const { theme, mood, tempo, intensity } = this.analyzePlaylistForAmbient(playlist);\n    \n    const [ambientSetting] = await db.insert(ambientMusicSettings).values({\n      playlistId,\n      theme,\n      mood,\n      tempo,\n      intensity,\n      enabled: true,\n    }).returning();\n\n    return ambientSetting;\n  }\n\n  async getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined> {\n    const [setting] = await db.select().from(ambientMusicSettings)\n      .where(eq(ambientMusicSettings.playlistId, playlistId));\n    return setting;\n  }\n\n  async updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined> {\n    const [setting] = await db.update(ambientMusicSettings)\n      .set({ ...updates, lastGenerated: new Date() })\n      .where(eq(ambientMusicSettings.id, settingId))\n      .returning();\n    return setting;\n  }\n\n  // User Profile methods - using simple in-memory object for demo\n  private profiles: { [key: string]: { id: string; name: string; avatar?: string } } = {};\n\n  async getUserProfile(userId: string): Promise<{ id: string; name: string; avatar?: string } | undefined> {\n    // Get from simple object storage\n    if (this.profiles[userId]) {\n      return this.profiles[userId];\n    }\n    \n    // Return default for demo user if not found\n    if (userId === \"demo-user-123\") {\n      return {\n        id: userId,\n        name: \"Premium User\",\n        avatar: undefined\n      };\n    }\n    \n    return undefined;\n  }\n\n  async updateUserProfile(userId: string, data: { name: string; avatar?: string }): Promise<{ id: string; name: string; avatar?: string } | undefined> {\n    // Update profile in simple object storage\n    if (userId !== \"demo-user-123\") {\n      return undefined;\n    }\n\n    const updatedProfile = {\n      id: userId,\n      name: data.name,\n      avatar: data.avatar,\n    };\n\n    this.profiles[userId] = updatedProfile;\n    return updatedProfile;\n  }\n\n  private analyzePlaylistForAmbient(playlist: PlaylistWithDetails): {\n    theme: string;\n    mood: string;\n    tempo: number;\n    intensity: number;\n  } {\n    const songs = playlist.songs || [];\n    const genres = songs.map(song => song.genre?.toLowerCase() || 'unknown');\n    const name = playlist.name.toLowerCase();\n    const description = playlist.description?.toLowerCase() || '';\n\n    // Detect theme based on playlist name, description, and genres\n    let theme = 'cosmic';\n    let mood = 'peaceful';\n    let tempo = 60;\n    let intensity = 5;\n\n    // Theme detection logic\n    if (name.includes('chill') || name.includes('ambient') || description.includes('relax')) {\n      theme = 'chill';\n      mood = 'peaceful';\n      tempo = 50;\n      intensity = 3;\n    } else if (genres.includes('electronic') || name.includes('electronic')) {\n      theme = 'cosmic';\n      mood = 'mysterious';\n      tempo = 80;\n      intensity = 6;\n    } else if (genres.includes('folk') || name.includes('acoustic')) {\n      theme = 'nature';\n      mood = 'peaceful';\n      tempo = 65;\n      intensity = 4;\n    } else if (name.includes('energy') || name.includes('workout') || genres.includes('dance')) {\n      theme = 'energy';\n      mood = 'energetic';\n      tempo = 120;\n      intensity = 8;\n    } else if (name.includes('urban') || name.includes('city') || genres.includes('hip-hop')) {\n      theme = 'urban';\n      mood = 'mysterious';\n      tempo = 90;\n      intensity = 7;\n    }\n\n    return { theme, mood, tempo, intensity };\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  // Artists\n  async getArtists(): Promise<Artist[]> {\n    return await db.select().from(artists);\n  }\n\n  async getArtist(id: string): Promise<Artist | undefined> {\n    const [artist] = await db.select().from(artists).where(eq(artists.id, id));\n    return artist || undefined;\n  }\n\n  async createArtist(artist: InsertArtist): Promise<Artist> {\n    const [newArtist] = await db.insert(artists).values({\n      ...artist,\n      id: randomUUID(),\n    }).returning();\n    return newArtist;\n  }\n\n  // Albums\n  async getAlbums(): Promise<Album[]> {\n    return await db.select().from(albums);\n  }\n\n  async getAlbum(id: string): Promise<Album | undefined> {\n    const [album] = await db.select().from(albums).where(eq(albums.id, id));\n    return album || undefined;\n  }\n\n  async getAlbumsByArtist(artistId: string): Promise<Album[]> {\n    return await db.select().from(albums).where(eq(albums.artistId, artistId));\n  }\n\n  async createAlbum(album: InsertAlbum): Promise<Album> {\n    const [newAlbum] = await db.insert(albums).values({\n      ...album,\n      id: randomUUID(),\n    }).returning();\n    return newAlbum;\n  }\n\n  // Songs\n  async getSongs(): Promise<Song[]> {\n    return await db.select().from(songs);\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    const [song] = await db.select().from(songs).where(eq(songs.id, id));\n    return song || undefined;\n  }\n\n  async getSongsByAlbum(albumId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.albumId, albumId));\n  }\n\n  async getSongsByArtist(artistId: string): Promise<Song[]> {\n    return await db.select().from(songs).where(eq(songs.artistId, artistId));\n  }\n\n  async searchSongs(query: string): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(ilike(songs.title, `%${query}%`));\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async getRecentlyPlayed(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(songs.playCount))\n      .limit(10);\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async getTrendingSongs(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(songs)\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(songs.playCount))\n      .limit(15);\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async createSong(song: InsertSong): Promise<Song> {\n    const [newSong] = await db.insert(songs).values({\n      ...song,\n      id: randomUUID(),\n    }).returning();\n    return newSong;\n  }\n\n  async incrementPlayCount(songId: string): Promise<void> {\n    await db\n      .update(songs)\n      .set({ playCount: sql`${songs.playCount} + 1` })\n      .where(eq(songs.id, songId));\n  }\n\n  // Playlists\n  async getPlaylists(): Promise<Playlist[]> {\n    return await db.select().from(playlists);\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    const [playlist] = await db.select().from(playlists).where(eq(playlists.id, id));\n    return playlist || undefined;\n  }\n\n  async getUserPlaylists(userId: string): Promise<Playlist[]> {\n    return await db.select().from(playlists).where(eq(playlists.createdBy, userId));\n  }\n\n  async getPlaylistWithSongs(id: string): Promise<PlaylistWithDetails | undefined> {\n    const [playlist] = await db.select().from(playlists).where(eq(playlists.id, id));\n    if (!playlist) return undefined;\n\n    const playlistSongsResult = await db\n      .select({\n        playlistSong: playlistSongs,\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(playlistSongs)\n      .innerJoin(songs, eq(playlistSongs.songId, songs.id))\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .where(eq(playlistSongs.playlistId, id))\n      .orderBy(playlistSongs.position);\n\n    const songsWithDetails = playlistSongsResult.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n\n    return {\n      ...playlist,\n      songs: songsWithDetails,\n    };\n  }\n\n  async createPlaylist(playlist: InsertPlaylist): Promise<Playlist> {\n    const [newPlaylist] = await db.insert(playlists).values({\n      ...playlist,\n      id: randomUUID(),\n    }).returning();\n    return newPlaylist;\n  }\n\n  async addSongToPlaylist(data: InsertPlaylistSong): Promise<PlaylistSong> {\n    const [playlistSong] = await db.insert(playlistSongs).values({\n      ...data,\n      id: randomUUID(),\n    }).returning();\n    return playlistSong;\n  }\n\n  async removeSongFromPlaylist(playlistId: string, songId: string): Promise<void> {\n    await db\n      .delete(playlistSongs)\n      .where(\n        sql`${playlistSongs.playlistId} = ${playlistId} AND ${playlistSongs.songId} = ${songId}`\n      );\n  }\n\n  // Liked Songs\n  async getLikedSongs(): Promise<SongWithDetails[]> {\n    const results = await db\n      .select({\n        song: songs,\n        artist: artists,\n        album: albums\n      })\n      .from(likedSongs)\n      .innerJoin(songs, eq(likedSongs.songId, songs.id))\n      .innerJoin(artists, eq(songs.artistId, artists.id))\n      .leftJoin(albums, eq(songs.albumId, albums.id))\n      .orderBy(desc(likedSongs.likedAt));\n\n    return results.map(({ song, artist, album }) => ({\n      ...song,\n      artist,\n      album: album || undefined,\n    }));\n  }\n\n  async likeSong(data: InsertLikedSong): Promise<LikedSong> {\n    const [likedSong] = await db.insert(likedSongs).values({\n      ...data,\n      id: randomUUID(),\n    }).returning();\n    return likedSong;\n  }\n\n  async unlikeSong(songId: string): Promise<void> {\n    await db.delete(likedSongs).where(eq(likedSongs.songId, songId));\n  }\n\n  async isSongLiked(songId: string): Promise<boolean> {\n    const [liked] = await db.select().from(likedSongs).where(eq(likedSongs.songId, songId));\n    return !!liked;\n  }\n\n  // User Profile\n  async getUserProfile(userId: string): Promise<Profile | undefined> {\n    const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async updateUserProfile(userId: string, data: { name?: string; nickname?: string; imageUrl?: string }): Promise<Profile | undefined> {\n    const existingProfile = await this.getUserProfile(userId);\n    \n    if (!existingProfile) {\n      // Create new profile if doesn't exist\n      const newProfile = await this.createUserProfile({\n        userId,\n        name: data.name || 'PurpleBeats User',\n        nickname: data.nickname,\n        imageUrl: data.imageUrl,\n      });\n      return newProfile;\n    }\n\n    const [updatedProfile] = await db\n      .update(profiles)\n      .set({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .where(eq(profiles.userId, userId))\n      .returning();\n    \n    return updatedProfile || undefined;\n  }\n\n  async createUserProfile(profile: InsertProfile): Promise<Profile> {\n    const [newProfile] = await db.insert(profiles).values({\n      ...profile,\n      id: randomUUID(),\n    }).returning();\n    return newProfile;\n  }\n\n  // Memberships\n  async getMembership(userId: string): Promise<Membership | undefined> {\n    const [membership] = await db.select().from(memberships).where(eq(memberships.userId, userId));\n    return membership || undefined;\n  }\n\n  async createMembership(membership: InsertMembership): Promise<Membership> {\n    const [newMembership] = await db.insert(memberships).values({\n      ...membership,\n      id: randomUUID(),\n    }).returning();\n    return newMembership;\n  }\n\n  async updateMembership(userId: string, updates: Partial<Membership>): Promise<Membership | undefined> {\n    const [updatedMembership] = await db\n      .update(memberships)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(memberships.userId, userId))\n      .returning();\n    \n    return updatedMembership || undefined;\n  }\n  \n  // Pi Payments\n  async createPiPayment(payment: InsertPiPayment): Promise<PiPayment> {\n    const [newPayment] = await db.insert(piPayments).values({\n      ...payment,\n      id: randomUUID(),\n    }).returning();\n    return newPayment;\n  }\n\n  async getPiPayment(paymentId: string): Promise<PiPayment | undefined> {\n    const [payment] = await db.select().from(piPayments).where(eq(piPayments.paymentId, paymentId));\n    return payment || undefined;\n  }\n\n  async updatePiPayment(paymentId: string, updates: Partial<PiPayment>): Promise<PiPayment | undefined> {\n    const [updatedPayment] = await db\n      .update(piPayments)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(piPayments.paymentId, paymentId))\n      .returning();\n    \n    return updatedPayment || undefined;\n  }\n\n  async getPiPaymentsByUser(userId: string): Promise<PiPayment[]> {\n    return await db.select().from(piPayments).where(eq(piPayments.userId, userId));\n  }\n  \n  // Ambient Music\n  async generateAmbientForPlaylist(playlistId: string): Promise<AmbientMusicSetting> {\n    const [ambientSetting] = await db.insert(ambientMusicSettings).values({\n      id: randomUUID(),\n      playlistId,\n      theme: \"cosmic\",\n      mood: \"peaceful\",\n      tempo: 60,\n      intensity: 5,\n      enabled: true,\n    }).returning();\n    return ambientSetting;\n  }\n\n  async getAmbientSetting(playlistId: string): Promise<AmbientMusicSetting | undefined> {\n    const [setting] = await db.select().from(ambientMusicSettings).where(eq(ambientMusicSettings.playlistId, playlistId));\n    return setting || undefined;\n  }\n\n  async updateAmbientSetting(settingId: string, updates: Partial<AmbientMusicSetting>): Promise<AmbientMusicSetting | undefined> {\n    const [updatedSetting] = await db\n      .update(ambientMusicSettings)\n      .set({\n        ...updates,\n        lastGenerated: new Date(),\n      })\n      .where(eq(ambientMusicSettings.id, settingId))\n      .returning();\n    \n    return updatedSetting || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":100314},"client/src/components/music/playlist-options-menu.tsx":{"content":"import { useState } from \"react\";\nimport { MoreVertical, Heart, Library, Plus, ChevronDown, Crown, Lock } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Playlist, Membership } from \"@shared/schema\";\n\ninterface PlaylistOptionsMenuProps {\n  playlist: Playlist;\n  userId?: string;\n  onAddToPlaylist?: (songId: string, targetPlaylistId: string) => void;\n}\n\nexport function PlaylistOptionsMenu({ \n  playlist, \n  userId,\n  onAddToPlaylist \n}: PlaylistOptionsMenuProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const authUserId = user?.uid;\n  const finalUserId = userId || authUserId;\n  const [open, setOpen] = useState(false);\n  const [showPlaylistSelector, setShowPlaylistSelector] = useState(false);\n\n  // Get user's membership status\n  const { data: membership } = useQuery<Membership>({\n    queryKey: ['/api/membership', finalUserId],\n    enabled: !!finalUserId,\n  });\n  \n  const isPremium = membership?.isPremium && membership.expiresAt && new Date(membership.expiresAt) > new Date();\n\n  // Check if playlist is liked\n  const { data: likedData } = useQuery({\n    queryKey: [`/api/liked-playlists/${playlist.id}/check?userId=${finalUserId}`],\n    enabled: !!playlist.id && !!finalUserId,\n  });\n\n  // Check if playlist is in library\n  const { data: libraryData } = useQuery({\n    queryKey: [`/api/library-playlists/${playlist.id}/check?userId=${finalUserId}`],\n    enabled: !!playlist.id && !!finalUserId,\n  });\n\n  // Get user playlists (for \"add to other playlist\" option)\n  const { data: userPlaylists } = useQuery({\n    queryKey: [`/api/playlists/user/${finalUserId}`],\n    enabled: !!finalUserId,\n  });\n\n  const isLiked = (likedData as any)?.isLiked || false;\n  const isInLibrary = (libraryData as any)?.isInLibrary || false;\n\n  // Like/Unlike playlist mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      if (!isPremium) {\n        throw new Error(\"Premium feature required. Upgrade to Premium to like playlists!\");\n      }\n      if (isLiked) {\n        await apiRequest(\"DELETE\", `/api/liked-playlists/${playlist.id}?userId=${finalUserId}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/liked-playlists\", { playlistId: playlist.id, userId: finalUserId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/liked-playlists/${playlist.id}/check`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/liked-playlists/${userId}`] });\n      toast({\n        title: isLiked ? \"Playlist removed from liked\" : \"Playlist liked\",\n        description: isLiked \n          ? \"Playlist removed from your liked playlists\" \n          : \"Playlist added to your liked playlists\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Like playlist error:\", error);\n      const message = error?.message || \"Failed to update playlist\";\n      if (message.includes(\"Premium feature required\")) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"Liking playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n          variant: \"default\",\n          action: (\n            <div className=\"flex items-center gap-1 text-primary\">\n              <Crown className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Upgrade</span>\n            </div>\n          ),\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Add/Remove from library mutation\n  const libraryMutation = useMutation({\n    mutationFn: async () => {\n      if (!isPremium) {\n        throw new Error(\"Premium feature required. Upgrade to Premium to manage your library!\");\n      }\n      if (isInLibrary) {\n        await apiRequest(\"DELETE\", `/api/library-playlists/${playlist.id}?userId=${finalUserId}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/library-playlists\", { playlistId: playlist.id, userId: finalUserId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/library-playlists/${playlist.id}/check`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/library-playlists/${finalUserId}`] });\n      toast({\n        title: isInLibrary ? \"Playlist removed from library\" : \"Playlist added to library\",\n        description: isInLibrary \n          ? \"Playlist removed from your library\" \n          : \"Playlist added to your library\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Library action error:\", error);\n      const message = error?.message || \"Failed to update library\";\n      if (message.includes(\"Premium feature required\")) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"Managing your library is a premium feature. Upgrade to Premium for only 3.14π!\",\n          variant: \"default\",\n          action: (\n            <div className=\"flex items-center gap-1 text-primary\">\n              <Crown className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Upgrade</span>\n            </div>\n          ),\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleLikePlaylist = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    likeMutation.mutate();\n    setOpen(false);\n  };\n\n  const handleLibraryAction = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    libraryMutation.mutate();\n    setOpen(false);\n  };\n\n  const handleAddToPlaylist = (targetPlaylistId: string) => {\n    // This would be used when we have a specific song to add\n    // For now, this is a placeholder for future functionality\n    if (onAddToPlaylist) {\n      // onAddToPlaylist(songId, targetPlaylistId);\n    }\n    setOpen(false);\n  };\n\n  // Filter user-created playlists (not system playlists)\n  const userCreatedPlaylists = (userPlaylists as Playlist[])?.filter((p: Playlist) => \n    p.createdBy === finalUserId && \n    !['discover-weekly', 'daily-mix-1', 'chill-ambient', 'electronic-energy', 'purple-vibes'].includes(p.id)\n  ) || [];\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-8 w-8 p-0 text-white/70 hover:text-white hover:bg-white/10\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n          data-testid={`playlist-options-${playlist.id}`}\n        >\n          <MoreVertical className=\"h-4 w-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent \n        align=\"end\" \n        className=\"w-56 bg-gray-900 border-gray-700\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <DropdownMenuItem\n          onClick={() => {\n            if (!isPremium) {\n              toast({\n                title: \"Premium Feature\",\n                description: \"Liking playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n                variant: \"default\",\n                action: (\n                  <div className=\"flex items-center gap-1 text-primary\">\n                    <Crown className=\"h-3 w-3\" />\n                    <span className=\"text-xs\">Upgrade</span>\n                  </div>\n                ),\n              });\n              setOpen(false);\n              return;\n            }\n            likeMutation.mutate();\n          }}\n          disabled={likeMutation.isPending}\n          className={`text-white cursor-pointer ${!isPremium ? 'opacity-50' : 'hover:bg-gray-800'}`}\n          data-testid={`${isLiked ? 'unlike' : 'like'}-playlist-${playlist.id}`}\n        >\n          {!isPremium ? (\n            <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          ) : (\n            <Heart className={`mr-2 h-4 w-4 ${isLiked ? 'fill-purple-500 text-purple-500' : 'text-white'}`} />\n          )}\n          {!isPremium ? \"Like playlist\" : (isLiked ? \"Remove from liked playlists\" : \"Like playlist\")}\n          {!isPremium && <Crown className=\"ml-auto h-3 w-3 text-primary\" />}\n        </DropdownMenuItem>\n\n        <DropdownMenuItem\n          onClick={() => {\n            if (!isPremium) {\n              toast({\n                title: \"Premium Feature\",\n                description: \"Adding playlists to library is a premium feature. Upgrade to Premium for only 3.14π!\",\n                variant: \"default\",\n                action: (\n                  <div className=\"flex items-center gap-1 text-primary\">\n                    <Crown className=\"h-3 w-3\" />\n                    <span className=\"text-xs\">Upgrade</span>\n                  </div>\n                ),\n              });\n              setOpen(false);\n              return;\n            }\n            libraryMutation.mutate();\n          }}\n          disabled={libraryMutation.isPending}\n          className={`text-white cursor-pointer ${!isPremium ? 'opacity-50' : 'hover:bg-gray-800'}`}\n          data-testid={`${isInLibrary ? 'remove-from' : 'add-to'}-library-${playlist.id}`}\n        >\n          {!isPremium ? (\n            <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          ) : (\n            <Library className={`mr-2 h-4 w-4 ${isInLibrary ? 'fill-purple-500 text-purple-500' : 'text-white'}`} />\n          )}\n          {!isPremium ? \"Add to your library\" : (isInLibrary ? \"Remove from your library\" : \"Add to your library\")}\n          {!isPremium && <Crown className=\"ml-auto h-3 w-3 text-primary\" />}\n        </DropdownMenuItem>\n\n        {userCreatedPlaylists.length > 0 && (\n          <>\n            <DropdownMenuSeparator className=\"bg-gray-700\" />\n            {!showPlaylistSelector ? (\n              <div\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  if (!isPremium) {\n                    toast({\n                      title: \"Premium Feature\",\n                      description: \"Adding to playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n                      variant: \"default\",\n                      action: (\n                        <div className=\"flex items-center gap-1 text-primary\">\n                          <Crown className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">Upgrade</span>\n                        </div>\n                      ),\n                    });\n                    setOpen(false);\n                    return;\n                  }\n                  setShowPlaylistSelector(true);\n                }}\n                className={`text-white cursor-pointer px-2 py-1.5 text-sm flex items-center ${!isPremium ? 'opacity-50' : 'hover:bg-gray-800'}`}\n                data-testid={`show-add-to-playlist-${playlist.id}`}\n              >\n                {!isPremium ? (\n                  <Lock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                )}\n                Add to other playlist\n                {!isPremium ? (\n                  <Crown className=\"ml-auto h-3 w-3 text-primary\" />\n                ) : (\n                  <ChevronDown className=\"ml-auto h-4 w-4\" />\n                )}\n              </div>\n            ) : (\n              <>\n                <div\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    setShowPlaylistSelector(false);\n                  }}\n                  className=\"text-white hover:bg-gray-800 cursor-pointer px-2 py-1.5 text-sm flex items-center\"\n                  data-testid={`hide-add-to-playlist-${playlist.id}`}\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add to other playlist\n                  <ChevronDown className=\"ml-auto h-4 w-4 rotate-180\" />\n                </div>\n                {userCreatedPlaylists.map((userPlaylist: Playlist) => (\n                  <DropdownMenuItem\n                    key={userPlaylist.id}\n                    onClick={() => {\n                      if (!isPremium) {\n                        toast({\n                          title: \"Premium Feature\",\n                          description: \"Adding to playlists is a premium feature. Upgrade to Premium for only 3.14π!\",\n                          variant: \"default\",\n                          action: (\n                            <div className=\"flex items-center gap-1 text-primary\">\n                              <Crown className=\"h-3 w-3\" />\n                              <span className=\"text-xs\">Upgrade</span>\n                            </div>\n                          ),\n                        });\n                        setOpen(false);\n                        return;\n                      }\n                      handleAddToPlaylist(userPlaylist.id);\n                      setShowPlaylistSelector(false);\n                      setOpen(false);\n                    }}\n                    className={`text-white cursor-pointer pl-8 ${!isPremium ? 'opacity-50' : 'hover:bg-gray-800'}`}\n                    data-testid={`add-to-playlist-${userPlaylist.id}`}\n                  >\n                    {userPlaylist.name}\n                  </DropdownMenuItem>\n                ))}\n              </>\n            )}\n          </>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":13888},"client/src/pages/category.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useMusicPlayer } from \"@/contexts/music-player-context\";\nimport Header from \"@/components/layout/header\";\nimport TrackItem from \"@/components/music/track-item\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play } from \"lucide-react\";\nimport { type SongWithDetails } from \"@shared/schema\";\n\nexport default function Category() {\n  const [location] = useLocation();\n  const { setAllSongs, playSong } = useMusicPlayer();\n  \n  // Extract genre from URL parameter\n  const genre = decodeURIComponent(location.split(\"/category/\")[1] || \"\");\n\n  const { data: songs, isLoading } = useQuery<SongWithDetails[]>({\n    queryKey: [`/api/songs/genre/${genre}`],\n    enabled: !!genre,\n  });\n\n  const handlePlayAll = () => {\n    if (songs && songs.length > 0) {\n      setAllSongs(songs);\n      playSong(songs[0], songs);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      \n      <main className=\"px-4 pb-44\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold capitalize\" data-testid={`text-category-${genre}`}>\n              {genre}\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              {songs ? `${songs.length} songs` : \"Loading...\"}\n            </p>\n          </div>\n          {songs && songs.length > 0 && (\n            <Button\n              onClick={handlePlayAll}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid={`button-play-all-${genre}`}\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              Play All\n            </Button>\n          )}\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-3 bg-card rounded-lg p-3\">\n                <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-4 w-32 mb-1\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n                <Skeleton className=\"h-8 w-8 rounded\" />\n              </div>\n            ))}\n          </div>\n        ) : songs && songs.length > 0 ? (\n          <div className=\"space-y-3\">\n            {songs.map((song) => (\n              <TrackItem\n                key={song.id}\n                song={song}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid={`text-no-songs-${genre}`}>\n              No songs found in {genre} category\n            </p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":2878},"client/src/components/music/user-playlist-menu.tsx":{"content":"import React, { useState } from \"react\";\nimport { MoreVertical, ImagePlus, Edit, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ObjectUploader } from \"@/components/object-uploader\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport type { Playlist } from \"@shared/schema\";\n\ninterface UserPlaylistMenuProps {\n  playlist: Playlist;\n  isUserCreated: boolean;\n}\n\nexport default function UserPlaylistMenu({ playlist, isUserCreated }: UserPlaylistMenuProps) {\n  const [, setLocation] = useLocation();\n  const [isNameDialogOpen, setIsNameDialogOpen] = useState(false);\n  const [newName, setNewName] = useState(playlist.name);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updatePlaylistMutation = useMutation({\n    mutationFn: async (updates: { name?: string; imageUrl?: string }) => {\n      return apiRequest(\"PUT\", `/api/playlists/${playlist.id}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/playlists\", playlist.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/playlists\"] });\n      toast({\n        title: \"Success\",\n        description: \"Playlist updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update playlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleChangeName = () => {\n    if (newName.trim() && newName !== playlist.name) {\n      updatePlaylistMutation.mutate({ name: newName.trim() });\n    }\n    setIsNameDialogOpen(false);\n  };\n\n  const handleImageUpload = (uploadURL: string) => {\n    // Just pass the upload URL directly - server will handle normalization\n    updatePlaylistMutation.mutate({ imageUrl: uploadURL });\n  };\n\n  const handleAddSong = () => {\n    setLocation(`/search?playlist=${playlist.id}`);\n  };\n\n  // Only show menu for user-created playlists\n  if (!isUserCreated) {\n    return null; // Hide completely for non-user playlists\n  }\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" data-testid=\"button-more-playlist\">\n            <MoreVertical className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-48\">\n          <div className=\"px-1\">\n            <ObjectUploader\n              onComplete={handleImageUpload}\n              maxFileSize={5242880} // 5MB\n              buttonClassName=\"w-full justify-start p-2 h-auto text-sm font-normal hover:bg-accent hover:text-accent-foreground\"\n            >\n              <ImagePlus className=\"h-4 w-4 mr-2\" />\n              Add picture\n            </ObjectUploader>\n          </div>\n          <DropdownMenuItem onClick={() => setIsNameDialogOpen(true)} data-testid=\"menu-change-name\">\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Change name\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleAddSong} data-testid=\"menu-add-song\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add song\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Change Name Dialog */}\n      <Dialog open={isNameDialogOpen} onOpenChange={setIsNameDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-change-name\">\n          <DialogHeader>\n            <DialogTitle>Change playlist name</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"playlist-name\">Playlist name</Label>\n              <Input\n                id=\"playlist-name\"\n                value={newName}\n                onChange={(e) => setNewName(e.target.value)}\n                placeholder=\"Enter playlist name\"\n                data-testid=\"input-playlist-name\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsNameDialogOpen(false)}\n                data-testid=\"button-cancel-name\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleChangeName}\n                disabled={!newName.trim() || newName === playlist.name || updatePlaylistMutation.isPending}\n                data-testid=\"button-save-name\"\n              >\n                Save\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":5038},"server/setup-cc-music.ts":{"content":"// Setup Creative Commons Music for PurpleBeats\nimport { storage } from \"./storage\";\nimport { randomUUID } from \"crypto\";\n\ninterface CCMusicData {\n  artists: Array<{\n    id: string;\n    name: string;\n    imageUrl: string;\n  }>;\n  albums: Array<{\n    id: string;\n    title: string;\n    artistId: string;\n    imageUrl: string;\n    releaseYear: number;\n  }>;\n  songs: Array<{\n    id: string;\n    title: string;\n    artistId: string;\n    albumId?: string;\n    duration: number;\n    genre: string;\n    audioUrl: string;\n    imageUrl: string;\n    attribution: string;\n  }>;\n}\n\nexport async function setupCreativeCommonsMusic(): Promise<void> {\n  console.log(\"🎵 Setting up Creative Commons music...\");\n\n  // Clear existing data first\n  console.log(\"🗑️ Clearing old music data...\");\n  await clearExistingMusic();\n\n  const ccMusicData: CCMusicData = {\n    artists: [\n      {\n        id: \"artist-kevin-macleod\",\n        name: \"Kevin MacLeod\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\"\n      },\n      {\n        id: \"artist-scott-buckley\", \n        name: \"Scott Buckley\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\"\n      },\n      {\n        id: \"artist-purple-planet\",\n        name: \"Purple Planet Music\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\"\n      },\n      {\n        id: \"artist-bensound\",\n        name: \"Bensound\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\"\n      },\n      {\n        id: \"artist-zapsplat\",\n        name: \"Zapsplat Music\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\"\n      },\n      {\n        id: \"artist-ccmixter\",\n        name: \"ccMixter Artists\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\"\n      }\n    ],\n    albums: [\n      {\n        id: \"album-electronic-beats\",\n        title: \"Electronic Beats\",\n        artistId: \"artist-kevin-macleod\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        releaseYear: 2024\n      },\n      {\n        id: \"album-cinematic-journeys\",\n        title: \"Cinematic Journeys\", \n        artistId: \"artist-scott-buckley\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        releaseYear: 2024\n      },\n      {\n        id: \"album-purple-collection\",\n        title: \"Purple Collection\",\n        artistId: \"artist-purple-planet\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        releaseYear: 2024\n      },\n      {\n        id: \"album-ambient-space\",\n        title: \"Ambient Space\",\n        artistId: \"artist-bensound\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        releaseYear: 2024\n      },\n      {\n        id: \"album-creative-commons-hits\",\n        title: \"Creative Commons Hits\",\n        artistId: \"artist-ccmixter\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        releaseYear: 2024\n      }\n    ],\n    songs: [\n      // Kevin MacLeod - Electronic/Dance (8 songs)\n      {\n        id: \"cc-song-stringed-disco\",\n        title: \"Stringed Disco\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 142,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-beat-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Stringed Disco by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-monkeys-spinning\",\n        title: \"Monkeys Spinning Monkeys\",\n        artistId: \"artist-kevin-macleod\", \n        albumId: \"album-electronic-beats\",\n        duration: 134,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-beat-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Monkeys Spinning Monkeys by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-fluffing-duck\",\n        title: \"Fluffing a Duck\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\", \n        duration: 128,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-ambient-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Fluffing a Duck by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-brain-dance\",\n        title: \"Brain Dance\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 156,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-beat-3.mp3\", \n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Brain Dance by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-electroswing\",\n        title: \"Electroswing\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 163,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-beat-4.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Electroswing by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-cipher\", \n        title: \"Cipher\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 147,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-ambient-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Cipher by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-local-forecast\",\n        title: \"Local Forecast\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 138,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-beat-5.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Local Forecast by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-pixel-peeker\",\n        title: \"Pixel Peeker Polka\",\n        artistId: \"artist-kevin-macleod\",\n        albumId: \"album-electronic-beats\",\n        duration: 124,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-ambient-3.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=150&h=150&fit=crop\",\n        attribution: \"Music: Pixel Peeker Polka by Kevin MacLeod (incompetech.com) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      \n      // Scott Buckley - Cinematic/Ambient (7 songs)\n      {\n        id: \"cc-song-uprising\",\n        title: \"Uprising\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 189,\n        genre: \"Cinematic\",\n        audioUrl: \"/audio/placeholder-cinematic-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Uprising by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-rise-above\",\n        title: \"Rise Above\", \n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 176,\n        genre: \"Cinematic\",\n        audioUrl: \"/audio/placeholder-cinematic-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Rise Above by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-ephemera\",\n        title: \"Ephemera\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 203,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-ambient-4.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Ephemera by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-effervescence\",\n        title: \"Effervescence\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 187,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-ambient-5.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Effervescence by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-constellation\",\n        title: \"Constellation\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 198,\n        genre: \"Cinematic\",\n        audioUrl: \"/audio/placeholder-cinematic-3.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Constellation by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-legionnaire\",\n        title: \"Legionnaire\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 172,\n        genre: \"Cinematic\",\n        audioUrl: \"/audio/placeholder-cinematic-4.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Legionnaire by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-void\",\n        title: \"Void\",\n        artistId: \"artist-scott-buckley\",\n        albumId: \"album-cinematic-journeys\",\n        duration: 209,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-ambient-6.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\",\n        attribution: \"Music: Void by Scott Buckley (www.scottbuckley.com.au) | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n\n      // Purple Planet Music - Electronic/Synthwave (5 songs)\n      {\n        id: \"cc-song-purple-highway\",\n        title: \"Purple Highway\",\n        artistId: \"artist-purple-planet\",\n        albumId: \"album-purple-collection\",\n        duration: 154,\n        genre: \"Synthwave\",\n        audioUrl: \"/audio/placeholder-synthwave-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        attribution: \"Music: Purple Highway by Purple Planet Music | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-neon-nights\",\n        title: \"Neon Nights\",\n        artistId: \"artist-purple-planet\",\n        albumId: \"album-purple-collection\",\n        duration: 167,\n        genre: \"Synthwave\",\n        audioUrl: \"/audio/placeholder-synthwave-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        attribution: \"Music: Neon Nights by Purple Planet Music | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-digital-dreams\",\n        title: \"Digital Dreams\",\n        artistId: \"artist-purple-planet\",\n        albumId: \"album-purple-collection\",\n        duration: 143,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-electronic-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        attribution: \"Music: Digital Dreams by Purple Planet Music | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-retro-future\",\n        title: \"Retro Future\",\n        artistId: \"artist-purple-planet\",\n        albumId: \"album-purple-collection\",\n        duration: 178,\n        genre: \"Synthwave\",\n        audioUrl: \"/audio/placeholder-synthwave-3.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        attribution: \"Music: Retro Future by Purple Planet Music | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-cyber-pulse\",\n        title: \"Cyber Pulse\",\n        artistId: \"artist-purple-planet\",\n        albumId: \"album-purple-collection\",\n        duration: 162,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-electronic-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1487180144351-b8472da7d491?w=150&h=150&fit=crop\",\n        attribution: \"Music: Cyber Pulse by Purple Planet Music | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n\n      // Bensound - Ambient/Chill (5 songs)\n      {\n        id: \"cc-song-creative-minds\",\n        title: \"Creative Minds\",\n        artistId: \"artist-bensound\",\n        albumId: \"album-ambient-space\",\n        duration: 193,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-chill-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        attribution: \"Music: Creative Minds by Bensound | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-memories\",\n        title: \"Memories\",\n        artistId: \"artist-bensound\",\n        albumId: \"album-ambient-space\",\n        duration: 207,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-chill-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        attribution: \"Music: Memories by Bensound | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-tenderness\",\n        title: \"Tenderness\",\n        artistId: \"artist-bensound\",\n        albumId: \"album-ambient-space\",\n        duration: 184,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-chill-3.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        attribution: \"Music: Tenderness by Bensound | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-dreams\",\n        title: \"Dreams\",\n        artistId: \"artist-bensound\",\n        albumId: \"album-ambient-space\",\n        duration: 176,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-chill-4.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        attribution: \"Music: Dreams by Bensound | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-slow-motion\",\n        title: \"Slow Motion\",\n        artistId: \"artist-bensound\",\n        albumId: \"album-ambient-space\",\n        duration: 215,\n        genre: \"Ambient\",\n        audioUrl: \"/audio/placeholder-chill-5.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1516280440614-37939bbacd81?w=150&h=150&fit=crop\",\n        attribution: \"Music: Slow Motion by Bensound | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n\n      // ccMixter Artists - Mixed Genres (5 songs)\n      {\n        id: \"cc-song-beat-drop\",\n        title: \"Beat Drop\",\n        artistId: \"artist-ccmixter\",\n        albumId: \"album-creative-commons-hits\",\n        duration: 148,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-drop-1.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        attribution: \"Music: Beat Drop by ccMixter Artists | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-frequency\",\n        title: \"Frequency\",\n        artistId: \"artist-ccmixter\",\n        albumId: \"album-creative-commons-hits\",\n        duration: 156,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-drop-2.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        attribution: \"Music: Frequency by ccMixter Artists | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-wavelength\",\n        title: \"Wavelength\",\n        artistId: \"artist-ccmixter\",\n        albumId: \"album-creative-commons-hits\",\n        duration: 132,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-drop-3.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        attribution: \"Music: Wavelength by ccMixter Artists | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-spectrum\",\n        title: \"Spectrum\",\n        artistId: \"artist-ccmixter\",\n        albumId: \"album-creative-commons-hits\",\n        duration: 164,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-drop-4.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        attribution: \"Music: Spectrum by ccMixter Artists | Licensed under Creative Commons: By Attribution 4.0\"\n      },\n      {\n        id: \"cc-song-resonance\",\n        title: \"Resonance\",\n        artistId: \"artist-ccmixter\",\n        albumId: \"album-creative-commons-hits\",\n        duration: 171,\n        genre: \"Electronic\",\n        audioUrl: \"/audio/placeholder-drop-5.mp3\",\n        imageUrl: \"https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=150&h=150&fit=crop\",\n        attribution: \"Music: Resonance by ccMixter Artists | Licensed under Creative Commons: By Attribution 4.0\"\n      }\n    ]\n  };\n\n  // Add artists\n  console.log(\"👨‍🎤 Adding artists...\");\n  for (const artist of ccMusicData.artists) {\n    await storage.createArtist(artist);\n  }\n\n  // Add albums  \n  console.log(\"💿 Adding albums...\");\n  for (const album of ccMusicData.albums) {\n    await storage.createAlbum(album);\n  }\n\n  // Add songs\n  console.log(\"🎵 Adding songs...\");\n  for (const song of ccMusicData.songs) {\n    await storage.createSong(song);\n  }\n\n  // Initialize default playlists with new songs\n  console.log(\"📝 Setting up default playlists...\");\n  await storage.initializeDefaultPlaylists();\n\n  console.log(\"✅ Creative Commons music setup complete!\");\n  console.log(`📊 Added: ${ccMusicData.artists.length} artists, ${ccMusicData.albums.length} albums, ${ccMusicData.songs.length} songs`);\n}\n\nasync function clearExistingMusic(): Promise<void> {\n  // This would clear existing music data\n  // For now, just log since we'll replace the storage data\n  console.log(\"Clearing existing music data...\");\n}","size_bytes":19554},"test-cc-music.js":{"content":"// Quick test to add CC music directly\nimport { storage } from \"./server/storage.js\";\n\nasync function testAddMusic() {\n  try {\n    console.log(\"🎵 Testing Creative Commons music addition...\");\n    \n    // Test adding one artist\n    const testArtist = {\n      id: \"test-artist-kevin\",\n      name: \"Kevin MacLeod (Test)\",\n      imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=150&h=150&fit=crop\"\n    };\n    \n    const artist = await storage.createArtist(testArtist);\n    console.log(\"✅ Added artist:\", artist);\n    \n    console.log(\"✅ Test successful! Database is working.\");\n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n  }\n}\n\ntestAddMusic();","size_bytes":688},"client/src/contexts/auth-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { advancedPiStorage } from \"@/lib/advanced-storage\";\nimport { initPiSDK, authenticate, authenticateCallback } from \"@/lib/piAuth\";\nimport type { AuthResult, PaymentDTO } from \"@/types/pi\";\n\ninterface AuthUser {\n  uid: string;\n  username: string;\n  isGuest?: boolean;\n}\n\n// Pi Network specific user type (cloned from purleemusic)\nexport interface PiUser {\n  uid: string;\n  username: string;\n  accessToken: string;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  userId: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: () => Promise<void>;\n  logout: () => Promise<void>;\n  clearGuestProfile: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const queryClient = useQueryClient();\n  const [guestUser, setGuestUser] = useState<AuthUser | null>(null);\n\n  // Backend session\n  const { data: sessionUser, isLoading: sessionLoading } = useQuery({\n    queryKey: [\"/api/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000,\n  });\n\n  // Pi login mutation - official flow\n  const loginMutation = useMutation({\n    mutationFn: async (authResult: AuthResult) => {\n      // Security: Never log authResult as it contains sensitive credentials\n      console.log('🔐 Sending Pi auth data to backend...');\n      const response = await apiRequest(\"POST\", \"/api/auth/pi-login\", { authResult });\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('✅ Pi login successful, invalidating session cache');\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n    onError: (error: any) => {\n      console.error('❌ Pi login failed:', error);\n    }\n  });\n\n  // Pi logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setGuestUser(null);\n      await advancedPiStorage.clearAllPiData();\n    },\n  });\n\n  // Init Pi SDK and storage on mount\n  useEffect(() => {\n    const initializeServices = async () => {\n      try {\n        // Initialize storage first\n        const storageInitialized = await advancedPiStorage.initialize();\n        if (storageInitialized) {\n          console.log(\"✅ Advanced storage inicijalizovan\");\n        } else {\n          console.warn(\"⚠️ Advanced storage init failed, continuing with fallback\");\n        }\n        \n        // Then initialize Pi SDK\n        await initPiSDK(true);\n        console.log(\"✅ Pi SDK ready\");\n      } catch (error) {\n        console.error(\"❌ Service initialization error:\", error);\n      }\n    };\n    \n    initializeServices();\n  }, []);\n\n  // Guest user fallback\n  useEffect(() => {\n    if (!sessionLoading && !sessionUser) {\n      const setupGuest = async () => {\n        try {\n          // Try to restore guest from storage\n          const recovered = await advancedPiStorage.findAnyPiUser();\n          if (recovered) {\n            setGuestUser({ ...recovered, isGuest: true });\n            return;\n          }\n\n          // If no guest found, create new\n          const guestId = `guest-${Math.random().toString(36).slice(2)}-${Date.now()}`;\n          const newGuest: AuthUser = { uid: guestId, username: \"Guest User\", isGuest: true };\n\n          setGuestUser(newGuest);\n          await advancedPiStorage.savePiUser(newGuest);\n        } catch (err) {\n          console.warn(\"⚠️ Guest fallback failed:\", err);\n          setGuestUser({ uid: `guest-${Date.now()}`, username: \"Guest User\", isGuest: true });\n        }\n      };\n\n      setupGuest();\n    }\n  }, [sessionUser, sessionLoading]);\n\n  // Pi login flow - Enhanced with PurpleBeats integration\n  const piLogin = async (): Promise<void> => {\n    try {\n      console.log(\"🎵 PurpleBeats Pi login started...\");\n      \n      // Use PurpleBeats Pi methods from global scope\n      if (window.PurpleBeats && window.PurpleBeats.piLogin) {\n        console.log(\"🔧 Using PurpleBeats Pi login method\");\n        const authResult = await window.PurpleBeats.piLogin();\n        \n        // Store Pi user data locally\n        const piUser: PiUser = {\n          uid: authResult.user.uid,\n          username: authResult.user.username,\n          accessToken: authResult.accessToken\n        };\n        \n        await advancedPiStorage.savePiUser(piUser);\n        console.log(\"✅ Pi user saved to PurpleBeats storage\");\n        \n        // Send to backend for session creation\n        await loginMutation.mutateAsync(authResult);\n        console.log(\"✅ PurpleBeats Pi login completed successfully\");\n        \n      } else {\n        // Fallback to existing piAuth.ts method\n        console.log(\"🔄 Fallback to existing Pi auth method\");\n        const promise = new Promise<void>((resolve, reject) => {\n          authenticateCallback(\n            [\"username\", \"payments\"],\n            async (authResult: AuthResult) => {\n              try {\n                const piUser: PiUser = {\n                  uid: authResult.user.uid,\n                  username: authResult.user.username,\n                  accessToken: authResult.accessToken\n                };\n                \n                await advancedPiStorage.savePiUser(piUser);\n                await loginMutation.mutateAsync(authResult);\n                resolve();\n              } catch (error) {\n                reject(error);\n              }\n            },\n            (error: string) => {\n              reject(new Error(error));\n            }\n          );\n        });\n        \n        await promise;\n      }\n    } catch (error) {\n      console.error(\"❌ PurpleBeats Pi login failed:\", error);\n      throw error;\n    }\n  };\n  // Replace old login with enhanced PurpleBeats Pi login\n  const login = async (): Promise<void> => {\n    return piLogin();\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const clearGuestProfile = async () => {\n    setGuestUser(null);\n    await advancedPiStorage.clearAllPiData();\n  };\n\n  // Who is the current user?\n  const currentUser = (sessionUser as AuthUser) || guestUser;\n  const isAuthenticated = !!sessionUser;\n  const isLoading = sessionLoading || loginMutation.isPending || logoutMutation.isPending;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: currentUser,\n        userId: currentUser?.uid || null,\n        isAuthenticated,\n        isLoading,\n        login,\n        logout,\n        clearGuestProfile,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":7061},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Users, Crown, TrendingUp, DollarSign, Calendar, UserCheck, Percent } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AdminStats {\n  totalUsers: number;\n  premiumUsers: number;\n  freeUsers: number;\n  recentUsers: number;\n  todayUsers: number;\n  revenue: number;\n  conversionRate: number;\n}\n\ninterface AdminUser {\n  id: string;\n  userId: string;\n  name: string;\n  nickname?: string;\n  imageUrl?: string;\n  isPremium: boolean;\n  expiresAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function AdminPage() {\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/stats', refreshKey],\n  }) as { data: AdminStats | undefined, isLoading: boolean };\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/admin/users', refreshKey],\n  }) as { data: AdminUser[] | undefined, isLoading: boolean };\n\n  const handleRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('sr-RS', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatRevenue = (amount: number) => {\n    return `${amount.toFixed(2)}π`;\n  };\n\n  if (statsLoading || usersLoading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white p-4 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-purple-500 border-t-transparent rounded-full\" />\n        <p className=\"mt-4 text-white\">Loading admin data...</p>\n      </div>\n    );\n  }\n\n  // Debug informacije\n  console.log('Admin data:', { stats, users, statsLoading, usersLoading });\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-4 space-y-6 pb-32\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-400 to-yellow-400 bg-clip-text text-transparent\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-400 mt-1\">PurpleBeats - Korisnicke statistike</p>\n        </div>\n        <Button \n          onClick={handleRefresh}\n          className=\"bg-purple-600 hover:bg-purple-700\"\n          data-testid=\"button-refresh\"\n        >\n          <TrendingUp className=\"w-4 h-4 mr-2\" />\n          Osveži podatke\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Ukupno korisnika</CardTitle>\n              <Users className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"text-total-users\">\n                {stats.totalUsers}\n              </div>\n              <p className=\"text-xs text-gray-400 mt-1\">Registrovanih korisnika</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Premium korisnici</CardTitle>\n              <Crown className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-400\" data-testid=\"text-premium-users\">\n                {stats.premiumUsers}\n              </div>\n              <p className=\"text-xs text-gray-400 mt-1\">Platili 3.14π</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Prihod</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400\" data-testid=\"text-revenue\">\n                {formatRevenue(stats.revenue)}\n              </div>\n              <p className=\"text-xs text-gray-400 mt-1\">Ukupan prihod</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Konverzija</CardTitle>\n              <Percent className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-400\" data-testid=\"text-conversion-rate\">\n                {stats.conversionRate.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-gray-400 mt-1\">Premium konverzija</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Recent Activity */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-lg text-white flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2 text-purple-400\" />\n                Danas\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-purple-400\" data-testid=\"text-today-users\">\n                {stats.todayUsers}\n              </div>\n              <p className=\"text-gray-400 text-sm\">Novih registracija</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-lg text-white flex items-center\">\n                <UserCheck className=\"h-5 w-5 mr-2 text-green-400\" />\n                Poslednih 7 dana\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-400\" data-testid=\"text-recent-users\">\n                {stats.recentUsers}\n              </div>\n              <p className=\"text-gray-400 text-sm\">Novih korisnika</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-lg text-white flex items-center\">\n                <Users className=\"h-5 w-5 mr-2 text-blue-400\" />\n                Besplatni\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-blue-400\" data-testid=\"text-free-users\">\n                {stats.freeUsers}\n              </div>\n              <p className=\"text-gray-400 text-sm\">Free korisnika</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Users List */}\n      <Card className=\"bg-gray-900 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-xl text-white\">Svi korisnici</CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Pregled svih registrovanih korisnika i njihov status\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {users && users.length > 0 ? (\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {users.map((user) => (\n                <div \n                  key={user.id} \n                  className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg border border-gray-700\"\n                  data-testid={`user-row-${user.userId}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-yellow-500 rounded-full flex items-center justify-center\">\n                      {user.imageUrl ? (\n                        <img src={user.imageUrl} alt={user.name} className=\"w-full h-full rounded-full object-cover\" />\n                      ) : (\n                        <span className=\"text-white font-bold text-lg\">\n                          {user.name.charAt(0).toUpperCase()}\n                        </span>\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold text-white\" data-testid={`text-user-name-${user.userId}`}>\n                          {user.name}\n                        </h3>\n                        {user.isPremium && (\n                          <Crown className=\"h-4 w-4 text-yellow-400\" />\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-400\" data-testid={`text-user-id-${user.userId}`}>\n                        ID: {user.userId}\n                      </p>\n                      {user.nickname && (\n                        <p className=\"text-sm text-purple-400\">@{user.nickname}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <Badge \n                      variant={user.isPremium ? \"default\" : \"secondary\"}\n                      className={user.isPremium ? \"bg-yellow-600 text-black\" : \"bg-gray-600 text-white\"}\n                      data-testid={`badge-status-${user.userId}`}\n                    >\n                      {user.isPremium ? 'Premium' : 'Free'}\n                    </Badge>\n                    <p className=\"text-xs text-gray-500\">\n                      Registrovan: {formatDate(user.createdAt)}\n                    </p>\n                    {user.isPremium && user.expiresAt && (\n                      <p className=\"text-xs text-yellow-400\">\n                        Ističe: {formatDate(user.expiresAt)}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center text-gray-400 py-8\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>Nema registrovanih korisnika</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10896},"client/src/lib/advanced-storage.ts":{"content":"// Advanced Pi Network Storage dengan IndexedDB + navigator.storage.persist()\n// Mengatasi Pi Browser localStorage clearing issue\n\ninterface PiUserData {\n  uid: string;\n  username: string;\n  timestamp: number;\n  sessionId: string;\n}\n\ninterface SavePiUserInput {\n  uid: string;\n  username: string;\n}\n\ninterface StorageQuota {\n  quota: number;\n  usage: number;\n  percentage: number;\n}\n\nclass AdvancedPiStorage {\n  private dbName = 'PiNetworkStorage';\n  private dbVersion = 1;\n  private storeName = 'piUserData';\n  private db: IDBDatabase | null = null;\n  private isInitialized = false;\n\n  // Initialize IndexedDB dengan persistent storage\n  async initialize(): Promise<boolean> {\n    try {\n      console.log('🔧 Inicijalizovanje naprednog Pi storage sistema...');\n      \n      // 1. Zatraži persistent storage (prioritet #1!)\n      const persistGranted = await this.requestPersistentStorage();\n      console.log('💾 Persistent storage granted:', persistGranted);\n\n      // 2. Inicijalizuj IndexedDB\n      await this.initIndexedDB();\n      \n      this.isInitialized = true;\n      console.log('✅ Napredni Pi storage sistem spreman!');\n      return true;\n    } catch (error) {\n      console.error('❌ Greška pri inicijalizaciji naprednog storage:', error);\n      return false;\n    }\n  }\n\n  // Zatraži persistent storage (kritično za Pi Browser!)\n  private async requestPersistentStorage(): Promise<boolean> {\n    if (!navigator.storage || !navigator.storage.persist) {\n      console.warn('⚠️ Persistent storage API nije dostupan');\n      return false;\n    }\n\n    try {\n      // Proveri da li je već persistent\n      const isPersisted = await navigator.storage.persisted();\n      if (isPersisted) {\n        console.log('✅ Storage je već persistent');\n        return true;\n      }\n\n      // Zatraži persistent storage\n      const granted = await navigator.storage.persist();\n      console.log(granted ? '✅ Persistent storage odobren!' : '❌ Persistent storage odbijen');\n      \n      return granted;\n    } catch (error) {\n      console.error('❌ Greška pri zahtevanju persistent storage:', error);\n      return false;\n    }\n  }\n\n  // Inicijalizuj IndexedDB\n  private initIndexedDB(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        console.error('❌ IndexedDB open failed:', request.error);\n        reject(request.error);\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        console.log('✅ IndexedDB connected successfully');\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { keyPath: 'uid' });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n          console.log('🔧 IndexedDB object store created');\n        }\n      };\n    });\n  }\n\n  // Čuvanje Pi user podataka (SAMO uid, username - BEZ token!)\n  async savePiUser(userData: SavePiUserInput): Promise<boolean> {\n    if (!this.isInitialized || !this.db) {\n      console.error('❌ Advanced storage nije inicijalizovan');\n      return false;\n    }\n\n    try {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      \n      // Dodaj timestamp za tracking\n      const dataWithTimestamp = {\n        ...userData,\n        timestamp: Date.now(),\n        sessionId: this.generateSessionId()\n      };\n\n      await new Promise<void>((resolve, reject) => {\n        const request = store.put(dataWithTimestamp);\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n\n      console.log('✅ Pi user data saved to IndexedDB:', userData.uid);\n      \n      // Parallelly save to fallback locations\n      await this.saveFallbackData(userData);\n      \n      return true;\n    } catch (error) {\n      console.error('❌ Greška pri čuvanju u IndexedDB:', error);\n      return false;\n    }\n  }\n\n  // Učitavanje Pi user podataka iz IndexedDB\n  async loadPiUser(uid: string): Promise<PiUserData | null> {\n    if (!this.isInitialized || !this.db) {\n      console.warn('⚠️ Advanced storage nije inicijalizovan, pokušavam fallback...');\n      return await this.loadFallbackData(uid);\n    }\n\n    try {\n      const transaction = this.db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n\n      const data = await new Promise<PiUserData | null>((resolve, reject) => {\n        const request = store.get(uid);\n        request.onsuccess = () => resolve(request.result || null);\n        request.onerror = () => reject(request.error);\n      });\n\n      if (data) {\n        console.log('📂 Pi user data loaded from IndexedDB:', uid);\n        return data;\n      } else {\n        console.log('🔍 Nema podataka u IndexedDB, pokušavam fallback...');\n        return await this.loadFallbackData(uid);\n      }\n    } catch (error) {\n      console.error('❌ Greška pri učitavanju iz IndexedDB:', error);\n      return await this.loadFallbackData(uid);\n    }\n  }\n\n  // Auto-recovery funkcija - pokušava da pronađe BILO KOJI Pi user\n  async findAnyPiUser(): Promise<PiUserData | null> {\n    try {\n      // 1. Pokušaj IndexedDB prvo\n      if (this.isInitialized && this.db) {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        \n        const allUsers = await new Promise<PiUserData[]>((resolve, reject) => {\n          const request = store.getAll();\n          request.onsuccess = () => resolve(request.result || []);\n          request.onerror = () => reject(request.error);\n        });\n\n        if (allUsers.length > 0) {\n          // Vrati najnoviji profile\n          const latestUser = allUsers.sort((a, b) => b.timestamp - a.timestamp)[0];\n          console.log('🔄 Auto-recovery: Pronašao Pi user u IndexedDB:', latestUser.uid);\n          return latestUser;\n        }\n      }\n\n      // 2. Fallback recovery\n      console.log('🔍 Auto-recovery: Pokušavam fallback metode...');\n      return await this.loadFallbackData('any');\n    } catch (error) {\n      console.error('❌ Auto-recovery failed:', error);\n      return null;\n    }\n  }\n\n  // Fallback storage (localStorage + cookies)\n  private async saveFallbackData(userData: PiUserData): Promise<void> {\n    try {\n      const safeData = {\n        uid: userData.uid,\n        username: userData.username,\n        timestamp: userData.timestamp\n      };\n      \n      const dataString = JSON.stringify(safeData);\n      \n      // localStorage (koristi iste ključeve kao AuthContext!)\n      localStorage.setItem('pi-user', dataString);\n      \n      // Cookie (30 dana, koristi iste ključeve kao AuthContext!)\n      const expires = new Date();\n      expires.setDate(expires.getDate() + 30);\n      const isSecure = window.location.protocol === 'https:';\n      document.cookie = `pi_backup=${encodeURIComponent(dataString)}; expires=${expires.toUTCString()}; path=/; SameSite=Lax${isSecure ? '; Secure' : ''}`;\n      \n      console.log('💾 Fallback data saved');\n    } catch (error) {\n      console.error('❌ Fallback save failed:', error);\n    }\n  }\n\n  // Fallback loading\n  private async loadFallbackData(uid: string): Promise<PiUserData | null> {\n    try {\n      // 1. localStorage (koristi iste ključeve kao AuthContext!)\n      const localData = localStorage.getItem('pi-user');\n      if (localData) {\n        const parsed = JSON.parse(localData);\n        if (uid === 'any' || parsed.uid === uid) {\n          console.log('📂 Fallback recovery from localStorage');\n          return parsed;\n        }\n      }\n\n      // 2. Cookie (koristi iste ključeve kao AuthContext!)\n      const cookies = document.cookie.split(';');\n      for (const cookie of cookies) {\n        const [name, value] = cookie.trim().split('=');\n        if (name === 'pi_backup' && value) {\n          try {\n            const decoded = decodeURIComponent(value);\n            const parsed = JSON.parse(decoded);\n            if (uid === 'any' || parsed.uid === uid) {\n              console.log('🍪 Fallback recovery from cookie');\n              // Restore to localStorage (koristi iste ključeve!)\n              localStorage.setItem('pi-user', decoded);\n              return parsed;\n            }\n          } catch (e) {\n            console.error('Cookie parse error:', e);\n          }\n        }\n      }\n\n      console.log('❌ Nema fallback podataka za:', uid);\n      return null;\n    } catch (error) {\n      console.error('❌ Fallback load failed:', error);\n      return null;\n    }\n  }\n\n  // Monitor storage usage\n  async checkStorageQuota(): Promise<StorageQuota | null> {\n    if (!navigator.storage || !navigator.storage.estimate) {\n      return null;\n    }\n\n    try {\n      const estimate = await navigator.storage.estimate();\n      const quota = estimate.quota || 0;\n      const usage = estimate.usage || 0;\n      const percentage = quota > 0 ? (usage / quota) * 100 : 0;\n\n      const result = { quota, usage, percentage };\n      \n      if (percentage > 80) {\n        console.warn('⚠️ Storage quota skoro pun:', `${percentage.toFixed(1)}%`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('❌ Storage quota check failed:', error);\n      return null;\n    }\n  }\n\n  // Clear all Pi data (logout)\n  async clearAllPiData(): Promise<void> {\n    try {\n      // Clear IndexedDB\n      if (this.isInitialized && this.db) {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        await new Promise<void>((resolve, reject) => {\n          const request = store.clear();\n          request.onsuccess = () => resolve();\n          request.onerror = () => reject(request.error);\n        });\n      }\n\n      // Clear fallbacks (koristi iste ključeve kao AuthContext!)\n      localStorage.removeItem('pi-user');\n      document.cookie = 'pi_backup=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n\n      console.log('🧹 Svi Pi podaci obrisani');\n    } catch (error) {\n      console.error('❌ Greška pri brisanju Pi podataka:', error);\n    }\n  }\n\n  private generateSessionId(): string {\n    return `pi-session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export singleton instance\nexport const advancedPiStorage = new AdvancedPiStorage();\n\n// Export types\nexport type { SavePiUserInput, PiUserData, StorageQuota };","size_bytes":10723},"client/src/lib/piAuth.ts":{"content":"// Pi Authentication - Official Demo App Implementation\nimport type { AuthResult, PaymentDTO } from '@/types/pi';\n\nexport interface PiAuthResult {\n  accessToken: string;\n  user: { uid: string; username: string };\n}\n\nexport async function initPiSDK(sandbox = true): Promise<void> {\n  if (typeof window === \"undefined\") throw new Error(\"Window not available\");\n\n  // Wait for Pi SDK to load from our backend\n  const initPromise = new Promise<void>((resolve, reject) => {\n    const checkReady = () => {\n      if (typeof (window as any).Pi !== 'undefined') {\n        resolve();\n      } else {\n        setTimeout(checkReady, 100);\n      }\n    };\n    setTimeout(() => reject(new Error(\"Pi SDK timeout\")), 10000);\n    checkReady();\n  });\n\n  await initPromise;\n  console.log(\"✅ Pi SDK loaded successfully\");\n}\n\n// Official Pi authentication flow with payment handling\nconst onIncompletePaymentFound = (payment: PaymentDTO) => {\n  console.log(\"💰 Incomplete payment found:\", payment);\n  // Handle incomplete payments if needed\n  // This could call your backend to handle the incomplete payment\n};\n\n// Callback-based authenticate function using CORRECT Promise-based Pi SDK API\nexport function authenticateCallback(\n  scopes: string[] = [\"username\", \"payments\"],\n  onSuccess: (authResult: AuthResult) => void,\n  onError: (error: string) => void\n): void {\n  if (!window.Pi || typeof window.Pi.authenticate !== \"function\") {\n    onError(\"Pi SDK not ready - authenticate missing\");\n    return;\n  }\n\n  console.log(\"🔐 Starting Pi authentication with scopes:\", scopes);\n  console.log(\"🔍 Pi SDK ready status:\", !!window.Pi);\n\n  try {\n    console.log(\"🔥 Calling Pi.authenticate with Promise API...\");\n    \n    // CORRECTED: Use Promise-based Pi SDK API\n    window.Pi.authenticate(scopes, onIncompletePaymentFound)\n      .then((authResult: AuthResult) => {\n        console.log(\"📋 Pi auth result received\");\n        \n        if (!authResult?.accessToken || !authResult?.user?.uid) {\n          console.error(\"❌ Missing data in Pi result:\", authResult);\n          onError(\"Pi authentication failed - missing user or token\");\n          return;\n        }\n\n        console.log(\"✅ Pi Authentication successful for:\", authResult.user.username);\n        onSuccess(authResult);\n      })\n      .catch((error: any) => {\n        console.error(\"❌ Pi.authenticate failed:\", error);\n        onError(error?.message || \"Authentication failed\");\n      });\n      \n  } catch (error: any) {\n    console.error(\"❌ Pi.authenticate error:\", error);\n    onError(error.message || \"Unknown error\");\n  }\n}\n\n// Promise-based function for direct use\nexport async function authenticate(scopes: string[] = [\"username\", \"payments\"]): Promise<AuthResult> {\n  if (!window.Pi || typeof window.Pi.authenticate !== \"function\") {\n    throw new Error(\"Pi SDK not ready - authenticate missing\");\n  }\n\n  console.log(\"🔐 Starting Pi authentication with scopes:\", scopes);\n  \n  try {\n    console.log(\"🔥 Calling Pi.authenticate with Promise API...\");\n    const authResult = await window.Pi.authenticate(scopes, onIncompletePaymentFound);\n    \n    if (!authResult?.accessToken || !authResult?.user?.uid) {\n      throw new Error(\"Pi authentication failed - missing user or token\");\n    }\n    \n    console.log(\"✅ Pi Authentication successful for:\", authResult.user.username);\n    return authResult;\n  } catch (error: any) {\n    console.error(\"❌ Pi.authenticate failed:\", error);\n    throw error;\n  }\n}\n\n// Legacy compatibility\nexport async function authenticateOld(scopes: string[] = [\"username\"]): Promise<PiAuthResult> {\n  const result = await authenticate(scopes);\n  return {\n    accessToken: result.accessToken,\n    user: result.user\n  };\n}","size_bytes":3708},"client/src/types/pi.d.ts":{"content":"// Pi Network SDK global type declaration\n// See: https://developers.minepi.com/docs/pi-platform-sdk\n\nexport interface AuthResult {\n  accessToken: string;\n  user: {\n    uid: string;\n    username: string;\n  };\n}\n\nexport interface PaymentDTO {\n  identifier: string;\n  user_uid: string;\n  amount: number;\n  memo: string;\n  metadata: Record<string, any>;\n  from_address: string;\n  to_address: string;\n  direction: \"user_to_app\" | \"app_to_user\";\n  network: string;\n  status: {\n    developer_approved: boolean;\n    transaction_verified: boolean;\n    developer_completed: boolean;\n    cancelled: boolean;\n    user_cancelled: boolean;\n  };\n  transaction?: {\n    txid: string;\n    verified: boolean;\n    _link: string;\n  };\n}\n\ndeclare global {\n  interface Window {\n    Pi?: {\n      init: (config: {\n        version: string;\n        sandbox: boolean;\n        appId: string;\n      }) => void;\n      authenticate: (\n        scopes: string[],\n        onIncomplete?: (payment: PaymentDTO) => void\n      ) => Promise<AuthResult>;\n      createPayment: (paymentData: {\n        amount: number;\n        memo: string;\n        metadata: Record<string, any>;\n      }) => Promise<PaymentDTO>;\n      initialized?: boolean;\n    };\n    PurpleBeats?: {\n      piLogin: () => Promise<AuthResult>;\n      piPayment: (amount: number, memo: string, metadata: Record<string, any>) => Promise<PaymentDTO>;\n    };\n  }\n}\n\nexport {};","size_bytes":1395},"client/src/components/pi-login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\nimport { authenticateCallback } from \"@/lib/piAuth\";\n\ninterface PiUser {\n  uid: string;\n  username: string;\n  accessToken: string;\n}\n\nconst SCOPES = [\"username\", \"payments\"];\n\ninterface PiLoginProps {\n  onAuth: (user: PiUser) => void;\n  user: PiUser | null;\n}\n\nconst PiLogin: React.FC<PiLoginProps> = ({ onAuth, user }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleLogin = () => {\n    setLoading(true);\n    setError(null);\n    \n    // Use the corrected wrapper from piAuth.ts\n    authenticateCallback(\n      SCOPES,\n      (authResult) => {\n        console.log(\"🎉 PiLogin: Authentication successful\");\n        onAuth({\n          uid: authResult.user.uid,\n          username: authResult.user.username,\n          accessToken: authResult.accessToken,\n        });\n        setLoading(false);\n      },\n      (error) => {\n        console.error(\"❌ PiLogin: Authentication failed:\", error);\n        setError(error || \"Authentication failed\");\n        setLoading(false);\n      }\n    );\n  };\n\n  if (user) {\n    return (\n      <div className=\"flex items-center space-x-2\" data-testid=\"pi-user-authenticated\">\n        <span className=\"font-semibold text-green-400\">@{user.username}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <Button\n        className=\"bg-yellow-400 hover:bg-yellow-500 text-black font-bold\"\n        onClick={handleLogin}\n        disabled={loading}\n        data-testid=\"button-pi-login\"\n      >\n        {loading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Logging in...\n          </>\n        ) : (\n          \"Login with Pi\"\n        )}\n      </Button>\n      {error && (\n        <span className=\"text-red-500 text-xs mt-2\" data-testid=\"text-pi-error\">\n          {error}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport type { PiUser };\nexport default PiLogin;","size_bytes":2075},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);","size_bytes":155},"src/index.js":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);","size_bytes":182}},"version":1}